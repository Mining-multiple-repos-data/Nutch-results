{"classname": "suffix.SuffixURLFilter", "TemplateID": 0, "logline": "\"Missing urlfilter.suffix.file, all URLs will be rejected!\"", "loggerLevel": "warn", "TemplatePattern": "Missing urlfilter.suffix.file, all URLs will be rejected!"}
{"classname": "suffix.SuffixURLFilter", "TemplateID": 1, "logline": "\"ACCEPTED \" + out", "loggerLevel": "none", "TemplatePattern": "ACCEPTED <P>"}
{"classname": "suffix.SuffixURLFilter", "TemplateID": 2, "logline": "\"REJECTED \" + out", "loggerLevel": "none", "TemplatePattern": "REJECTED <P>"}
{"classname": "suffix.SuffixURLFilter", "TemplateID": 3, "logline": "\"Attribute \\\"file\\\" is defined for plugin \" + pluginName  + \" as \" + attributeFile", "loggerLevel": "info", "TemplatePattern": "Attribute \\<P> is defined for plugin <P> as <P>"}
{"classname": "suffix.SuffixURLFilter", "TemplateID": 4, "logline": "e.getMessage()", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "regex.RegexURLNormalizer", "TemplateID": 5, "logline": "\"Can't load the default rules! \"", "loggerLevel": "warn", "TemplatePattern": "Can't load the default rules! "}
{"classname": "regex.RegexURLNormalizer", "TemplateID": 6, "logline": "\"Couldn't read default config: \" + e", "loggerLevel": "warn", "TemplatePattern": "Couldn't read default config: <P>"}
{"classname": "regex.RegexURLNormalizer", "TemplateID": 7, "logline": "\"Set config for scope '\" + scope + \"': \" + rules.size()  + \" rules.\"", "loggerLevel": "debug", "TemplatePattern": "Set config for scope '<P>': <P> rules."}
{"classname": "regex.RegexURLNormalizer", "TemplateID": 8, "logline": "\"resource for scope '\" + scope + \"': \" + configFile", "loggerLevel": "debug", "TemplatePattern": "resource for scope '<P>': <P>"}
{"classname": "regex.RegexURLNormalizer", "TemplateID": 9, "logline": "\"Couldn't load resource '\" + configFile + \"': \" + e", "loggerLevel": "warn", "TemplatePattern": "Couldn't load resource '<P>': <P>"}
{"classname": "regex.RegexURLNormalizer", "TemplateID": 10, "logline": "\"can't find rules for scope '\" + scope + \"', using default\"", "loggerLevel": "info", "TemplatePattern": "can't find rules for scope '<P>', using default"}
{"classname": "regex.RegexURLNormalizer", "TemplateID": 11, "logline": "\"loading \" + filename", "loggerLevel": "info", "TemplatePattern": "loading <P>"}
{"classname": "regex.RegexURLNormalizer", "TemplateID": 12, "logline": "\"Error loading rules from '\" + filename + \"': \" + e", "loggerLevel": "error", "TemplatePattern": "Error loading rules from '<P>': <P>"}
{"classname": "regex.RegexURLNormalizer", "TemplateID": 13, "logline": "\"bad conf file: top-level element not <regex-normalize>\"", "loggerLevel": "error", "TemplatePattern": "bad conf file: top-level element not <regex-normalize>"}
{"classname": "regex.RegexURLNormalizer", "TemplateID": 14, "logline": "\"bad conf file: element not <regex>\"", "loggerLevel": "warn", "TemplatePattern": "bad conf file: element not <regex>"}
{"classname": "regex.RegexURLNormalizer", "TemplateID": 15, "logline": "\"skipped rule: \" + patternValue + \" -> \" + subValue  + \" : invalid regular expression pattern: \" + e", "loggerLevel": "error", "TemplatePattern": "skipped rule: <P> -> <P> : invalid regular expression pattern: <P>"}
{"classname": "regex.RegexURLNormalizer", "TemplateID": 16, "logline": "\"error parsing conf file: \" + e", "loggerLevel": "error", "TemplatePattern": "error parsing conf file: <P>"}
{"classname": "regex.RegexURLNormalizer", "TemplateID": 17, "logline": "\"* Rules for 'DEFAULT' scope:\"", "loggerLevel": "none", "TemplatePattern": "* Rules for 'DEFAULT' scope:"}
{"classname": "regex.RegexURLNormalizer", "TemplateID": 18, "logline": "\"  \" + r.pattern.pattern() + \" -> \"", "loggerLevel": "none", "TemplatePattern": "  <P> -> "}
{"classname": "regex.RegexURLNormalizer", "TemplateID": 19, "logline": "r.substitution", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "regex.RegexURLNormalizer", "TemplateID": 20, "logline": "\"* Rules for '\" + scope + \"' scope:\"", "loggerLevel": "none", "TemplatePattern": "* Rules for '<P>' scope:"}
{"classname": "regex.RegexURLNormalizer", "TemplateID": 21, "logline": "\"  \" + r.pattern.pattern() + \" -> \"", "loggerLevel": "none", "TemplatePattern": "  <P> -> "}
{"classname": "regex.RegexURLNormalizer", "TemplateID": 22, "logline": "r.substitution", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "regex.RegexURLNormalizer", "TemplateID": 23, "logline": "\"\\n---------- Normalizer test -----------\"", "loggerLevel": "none", "TemplatePattern": "\\n---------- Normalizer test -----------"}
{"classname": "regex.RegexURLNormalizer", "TemplateID": 24, "logline": "\"Scope: \" + scope", "loggerLevel": "none", "TemplatePattern": "Scope: <P>"}
{"classname": "regex.RegexURLNormalizer", "TemplateID": 25, "logline": "\"Input url:  '\" + args[0] + \"'\"", "loggerLevel": "none", "TemplatePattern": "Input url:  '<P>'"}
{"classname": "regex.RegexURLNormalizer", "TemplateID": 26, "logline": "\"Output url: '\" + normalizer.normalize(args[0], scope)  + \"'\"", "loggerLevel": "none", "TemplatePattern": "Output url: '<P>'"}
{"classname": "regex.TestRegexURLNormalizer", "TemplateID": 27, "logline": "\"Could load config from '\" + configs[i] + \"': \" + e.toString()", "loggerLevel": "warn", "TemplatePattern": "Could load config from '<P>': <P>"}
{"classname": "regex.TestRegexURLNormalizer", "TemplateID": 28, "logline": "\"scope: \" + scope + \" url: \" + url + \" | normalized: \"  + normalized + \" | expected: \" + expected", "loggerLevel": "info", "TemplatePattern": "scope: <P> url: <P> | normalized: <P> | expected: <P>"}
{"classname": "regex.TestRegexURLNormalizer", "TemplateID": 29, "logline": "\"bench time (\" + loops + \") \"  + (System.currentTimeMillis() - start) + \"ms\"", "loggerLevel": "info", "TemplatePattern": "bench time (<P>) <P>ms"}
{"classname": "regex.TestRegexURLNormalizer", "TemplateID": 30, "logline": "\"TestRegexURLNormalizer [-bench <iter>] <scope>\"", "loggerLevel": "none", "TemplatePattern": "TestRegexURLNormalizer [-bench <iter>] <scope>"}
{"classname": "regex.TestRegexURLNormalizer", "TemplateID": 31, "logline": "\"Missing required scope name.\"", "loggerLevel": "none", "TemplatePattern": "Missing required scope name."}
{"classname": "regex.TestRegexURLNormalizer", "TemplateID": 32, "logline": "\"Invalid number of iterations: \" + iter", "loggerLevel": "none", "TemplatePattern": "Invalid number of iterations: <P>"}
{"classname": "regex.TestRegexURLNormalizer", "TemplateID": 33, "logline": "\"Missing test data for scope '\" + scope  + \"', using default scope.\"", "loggerLevel": "warn", "TemplatePattern": "Missing test data for scope '<P>', using default scope."}
{"classname": "metatags.MetaTagsParser", "TemplateID": 34, "logline": "\"Found meta tag: \" + lcMetatag + \"\\t\" + value", "loggerLevel": "debug", "TemplatePattern": "Found meta tag: <P>\\t<P>"}
{"classname": "metatags.MetaTagsParser", "TemplateID": 35, "logline": "\"Found meta tag: \" + lcMetatag + \"\\t\" + value", "loggerLevel": "debug", "TemplatePattern": "Found meta tag: <P>\\t<P>"}
{"classname": "collection.CollectionManager", "TemplateID": 36, "logline": "\"initializing CollectionManager\"", "loggerLevel": "info", "TemplatePattern": "initializing CollectionManager"}
{"classname": "collection.CollectionManager", "TemplateID": 37, "logline": "\"Error occured:\" + e", "loggerLevel": "warn", "TemplatePattern": "Error occured:<P>"}
{"classname": "collection.CollectionManager", "TemplateID": 38, "logline": "\"file has \" + nodeList.getLength() + \" elements\"", "loggerLevel": "info", "TemplatePattern": "file has <P> elements"}
{"classname": "collection.CollectionManager", "TemplateID": 39, "logline": "\"Cannot find collections\"", "loggerLevel": "info", "TemplatePattern": "Cannot find collections"}
{"classname": "collection.CollectionManager", "TemplateID": 40, "logline": "\"Instantiating CollectionManager\"", "loggerLevel": "info", "TemplatePattern": "Instantiating CollectionManager"}
{"classname": "collection.CollectionManager", "TemplateID": 41, "logline": "\"subcollections:\" + Arrays.toString(collections.toArray())", "loggerLevel": "trace", "TemplatePattern": "subcollections:<P>"}
{"classname": "reltag.RelTagParser", "TemplateID": 42, "logline": "\"Adding tag: \" + tag + \" to tag set.\"", "loggerLevel": "debug", "TemplatePattern": "Adding tag: <P> to tag set."}
{"classname": "geoip.GeoIPIndexingFilter", "TemplateID": 43, "logline": "\"GeoIP usage medium set to: {}\", use", "loggerLevel": "debug", "TemplatePattern": "GeoIP usage medium set to: {}<P>"}
{"classname": "geoip.GeoIPIndexingFilter", "TemplateID": 44, "logline": "org.apache.hadoop.util.StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "geoip.GeoIPIndexingFilter", "TemplateID": 45, "logline": "org.apache.hadoop.util.StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "geoip.GeoIPIndexingFilter", "TemplateID": 46, "logline": "org.apache.hadoop.util.StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "geoip.GeoIPIndexingFilter", "TemplateID": 47, "logline": "org.apache.hadoop.util.StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "geoip.GeoIPIndexingFilter", "TemplateID": 48, "logline": "org.apache.hadoop.util.StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "geoip.GeoIPIndexingFilter", "TemplateID": 49, "logline": "e.getMessage()", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "swf.SWFParser", "TemplateID": 50, "logline": "\"Error, runtime exception: \", e", "loggerLevel": "error", "TemplatePattern": "Error, runtime exception: <P>"}
{"classname": "swf.SWFParser", "TemplateID": 51, "logline": "\"Parse Text:\"", "loggerLevel": "none", "TemplatePattern": "Parse Text:"}
{"classname": "swf.SWFParser", "TemplateID": 52, "logline": "p.getText()", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "swf.SWFParser", "TemplateID": 53, "logline": "\"Parse Data:\"", "loggerLevel": "none", "TemplatePattern": "Parse Data:"}
{"classname": "swf.SWFParser", "TemplateID": 54, "logline": "p.getData()", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "prefix.PrefixURLFilter", "TemplateID": 55, "logline": "out", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "prefix.PrefixURLFilter", "TemplateID": 56, "logline": "\"Attribute \\\"file\\\" is defined for plugin \" + pluginName  + \" as \" + attributeFile", "loggerLevel": "info", "TemplatePattern": "Attribute \\<P> is defined for plugin <P> as <P>"}
{"classname": "prefix.PrefixURLFilter", "TemplateID": 57, "logline": "e.getMessage()", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "tld.TLDIndexingFilter", "TemplateID": 58, "logline": "ex.toString()", "loggerLevel": "warn", "TemplatePattern": "<P> "}
{"classname": "selenium.HttpResponse", "TemplateID": 59, "logline": "\"fetching \" + url", "loggerLevel": "trace", "TemplatePattern": "fetching <P>"}
{"classname": "selenium.HttpResponse", "TemplateID": 60, "logline": "\"User-agent is not set!\"", "loggerLevel": "error", "TemplatePattern": "User-agent is not set!"}
{"classname": "selenium.HttpResponse", "TemplateID": 61, "logline": "\"Error: \", e", "loggerLevel": "warn", "TemplatePattern": "Error: <P>"}
{"classname": "host.HostURLNormalizer", "TemplateID": 62, "logline": "\"Attribute \\\"file\\\" is defined for plugin \" + pluginName  + \" as \" + attributeFile", "loggerLevel": "info", "TemplatePattern": "Attribute \\<P> is defined for plugin <P> as <P>"}
{"classname": "host.HostURLNormalizer", "TemplateID": 63, "logline": "\"Attribute \\\"file\\\" is not defined in plugin.xml for plugin \"  + pluginName", "loggerLevel": "warn", "TemplatePattern": "Attribute \\<P> is not defined in plugin.xml for plugin <P>"}
{"classname": "host.HostURLNormalizer", "TemplateID": 64, "logline": "org.apache.hadoop.util.StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "dummy.DummyIndexWriter", "TemplateID": 65, "logline": "message", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "anchor.AnchorIndexingFilter", "TemplateID": 66, "logline": "\"Anchor deduplication is: \" + (deduplicate ? \"on\" : \"off\")", "loggerLevel": "info", "TemplatePattern": "Anchor deduplication is: <P> <P>on<P>"}
{"classname": "anchor.AnchorIndexingFilter", "TemplateID": 67, "logline": "\"Anchor deduplication is: \" + (deduplicate ? \"on\" : \"off\")", "loggerLevel": "info", "TemplatePattern": "Anchor deduplication is: <P> <P>off<P>"}
{"classname": "ext.ExtParser", "TemplateID": 68, "logline": "\"Use \" + command + \" with timeout=\" + timeout + \"secs\"", "loggerLevel": "trace", "TemplatePattern": "Use <P> with timeout=<P>secs"}
{"classname": "ext.TestExtParser", "TemplateID": 69, "logline": "\"No test is run on OS other than linux.\"", "loggerLevel": "none", "TemplatePattern": "No test is run on OS other than linux."}
{"classname": "opic.OPICScoringFilter", "TemplateID": 70, "logline": "\"Error: \", e", "loggerLevel": "error", "TemplatePattern": "Error: <P>"}
{"classname": "opic.OPICScoringFilter", "TemplateID": 71, "logline": "\"Error: \", e", "loggerLevel": "error", "TemplatePattern": "Error: <P>"}
{"classname": "api.RegexURLFilterBase", "TemplateID": 72, "logline": "e.getMessage()", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "api.RegexURLFilterBase", "TemplateID": 73, "logline": "e.getMessage()", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "api.RegexURLFilterBase", "TemplateID": 74, "logline": "\"Adding rule [\" + regex + \"]\"", "loggerLevel": "trace", "TemplatePattern": "Adding rule [<P>]"}
{"classname": "api.RegexURLFilterBase", "TemplateID": 75, "logline": "\"+\"", "loggerLevel": "none", "TemplatePattern": "+"}
{"classname": "api.RegexURLFilterBase", "TemplateID": 76, "logline": "out", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "api.RegexURLFilterBase", "TemplateID": 77, "logline": "\"-\"", "loggerLevel": "none", "TemplatePattern": "-"}
{"classname": "api.RegexURLFilterBase", "TemplateID": 78, "logline": "line", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "api.RegexURLFilterBaseTest", "TemplateID": 79, "logline": "\"bench time (\" + loops + \") \"  + (System.currentTimeMillis() - start) + \"ms\"", "loggerLevel": "info", "TemplatePattern": "bench time (<P>) <P>ms"}
{"classname": "zip.ZipTextExtractor", "TemplateID": 80, "logline": "\"fetch okay, but can't parse \" + fname + \", reason: \"  + e.getMessage()", "loggerLevel": "info", "TemplatePattern": "fetch okay, but can't parse <P>, reason: <P>"}
{"classname": "zip.ZipParser", "TemplateID": 81, "logline": "\"ziplen: \" + len", "loggerLevel": "debug", "TemplatePattern": "ziplen: <P>"}
{"classname": "zip.ZipParser", "TemplateID": 82, "logline": "\"Zip file parsed sucessfully !!\"", "loggerLevel": "trace", "TemplatePattern": "Zip file parsed sucessfully !!"}
{"classname": "feed.FeedParser", "TemplateID": 83, "logline": "\"Parse failed: url: \" + content.getUrl() + \", exception: \"  + StringUtils.stringifyException(e)", "loggerLevel": "warn", "TemplatePattern": "Parse failed: url: <P>, exception: <P>"}
{"classname": "feed.FeedParser", "TemplateID": 84, "logline": "\"Usage: FeedParser <feed>\"", "loggerLevel": "none", "TemplatePattern": "Usage: FeedParser <feed>"}
{"classname": "feed.FeedParser", "TemplateID": 85, "logline": "\"key: \" + entry.getKey()", "loggerLevel": "none", "TemplatePattern": "key: <P>"}
{"classname": "feed.FeedParser", "TemplateID": 86, "logline": "\"data: \" + parse.getData()", "loggerLevel": "none", "TemplatePattern": "data: <P>"}
{"classname": "feed.FeedParser", "TemplateID": 87, "logline": "\"text: \" + parse.getText() + \"\\n\"", "loggerLevel": "none", "TemplatePattern": "text: <P>\\n"}
{"classname": "slash.SlashURLNormalizer", "TemplateID": 88, "logline": "\"Attribute \\\"file\\\" is defined for plugin \" + pluginName  + \" as \" + attributeFile", "loggerLevel": "info", "TemplatePattern": "Attribute \\<P> is defined for plugin <P> as <P>"}
{"classname": "slash.SlashURLNormalizer", "TemplateID": 89, "logline": "\"Attribute \\\"file\\\" is not defined in plugin.xml for plugin \"  + pluginName", "loggerLevel": "warn", "TemplatePattern": "Attribute \\<P> is not defined in plugin.xml for plugin <P>"}
{"classname": "slash.SlashURLNormalizer", "TemplateID": 90, "logline": "org.apache.hadoop.util.StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "basic.BasicURLNormalizer", "TemplateID": 91, "logline": "\"Scope: \" + scope", "loggerLevel": "none", "TemplatePattern": "Scope: <P>"}
{"classname": "basic.BasicURLNormalizer", "TemplateID": 92, "logline": "normUrl", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "basic.BasicURLNormalizer", "TemplateID": 93, "logline": "\"failed: \" + line", "loggerLevel": "none", "TemplatePattern": "failed: <P>"}
{"classname": "api.HttpBase", "TemplateID": 94, "logline": "\"Empty list of user agents in http.agent.rotate.file {}\",  agentsFile", "loggerLevel": "warn", "TemplatePattern": "Empty list of user agents in http.agent.rotate.file {}<P>"}
{"classname": "api.HttpBase", "TemplateID": 95, "logline": "\"Failed to read http.agent.rotate.file {}: {}\", agentsFile,  StringUtils.stringifyException(e)", "loggerLevel": "warn", "TemplatePattern": "Failed to read http.agent.rotate.file {}: {}<P>"}
{"classname": "api.HttpBase", "TemplateID": 96, "logline": "\"400 Bad request: \" + u", "loggerLevel": "trace", "TemplatePattern": "400 Bad request: <P>"}
{"classname": "api.HttpBase", "TemplateID": 97, "logline": "\"401 Authentication Required\"", "loggerLevel": "trace", "TemplatePattern": "401 Authentication Required"}
{"classname": "api.HttpBase", "TemplateID": 98, "logline": "\"Failed to get protocol output\", e", "loggerLevel": "error", "TemplatePattern": "Failed to get protocol output<P>"}
{"classname": "api.HttpBase", "TemplateID": 99, "logline": "\"No User-Agent string set (http.agent.name)!\"", "loggerLevel": "error", "TemplatePattern": "No User-Agent string set (http.agent.name)!"}
{"classname": "api.HttpBase", "TemplateID": 100, "logline": "\"http.proxy.host = \" + proxyHost", "loggerLevel": "info", "TemplatePattern": "http.proxy.host = <P>"}
{"classname": "api.HttpBase", "TemplateID": 101, "logline": "\"http.proxy.port = \" + proxyPort", "loggerLevel": "info", "TemplatePattern": "http.proxy.port = <P>"}
{"classname": "api.HttpBase", "TemplateID": 102, "logline": "\"http.timeout = \" + timeout", "loggerLevel": "info", "TemplatePattern": "http.timeout = <P>"}
{"classname": "api.HttpBase", "TemplateID": 103, "logline": "\"http.content.limit = \" + maxContent", "loggerLevel": "info", "TemplatePattern": "http.content.limit = <P>"}
{"classname": "api.HttpBase", "TemplateID": 104, "logline": "\"http.agent = \" + userAgent", "loggerLevel": "info", "TemplatePattern": "http.agent = <P>"}
{"classname": "api.HttpBase", "TemplateID": 105, "logline": "\"http.accept.language = \" + acceptLanguage", "loggerLevel": "info", "TemplatePattern": "http.accept.language = <P>"}
{"classname": "api.HttpBase", "TemplateID": 106, "logline": "\"http.accept = \" + accept", "loggerLevel": "info", "TemplatePattern": "http.accept = <P>"}
{"classname": "api.HttpBase", "TemplateID": 107, "logline": "\"uncompressing....\"", "loggerLevel": "trace", "TemplatePattern": "uncompressing...."}
{"classname": "api.HttpBase", "TemplateID": 108, "logline": "\"fetched \" + compressed.length  /root/nutch-git-source/nutch/src/plugin/lib-http/src/java/org/apache/nutch/protocol/http/api/HttpBase.java-          + \" bytes of compressed content (expanded to \" + content.length  + \" bytes) from \" + url", "loggerLevel": "trace", "TemplatePattern": "fetched <P> bytes of compressed content (expanded to <P> bytes) from <P>"}
{"classname": "api.HttpBase", "TemplateID": 109, "logline": "\"inflating....\"", "loggerLevel": "trace", "TemplatePattern": "inflating...."}
{"classname": "api.HttpBase", "TemplateID": 110, "logline": "\"fetched \" + compressed.length  /root/nutch-git-source/nutch/src/plugin/lib-http/src/java/org/apache/nutch/protocol/http/api/HttpBase.java-          + \" bytes of compressed content (expanded to \" + content.length  + \" bytes) from \" + url", "loggerLevel": "trace", "TemplatePattern": "fetched <P> bytes of compressed content (expanded to <P> bytes) from <P>"}
{"classname": "api.HttpBase", "TemplateID": 111, "logline": "usage", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "api.HttpBase", "TemplateID": 112, "logline": "usage", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "api.HttpBase", "TemplateID": 113, "logline": "\"Status: \" + out.getStatus()", "loggerLevel": "none", "TemplatePattern": "Status: <P>"}
{"classname": "api.HttpBase", "TemplateID": 114, "logline": "\"Content Type: \" + content.getContentType()", "loggerLevel": "none", "TemplatePattern": "Content Type: <P>"}
{"classname": "api.HttpBase", "TemplateID": 115, "logline": "\"Content Length: \"  + content.getMetadata().get(Response.CONTENT_LENGTH)", "loggerLevel": "none", "TemplatePattern": "Content Length: <P>"}
{"classname": "api.HttpBase", "TemplateID": 116, "logline": "\"Content:\"", "loggerLevel": "none", "TemplatePattern": "Content:"}
{"classname": "api.HttpBase", "TemplateID": 117, "logline": "text", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "api.HttpRobotRulesParser", "TemplateID": 118, "logline": "\"cache miss \" + url", "loggerLevel": "trace", "TemplatePattern": "cache miss <P>"}
{"classname": "api.HttpRobotRulesParser", "TemplateID": 119, "logline": "\"Couldn't get robots.txt for \" + url + \": \" + t.toString()", "loggerLevel": "info", "TemplatePattern": "Couldn't get robots.txt for <P>: <P>"}
{"classname": "domain.DomainURLFilter", "TemplateID": 120, "logline": "\"Attribute \\\"file\\\" is defined for plugin \" + pluginName  + \" as \" + attributeFile", "loggerLevel": "info", "TemplatePattern": "Attribute \\<P> is defined for plugin <P> as <P>"}
{"classname": "domain.DomainURLFilter", "TemplateID": 121, "logline": "\"Attribute \\\"file\\\" is not defined in plugin.xml for plugin \"  + pluginName", "loggerLevel": "warn", "TemplatePattern": "Attribute \\<P> is not defined in plugin.xml for plugin <P>"}
{"classname": "domain.DomainURLFilter", "TemplateID": 122, "logline": "org.apache.hadoop.util.StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "domain.DomainURLFilter", "TemplateID": 123, "logline": "\"Could not apply filter on url: \" + url + \"\\n\"  + org.apache.hadoop.util.StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "Could not apply filter on url: <P>\\n<P>"}
{"classname": "js.JSParseFilter", "TemplateID": 124, "logline": "\"getJSLinks\", e", "loggerLevel": "error", "TemplatePattern": "getJSLinks<P>"}
{"classname": "js.JSParseFilter", "TemplateID": 125, "logline": "\" - failed URL parse '\" + url + \"' and baseURL '\"  + baseURL + \"'\", ex", "loggerLevel": "trace", "TemplatePattern": " - failed URL parse '<P>' and baseURL '<P>'<P>"}
{"classname": "js.JSParseFilter", "TemplateID": 126, "logline": "\" - outlink from JS: '\" + url + \"'\"", "loggerLevel": "trace", "TemplatePattern": " - outlink from JS: '<P>'"}
{"classname": "js.JSParseFilter", "TemplateID": 127, "logline": "\"getJSLinks\", ex", "loggerLevel": "error", "TemplatePattern": "getJSLinks<P>"}
{"classname": "js.JSParseFilter", "TemplateID": 128, "logline": "JSParseFilter.class.getName() + \" file.js baseURL\"", "loggerLevel": "none", "TemplatePattern": "<P>  file.js baseURL"}
{"classname": "js.JSParseFilter", "TemplateID": 129, "logline": "\"Outlinks extracted: \" + links.length", "loggerLevel": "none", "TemplatePattern": "Outlinks extracted: <P>"}
{"classname": "js.JSParseFilter", "TemplateID": 130, "logline": "\" - \" + links[i]", "loggerLevel": "none", "TemplatePattern": " - <P>"}
{"classname": "html.HtmlParser", "TemplateID": 131, "logline": "\"Parsing...\"", "loggerLevel": "trace", "TemplatePattern": "Parsing..."}
{"classname": "html.HtmlParser", "TemplateID": 132, "logline": "\"Error: \", e", "loggerLevel": "error", "TemplatePattern": "Error: <P>"}
{"classname": "html.HtmlParser", "TemplateID": 133, "logline": "\"Meta tags for \" + base + \": \" + metaTags.toString()", "loggerLevel": "trace", "TemplatePattern": "Meta tags for <P>: <P>"}
{"classname": "html.HtmlParser", "TemplateID": 134, "logline": "\"Getting text...\"", "loggerLevel": "trace", "TemplatePattern": "Getting text..."}
{"classname": "html.HtmlParser", "TemplateID": 135, "logline": "\"Getting title...\"", "loggerLevel": "trace", "TemplatePattern": "Getting title..."}
{"classname": "html.HtmlParser", "TemplateID": 136, "logline": "\"Getting links...\"", "loggerLevel": "trace", "TemplatePattern": "Getting links..."}
{"classname": "html.HtmlParser", "TemplateID": 137, "logline": "\"found \" + outlinks.length + \" outlinks in \"  + content.getUrl()", "loggerLevel": "trace", "TemplatePattern": "found <P> outlinks in <P>"}
{"classname": "html.HtmlParser", "TemplateID": 138, "logline": "\" - new frag, \" + frag.getChildNodes().getLength()  + \" nodes.\"", "loggerLevel": "info", "TemplatePattern": " - new frag, <P> nodes."}
{"classname": "html.HtmlParser", "TemplateID": 139, "logline": "\"Error: \", e", "loggerLevel": "error", "TemplatePattern": "Error: <P>"}
{"classname": "html.HtmlParser", "TemplateID": 140, "logline": "\"data: \" + parse.getData()", "loggerLevel": "none", "TemplatePattern": "data: <P>"}
{"classname": "html.HtmlParser", "TemplateID": 141, "logline": "\"text: \" + parse.getText()", "loggerLevel": "none", "TemplatePattern": "text: <P>"}
{"classname": "html.TestHtmlParser", "TemplateID": 142, "logline": "name", "loggerLevel": "info", "TemplatePattern": "<P> "}
{"classname": "html.TestHtmlParser", "TemplateID": 143, "logline": "\"title:\\t\" + title", "loggerLevel": "info", "TemplatePattern": "title:\\t<P>"}
{"classname": "html.TestHtmlParser", "TemplateID": 144, "logline": "\"keywords:\\t\" + keywords", "loggerLevel": "info", "TemplatePattern": "keywords:\\t<P>"}
{"classname": "html.TestHtmlParser", "TemplateID": 145, "logline": "\"text:\\t\" + text", "loggerLevel": "info", "TemplatePattern": "text:\\t<P>"}
{"classname": "file.FileResponse", "TemplateID": 146, "logline": "\"fetching \" + url", "loggerLevel": "trace", "TemplatePattern": "fetching <P>"}
{"classname": "file.FileResponse", "TemplateID": 147, "logline": "\"url.getPath() != url.getFile(): \" + url", "loggerLevel": "warn", "TemplatePattern": "url.getPath() != url.getFile(): <P>"}
{"classname": "file.FileResponse", "TemplateID": 148, "logline": "\"not enough bytes read from file: \" + f.getPath()", "loggerLevel": "warn", "TemplatePattern": "not enough bytes read from file: <P>"}
{"classname": "file.File", "TemplateID": 149, "logline": "\"redirect to \" + u", "loggerLevel": "trace", "TemplatePattern": "redirect to <P>"}
{"classname": "file.File", "TemplateID": 150, "logline": "\"Too many redirects: {}\", url", "loggerLevel": "trace", "TemplatePattern": "Too many redirects: {}<P>"}
{"classname": "file.File", "TemplateID": 151, "logline": "usage", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "file.File", "TemplateID": 152, "logline": "usage", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "file.File", "TemplateID": 153, "logline": "\"URL: \" + content.getUrl()", "loggerLevel": "none", "TemplatePattern": "URL: <P>"}
{"classname": "file.File", "TemplateID": 154, "logline": "\"Status: \" + output.getStatus()", "loggerLevel": "none", "TemplatePattern": "Status: <P>"}
{"classname": "file.File", "TemplateID": 155, "logline": "\"Content-Type: \" + content.getContentType()", "loggerLevel": "none", "TemplatePattern": "Content-Type: <P>"}
{"classname": "file.File", "TemplateID": 156, "logline": "\"Content-Length: \"  + content.getMetadata().get(Response.CONTENT_LENGTH)", "loggerLevel": "none", "TemplatePattern": "Content-Length: <P>"}
{"classname": "file.File", "TemplateID": 157, "logline": "\"Last-Modified: \"  + content.getMetadata().get(Response.LAST_MODIFIED)", "loggerLevel": "none", "TemplatePattern": "Last-Modified: <P>"}
{"classname": "file.File", "TemplateID": 158, "logline": "\"Location: \" + redirectLocation", "loggerLevel": "none", "TemplatePattern": "Location: <P>"}
{"classname": "file.File", "TemplateID": 159, "logline": "new String(content.getContent())", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "http.HttpResponse", "TemplateID": 160, "logline": "\"fetching \" + url", "loggerLevel": "trace", "TemplatePattern": "fetching <P>"}
{"classname": "http.HttpResponse", "TemplateID": 161, "logline": "\"User-agent is not set!\"", "loggerLevel": "error", "TemplatePattern": "User-agent is not set!"}
{"classname": "http.HttpResponse", "TemplateID": 162, "logline": "\"fetched \" + content.length + \" bytes from \" + url", "loggerLevel": "trace", "TemplatePattern": "fetched <P> bytes from <P>"}
{"classname": "http.HttpResponse", "TemplateID": 163, "logline": "\"Http: starting chunk\"", "loggerLevel": "trace", "TemplatePattern": "Http: starting chunk"}
{"classname": "http.HttpResponse", "TemplateID": 164, "logline": "\"Error: \", e", "loggerLevel": "warn", "TemplatePattern": "Error: <P>"}
{"classname": "elastic.ElasticIndexWriter", "TemplateID": 165, "logline": "\"Processing bulk request [docs = \" + bulkDocs + \", length = \"  /root/nutch-git-source/nutch/src/plugin/indexer-elastic/src/java/org/apache/nutch/indexwriter/elastic/ElasticIndexWriter.java-          + bulkLength + \", total docs = \" + indexedDocs  + \", last doc in bulk = '\" + id + \"']\"", "loggerLevel": "info", "TemplatePattern": "Processing bulk request [docs = <P>, length = <P>, total docs = <P>, last doc in bulk = '<P>']"}
{"classname": "elastic.ElasticIndexWriter", "TemplateID": 166, "logline": "\"Previous took in ms \" + actionGet.getTookInMillis()  + \", including wait \" + msWaited", "loggerLevel": "info", "TemplatePattern": "Previous took in ms <P>, including wait <P>"}
{"classname": "elastic.ElasticIndexWriter", "TemplateID": 167, "logline": "\"Processing remaining requests [docs = \" + bulkDocs  + \", length = \" + bulkLength + \", total docs = \" + indexedDocs + \"]\"", "loggerLevel": "info", "TemplatePattern": "Processing remaining requests [docs = <P>, length = <P>, total docs = <P>]"}
{"classname": "elastic.ElasticIndexWriter", "TemplateID": 168, "logline": "\"Processing to finalize last execute\"", "loggerLevel": "info", "TemplatePattern": "Processing to finalize last execute"}
{"classname": "elastic.ElasticIndexWriter", "TemplateID": 169, "logline": "message", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "validator.UrlValidator", "TemplateID": 170, "logline": "\"url is valid\"", "loggerLevel": "none", "TemplatePattern": "url is valid"}
{"classname": "validator.UrlValidator", "TemplateID": 171, "logline": "\"url is invalid\"", "loggerLevel": "none", "TemplatePattern": "url is invalid"}
{"classname": "lang.HTMLLanguageParser", "TemplateID": 172, "logline": "e.toString()", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "lang.HTMLLanguageParser", "TemplateID": 173, "logline": "\"No configuration for language extraction policy is provided\"", "loggerLevel": "warn", "TemplatePattern": "No configuration for language extraction policy is provided"}
{"classname": "lang.TestHTMLLanguageParser", "TemplateID": 174, "logline": "content.toString()", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "lang.TestHTMLLanguageParser", "TemplateID": 175, "logline": "lang", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "lang.TestHTMLLanguageParser", "TemplateID": 176, "logline": "\"Total Time=\" + total", "loggerLevel": "none", "TemplatePattern": "Total Time=<P>"}
{"classname": "more.MoreIndexingFilter", "TemplateID": 177, "logline": "url + \": can't parse erroneous date: \" + date", "loggerLevel": "warn", "TemplatePattern": "<P> : can't parse erroneous date: <P>"}
{"classname": "more.MoreIndexingFilter", "TemplateID": 178, "logline": "org.apache.hadoop.util.StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "domainblacklist.DomainBlacklistURLFilter", "TemplateID": 179, "logline": "\"Attribute \\\"file\\\" is defined for plugin \" + pluginName  + \" as \" + attributeFile", "loggerLevel": "info", "TemplatePattern": "Attribute \\<P> is defined for plugin <P> as <P>"}
{"classname": "domainblacklist.DomainBlacklistURLFilter", "TemplateID": 180, "logline": "\"Attribute \\\"file\\\" is not defined in plugin.xml for plugin \"  + pluginName", "loggerLevel": "warn", "TemplatePattern": "Attribute \\<P> is not defined in plugin.xml for plugin <P>"}
{"classname": "domainblacklist.DomainBlacklistURLFilter", "TemplateID": 181, "logline": "org.apache.hadoop.util.StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "domainblacklist.DomainBlacklistURLFilter", "TemplateID": 182, "logline": "\"Could not apply filter on url: \" + url + \"\\n\"  + org.apache.hadoop.util.StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "Could not apply filter on url: <P>\\n<P>"}
{"classname": "httpclient.HttpFormAuthentication", "TemplateID": 183, "logline": "\"rspCode: \" + rspCode", "loggerLevel": "debug", "TemplatePattern": "rspCode: <P>"}
{"classname": "httpclient.HttpFormAuthentication", "TemplateID": 184, "logline": "\"\\nSending 'POST' request to URL : \" + url", "loggerLevel": "debug", "TemplatePattern": "\\nSending 'POST' request to URL : <P>"}
{"classname": "httpclient.HttpFormAuthentication", "TemplateID": 185, "logline": "\"Post parameters : \" + params", "loggerLevel": "debug", "TemplatePattern": "Post parameters : <P>"}
{"classname": "httpclient.HttpFormAuthentication", "TemplateID": 186, "logline": "\"Response Code : \" + rspCode", "loggerLevel": "debug", "TemplatePattern": "Response Code : <P>"}
{"classname": "httpclient.HttpFormAuthentication", "TemplateID": 187, "logline": "\"Response headers : \" + header", "loggerLevel": "debug", "TemplatePattern": "Response headers : <P>"}
{"classname": "httpclient.HttpFormAuthentication", "TemplateID": 188, "logline": "\"login post result: \" + rst", "loggerLevel": "debug", "TemplatePattern": "login post result: <P>"}
{"classname": "httpclient.HttpFormAuthentication", "TemplateID": 189, "logline": "\"No form element found with 'id' = {}, trying 'name'.\",  authConfigurer.getLoginFormId()", "loggerLevel": "debug", "TemplatePattern": "No form element found with 'id' = {}, trying 'name'.<P>"}
{"classname": "httpclient.HttpFormAuthentication", "TemplateID": 190, "logline": "\"No form element found with 'name' = {}\",  authConfigurer.getLoginFormId()", "loggerLevel": "debug", "TemplatePattern": "No form element found with 'name' = {}<P>"}
{"classname": "httpclient.DummySSLProtocolSocketFactory", "TemplateID": 191, "logline": "e.getMessage(), e", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "httpclient.Http", "TemplateID": 192, "logline": "\"Could not read \" + authFile + \" : \" + ex.getMessage()", "loggerLevel": "error", "TemplatePattern": "Could not read <P> : <P>"}
{"classname": "httpclient.Http", "TemplateID": 193, "logline": "\"Bad auth conf file: root element <\"  /root/nutch-git-source/nutch/src/plugin/protocol-httpclient/src/java/org/apache/nutch/protocol/httpclient/Http.java-              + rootElement.getTagName() + \"> found in \" + authFile  + \" - must be <auth-configuration>\"", "loggerLevel": "warn", "TemplatePattern": "Bad auth conf file: root element <<P>> found in <P> - must be <auth-configuration>"}
{"classname": "httpclient.Http", "TemplateID": 194, "logline": "\"Bad auth conf file: Element <\" + credElement.getTagName()  /root/nutch-git-source/nutch/src/plugin/protocol-httpclient/src/java/org/apache/nutch/protocol/httpclient/Http.java-                + \"> not recognized in \" + authFile  + \" - expected <credentials>\"", "loggerLevel": "warn", "TemplatePattern": "Bad auth conf file: Element <<P>> not recognized in <P> - expected <credentials>"}
{"classname": "httpclient.Http", "TemplateID": 195, "logline": "\"Credentials - username: \" + username  + \"; set as default\" + \" for realm: \" + realm + \"; scheme: \"", "loggerLevel": "trace", "TemplatePattern": "Credentials - username: <P>; set as default<P> for realm: <P>; scheme: "}
{"classname": "httpclient.Http", "TemplateID": 196, "logline": "\"Credentials - username: \" + username  + \"; set for AuthScope - \" + \"host: \" + host + \"; port: \"", "loggerLevel": "trace", "TemplatePattern": "Credentials - username: <P>; set for AuthScope - <P>host: <P>; port: "}
{"classname": "httpclient.Http", "TemplateID": 197, "logline": "\"Bad auth conf file: Element <\"  /root/nutch-git-source/nutch/src/plugin/protocol-httpclient/src/java/org/apache/nutch/protocol/httpclient/Http.java-                  + scopeElement.getTagName() + \"> not recognized in \"  + authFile + \" - expected <authscope>\"", "loggerLevel": "warn", "TemplatePattern": "Bad auth conf file: Element <<P>> not recognized in <P> - expected <authscope>"}
{"classname": "httpclient.Http", "TemplateID": 198, "logline": "\"Pre-configured credentials with scope - host: \"  + url.getHost() + \"; port: \" + port + \"; found for url: \" + url", "loggerLevel": "trace", "TemplatePattern": "Pre-configured credentials with scope - host: <P>; port: <P>; found for url: <P>"}
{"classname": "httpclient.Http", "TemplateID": 199, "logline": "\"Pre-configured credentials with scope -  host: \"  + url.getHost() + \"; port: \" + port + \"; not found for url: \" + url", "loggerLevel": "trace", "TemplatePattern": "Pre-configured credentials with scope -  host: <P>; port: <P>; not found for url: <P>"}
{"classname": "httpclient.HttpAuthenticationFactory", "TemplateID": 200, "logline": "\"Checking challengeString=\" + challengeString", "loggerLevel": "trace", "TemplatePattern": "Checking challengeString=<P>"}
{"classname": "httpclient.HttpAuthenticationFactory", "TemplateID": 201, "logline": "\"Error: \", e", "loggerLevel": "error", "TemplatePattern": "Error: <P>"}
{"classname": "httpclient.HttpBasicAuthentication", "TemplateID": 202, "logline": "\"BasicAuthentication challenge is \" + challenge", "loggerLevel": "trace", "TemplatePattern": "BasicAuthentication challenge is <P>"}
{"classname": "httpclient.HttpBasicAuthentication", "TemplateID": 203, "logline": "\"BasicAuthentication username=\" + username", "loggerLevel": "trace", "TemplatePattern": "BasicAuthentication username=<P>"}
{"classname": "httpclient.HttpBasicAuthentication", "TemplateID": 204, "logline": "\"BasicAuthentication password=\" + password", "loggerLevel": "trace", "TemplatePattern": "BasicAuthentication password=<P>"}
{"classname": "httpclient.HttpBasicAuthentication", "TemplateID": 205, "logline": "\"Basic credentials: \" + credentials", "loggerLevel": "trace", "TemplatePattern": "Basic credentials: <P>"}
{"classname": "httpclient.HttpBasicAuthentication", "TemplateID": 206, "logline": "\"HttpBasicAuthentication failed for \" + challenge", "loggerLevel": "trace", "TemplatePattern": "HttpBasicAuthentication failed for <P>"}
{"classname": "httpclient.HttpResponse", "TemplateID": 207, "logline": "fetchTrace.toString()", "loggerLevel": "trace", "TemplatePattern": "<P> "}
{"classname": "filter.MimeTypeIndexingFilter", "TemplateID": 208, "logline": "String.format(\"[%s] %s\", contentType, url)", "loggerLevel": "info", "TemplatePattern": "<P> [%s] %s<P>"}
{"classname": "filter.MimeTypeIndexingFilter", "TemplateID": 209, "logline": "String  /root/nutch-git-source/nutch/src/plugin/mimetype-filter/src/java/org/apache/nutch/indexer/filter/MimeTypeIndexingFilter.java-            .format(\"Missing %s property, ALL mimetypes will be allowed\",  MIMEFILTER_REGEX_FILE)", "loggerLevel": "warn", "TemplatePattern": "<P> Missing %s property, ALL mimetypes will be allowed<P>"}
{"classname": "filter.MimeTypeIndexingFilter", "TemplateID": 210, "logline": "e.getMessage()", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "filter.MimeTypeIndexingFilter", "TemplateID": 211, "logline": "StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "filter.MimeTypeIndexingFilter", "TemplateID": 212, "logline": "\"+ \"", "loggerLevel": "none", "TemplatePattern": "+ "}
{"classname": "filter.MimeTypeIndexingFilter", "TemplateID": 213, "logline": "line", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "filter.MimeTypeIndexingFilter", "TemplateID": 214, "logline": "\"- \"", "loggerLevel": "none", "TemplatePattern": "- "}
{"classname": "filter.MimeTypeIndexingFilter", "TemplateID": 215, "logline": "line", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "ftp.FtpRobotRulesParser", "TemplateID": 216, "logline": "\"cache miss \" + url", "loggerLevel": "trace", "TemplatePattern": "cache miss <P>"}
{"classname": "ftp.FtpRobotRulesParser", "TemplateID": 217, "logline": "\"Couldn't get robots.txt for \" + url + \": \" + t.toString()", "loggerLevel": "info", "TemplatePattern": "Couldn't get robots.txt for <P>: <P>"}
{"classname": "ftp.Ftp", "TemplateID": 218, "logline": "\"redirect to \" + u", "loggerLevel": "trace", "TemplatePattern": "redirect to <P>"}
{"classname": "ftp.Ftp", "TemplateID": 219, "logline": "usage", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "ftp.Ftp", "TemplateID": 220, "logline": "usage", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "ftp.Ftp", "TemplateID": 221, "logline": "\"Content-Type: \" + content.getContentType()", "loggerLevel": "none", "TemplatePattern": "Content-Type: <P>"}
{"classname": "ftp.Ftp", "TemplateID": 222, "logline": "\"Content-Length: \"  + content.getMetadata().get(Response.CONTENT_LENGTH)", "loggerLevel": "none", "TemplatePattern": "Content-Length: <P>"}
{"classname": "ftp.Ftp", "TemplateID": 223, "logline": "\"Last-Modified: \"  + content.getMetadata().get(Response.LAST_MODIFIED)", "loggerLevel": "none", "TemplatePattern": "Last-Modified: <P>"}
{"classname": "ftp.Ftp", "TemplateID": 224, "logline": "new String(content.getContent())", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "ftp.PrintCommandListener", "TemplateID": 225, "logline": "\"PrintCommandListener.protocolCommandSent(): \" + e", "loggerLevel": "info", "TemplatePattern": "PrintCommandListener.protocolCommandSent(): <P>"}
{"classname": "ftp.PrintCommandListener", "TemplateID": 226, "logline": "\"PrintCommandListener.protocolReplyReceived(): \" + e", "loggerLevel": "info", "TemplatePattern": "PrintCommandListener.protocolReplyReceived(): <P>"}
{"classname": "ftp.PrintCommandListener", "TemplateID": 227, "logline": "\"ftp> \" + line", "loggerLevel": "info", "TemplatePattern": "ftp> <P>"}
{"classname": "ftp.FtpResponse", "TemplateID": 228, "logline": "\"url.getPath() != url.getFile(): \" + url", "loggerLevel": "warn", "TemplatePattern": "url.getPath() != url.getFile(): <P>"}
{"classname": "ftp.FtpResponse", "TemplateID": 229, "logline": "\"fetching \" + url", "loggerLevel": "info", "TemplatePattern": "fetching <P>"}
{"classname": "ftp.FtpResponse", "TemplateID": 230, "logline": "\"fetching \" + url", "loggerLevel": "trace", "TemplatePattern": "fetching <P>"}
{"classname": "ftp.FtpResponse", "TemplateID": 231, "logline": "\"delete client because idled too long\"", "loggerLevel": "info", "TemplatePattern": "delete client because idled too long"}
{"classname": "ftp.FtpResponse", "TemplateID": 232, "logline": "\"start client\"", "loggerLevel": "info", "TemplatePattern": "start client"}
{"classname": "ftp.FtpResponse", "TemplateID": 233, "logline": "\"disconnect from \" + remoteAddress  + \" before connect to \" + addr", "loggerLevel": "info", "TemplatePattern": "disconnect from <P> before connect to <P>"}
{"classname": "ftp.FtpResponse", "TemplateID": 234, "logline": "\"connect to \" + addr", "loggerLevel": "info", "TemplatePattern": "connect to <P>"}
{"classname": "ftp.FtpResponse", "TemplateID": 235, "logline": "\"ftp.client.connect() failed: \" + addr + \" \"  + ftp.client.getReplyString()", "loggerLevel": "warn", "TemplatePattern": "ftp.client.connect() failed: <P> <P>"}
{"classname": "ftp.FtpResponse", "TemplateID": 236, "logline": "\"log into \" + addr", "loggerLevel": "info", "TemplatePattern": "log into <P>"}
{"classname": "ftp.FtpResponse", "TemplateID": 237, "logline": "\"ftp.client.login() failed: \" + addr", "loggerLevel": "warn", "TemplatePattern": "ftp.client.login() failed: <P>"}
{"classname": "ftp.FtpResponse", "TemplateID": 238, "logline": "\"ftp.client.setFileType() failed: \" + addr", "loggerLevel": "warn", "TemplatePattern": "ftp.client.setFileType() failed: <P>"}
{"classname": "ftp.FtpResponse", "TemplateID": 239, "logline": "\"set parser for \" + addr", "loggerLevel": "info", "TemplatePattern": "set parser for <P>"}
{"classname": "ftp.FtpResponse", "TemplateID": 240, "logline": "\"createFileEntryParser() failed. \" + addr + \" \" + e", "loggerLevel": "warn", "TemplatePattern": "createFileEntryParser() failed. <P> <P>"}
{"classname": "ftp.FtpResponse", "TemplateID": 241, "logline": "\"ftp.parser is null: \" + addr", "loggerLevel": "warn", "TemplatePattern": "ftp.parser is null: <P>"}
{"classname": "ftp.FtpResponse", "TemplateID": 242, "logline": "\"use existing connection\"", "loggerLevel": "info", "TemplatePattern": "use existing connection"}
{"classname": "ftp.FtpResponse", "TemplateID": 243, "logline": "\"reset renewalTime to \"  + HttpDateFormat.toString(ftp.renewalTime)", "loggerLevel": "info", "TemplatePattern": "reset renewalTime to <P>"}
{"classname": "ftp.FtpResponse", "TemplateID": 244, "logline": "\"disconnect from \" + addr", "loggerLevel": "info", "TemplatePattern": "disconnect from <P>"}
{"classname": "ftp.FtpResponse", "TemplateID": 245, "logline": "\"Error: \", e", "loggerLevel": "warn", "TemplatePattern": "Error: <P>"}
{"classname": "ftp.FtpResponse", "TemplateID": 246, "logline": "\"delete client due to exception\"", "loggerLevel": "info", "TemplatePattern": "delete client due to exception"}
{"classname": "ftp.FtpResponse", "TemplateID": 247, "logline": "\"delete client because server cut off control channel: \"  + e", "loggerLevel": "info", "TemplatePattern": "delete client because server cut off control channel: <P>"}
{"classname": "ftp.FtpResponse", "TemplateID": 248, "logline": "\"Unrecognized reply after forced close of data channel. \"  /root/nutch-git-source/nutch/src/plugin/protocol-ftp/src/java/org/apache/nutch/protocol/ftp/FtpResponse.java-            + \"If this is acceptable, please modify Client.java accordingly. \"  + e", "loggerLevel": "warn", "TemplatePattern": "Unrecognized reply after forced close of data channel. <P>If this is acceptable, please modify Client.java accordingly. <P>"}
{"classname": "ftp.FtpResponse", "TemplateID": 249, "logline": "\"delete client because server cut off control channel: \"  + e", "loggerLevel": "info", "TemplatePattern": "delete client because server cut off control channel: <P>"}
{"classname": "ftp.FtpResponse", "TemplateID": 250, "logline": "\"Unrecognized reply after forced close of data channel. \"  /root/nutch-git-source/nutch/src/plugin/protocol-ftp/src/java/org/apache/nutch/protocol/ftp/FtpResponse.java-            + \"If this is acceptable, please modify Client.java accordingly. \"  + e", "loggerLevel": "warn", "TemplatePattern": "Unrecognized reply after forced close of data channel. <P>If this is acceptable, please modify Client.java accordingly. <P>"}
{"classname": "ftp.FtpResponse", "TemplateID": 251, "logline": "\"\" + e", "loggerLevel": "warn", "TemplatePattern": "<P> "}
{"classname": "nutch.CCIndexingFilter", "TemplateID": 252, "logline": "\"CC: indexing \" + licenseUrl + \" for: \" + url.toString()", "loggerLevel": "info", "TemplatePattern": "CC: indexing <P> for: <P>"}
{"classname": "nutch.CCIndexingFilter", "TemplateID": 253, "logline": "\"CC: failed to parse url: \" + urlString + \" : \" + e", "loggerLevel": "warn", "TemplatePattern": "CC: failed to parse url: <P> : <P>"}
{"classname": "nutch.CCParseFilter", "TemplateID": 254, "logline": "\"CC: found \" + licenseUrl + \" in \" + licenseLocation  + \" of \" + base", "loggerLevel": "info", "TemplatePattern": "CC: found <P> in <P> of <P>"}
{"classname": "nutch.CCParseFilter", "TemplateID": 255, "logline": "\"CC: found \" + walker.workType + \" in \" + base", "loggerLevel": "info", "TemplatePattern": "CC: found <P> in <P>"}
{"classname": "nutch.CCParseFilter", "TemplateID": 256, "logline": "\"CC: Failed to parse RDF in \" + base + \": \" + e", "loggerLevel": "warn", "TemplatePattern": "CC: Failed to parse RDF in <P>: <P>"}
{"classname": "nutch.CCParseFilter", "TemplateID": 257, "logline": "\"CC: No RDF root in \" + base", "loggerLevel": "warn", "TemplatePattern": "CC: No RDF root in <P>"}
{"classname": "tika.TikaParser", "TemplateID": 258, "logline": "message", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "tika.TikaParser", "TemplateID": 259, "logline": "\"Using Tika parser \" + parser.getClass().getName()  + \" for mime-type \" + mimeType", "loggerLevel": "debug", "TemplatePattern": "Using Tika parser <P> for mime-type <P>"}
{"classname": "tika.TikaParser", "TemplateID": 260, "logline": "\"Error parsing \" + content.getUrl(), e", "loggerLevel": "error", "TemplatePattern": "Error parsing <P>"}
{"classname": "tika.TikaParser", "TemplateID": 261, "logline": "\"Meta tags for \" + base + \": \" + metaTags.toString()", "loggerLevel": "trace", "TemplatePattern": "Meta tags for <P>: <P>"}
{"classname": "tika.TikaParser", "TemplateID": 262, "logline": "\"Getting text...\"", "loggerLevel": "trace", "TemplatePattern": "Getting text..."}
{"classname": "tika.TikaParser", "TemplateID": 263, "logline": "\"Getting title...\"", "loggerLevel": "trace", "TemplatePattern": "Getting title..."}
{"classname": "tika.TikaParser", "TemplateID": 264, "logline": "\"Getting links...\"", "loggerLevel": "trace", "TemplatePattern": "Getting links..."}
{"classname": "tika.TikaParser", "TemplateID": 265, "logline": "\"found \" + outlinks.length + \" outlinks in \"  + content.getUrl()", "loggerLevel": "trace", "TemplatePattern": "found <P> outlinks in <P>"}
{"classname": "tika.TikaParser", "TemplateID": 266, "logline": "message, e1", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "tika.TikaParser", "TemplateID": 267, "logline": "message, e2", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "tika.TikaParser", "TemplateID": 268, "logline": "\"Can't generate instance for class \" + htmlmapperClassName", "loggerLevel": "error", "TemplatePattern": "Can't generate instance for class <P>"}
{"classname": "tika.TestOOParser", "TemplateID": 269, "logline": "\"Expected : \" + expectedText", "loggerLevel": "none", "TemplatePattern": "Expected : <P>"}
{"classname": "tika.TestOOParser", "TemplateID": 270, "logline": "\"Found \" + sampleFiles[i] + \": \" + text", "loggerLevel": "none", "TemplatePattern": "Found <P>: <P>"}
{"classname": "depth.DepthScoringFilter", "TemplateID": 271, "logline": "\"Missing depth, removing all outlinks from url \" + fromUrl", "loggerLevel": "warn", "TemplatePattern": "Missing depth, removing all outlinks from url <P>"}
{"classname": "depth.DepthScoringFilter", "TemplateID": 272, "logline": "\"Depth limit (\" + curMaxDepth  + \") reached, ignoring outlinks for \" + fromUrl", "loggerLevel": "info", "TemplatePattern": "Depth limit (<P>) reached, ignoring outlinks for <P>"}
{"classname": "solr.SolrUtils", "TemplateID": 273, "logline": "\"Authenticating as: \" + username", "loggerLevel": "info", "TemplatePattern": "Authenticating as: <P>"}
{"classname": "solr.SolrIndexWriter", "TemplateID": 274, "logline": "\"Indexing \" + Integer.toString(inputDocs.size())  + \" documents\"", "loggerLevel": "info", "TemplatePattern": "Indexing <P> documents"}
{"classname": "solr.SolrIndexWriter", "TemplateID": 275, "logline": "\"Deleting \" + Integer.toString(numDeletes) + \" documents\"", "loggerLevel": "info", "TemplatePattern": "Deleting <P> documents"}
{"classname": "solr.SolrIndexWriter", "TemplateID": 276, "logline": "\"Indexing \" + Integer.toString(inputDocs.size())  + \" documents\"", "loggerLevel": "info", "TemplatePattern": "Indexing <P> documents"}
{"classname": "solr.SolrIndexWriter", "TemplateID": 277, "logline": "\"Deleting \" + Integer.toString(numDeletes) + \" documents\"", "loggerLevel": "info", "TemplatePattern": "Deleting <P> documents"}
{"classname": "solr.SolrIndexWriter", "TemplateID": 278, "logline": "message", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "solr.SolrMappingReader", "TemplateID": 279, "logline": "\"source: \" + element.getAttribute(\"source\") + \" dest: \"  + element.getAttribute(\"dest\")", "loggerLevel": "info", "TemplatePattern": "source: <P>source<P> dest: <P>dest<P>"}
{"classname": "solr.SolrMappingReader", "TemplateID": 280, "logline": "\"source: \" + element.getAttribute(\"source\") + \" dest: \"  + element.getAttribute(\"dest\")", "loggerLevel": "info", "TemplatePattern": "source: <P>source<P> dest: <P>dest<P>"}
{"classname": "solr.SolrMappingReader", "TemplateID": 281, "logline": "\"More than one unique key definitions found in solr index mapping, using default 'id'\"", "loggerLevel": "warn", "TemplatePattern": "More than one unique key definitions found in solr index mapping, using default 'id'"}
{"classname": "solr.SolrMappingReader", "TemplateID": 282, "logline": "\"No unique key definition found in solr index mapping using, default 'id'\"", "loggerLevel": "warn", "TemplatePattern": "No unique key definition found in solr index mapping using, default 'id'"}
{"classname": "solr.SolrMappingReader", "TemplateID": 283, "logline": "e.toString()", "loggerLevel": "warn", "TemplatePattern": "<P> "}
{"classname": "solr.SolrMappingReader", "TemplateID": 284, "logline": "e.toString()", "loggerLevel": "warn", "TemplatePattern": "<P> "}
{"classname": "solr.SolrMappingReader", "TemplateID": 285, "logline": "e.toString()", "loggerLevel": "warn", "TemplatePattern": "<P> "}
{"classname": "solr.SolrMappingReader", "TemplateID": 286, "logline": "e.toString()", "loggerLevel": "warn", "TemplatePattern": "<P> "}
{"classname": "webgraph.ScoreUpdater", "TemplateID": 287, "logline": "url + \": setting to score \" + inlinkScore", "loggerLevel": "debug", "TemplatePattern": "<P> : setting to score <P>"}
{"classname": "webgraph.ScoreUpdater", "TemplateID": 288, "logline": "url + \": setting to clear score of \" + clearScore", "loggerLevel": "debug", "TemplatePattern": "<P> : setting to clear score of <P>"}
{"classname": "webgraph.ScoreUpdater", "TemplateID": 289, "logline": "url + \": no datum\"", "loggerLevel": "debug", "TemplatePattern": "<P> : no datum"}
{"classname": "webgraph.ScoreUpdater", "TemplateID": 290, "logline": "\"ScoreUpdater: starting at \" + sdf.format(start)", "loggerLevel": "info", "TemplatePattern": "ScoreUpdater: starting at <P>"}
{"classname": "webgraph.ScoreUpdater", "TemplateID": 291, "logline": "\"Running crawldb update \" + crawlDb", "loggerLevel": "info", "TemplatePattern": "Running crawldb update <P>"}
{"classname": "webgraph.ScoreUpdater", "TemplateID": 292, "logline": "StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "webgraph.ScoreUpdater", "TemplateID": 293, "logline": "\"ScoreUpdater: installing new crawldb \" + crawlDb", "loggerLevel": "info", "TemplatePattern": "ScoreUpdater: installing new crawldb <P>"}
{"classname": "webgraph.ScoreUpdater", "TemplateID": 294, "logline": "\"ScoreUpdater: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)", "loggerLevel": "info", "TemplatePattern": "ScoreUpdater: finished at <P>, elapsed: <P>"}
{"classname": "webgraph.ScoreUpdater", "TemplateID": 295, "logline": "\"ScoreUpdater: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "ScoreUpdater: <P>"}
{"classname": "webgraph.NodeDumper", "TemplateID": 296, "logline": "\"NodeDumper: starting at \" + sdf.format(start)", "loggerLevel": "info", "TemplatePattern": "NodeDumper: starting at <P>"}
{"classname": "webgraph.NodeDumper", "TemplateID": 297, "logline": "\"NodeDumper: running\"", "loggerLevel": "info", "TemplatePattern": "NodeDumper: running"}
{"classname": "webgraph.NodeDumper", "TemplateID": 298, "logline": "StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "webgraph.NodeDumper", "TemplateID": 299, "logline": "\"NodeDumper: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)", "loggerLevel": "info", "TemplatePattern": "NodeDumper: finished at <P>, elapsed: <P>"}
{"classname": "webgraph.NodeDumper", "TemplateID": 300, "logline": "\"NodeDumper: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "NodeDumper: <P>"}
{"classname": "webgraph.LinkDumper", "TemplateID": 301, "logline": "\"LinkDumper$Reader usage: <webgraphdb> <url>\"", "loggerLevel": "none", "TemplatePattern": "LinkDumper$Reader usage: <webgraphdb> <url>"}
{"classname": "webgraph.LinkDumper", "TemplateID": 302, "logline": "url + \":\"", "loggerLevel": "none", "TemplatePattern": "<P> :"}
{"classname": "webgraph.LinkDumper", "TemplateID": 303, "logline": "\"  \" + node.getUrl() + \" - \"  + node.getNode().toString()", "loggerLevel": "none", "TemplatePattern": "  <P> - <P>"}
{"classname": "webgraph.LinkDumper", "TemplateID": 304, "logline": "\"NodeDumper: starting at \" + sdf.format(start)", "loggerLevel": "info", "TemplatePattern": "NodeDumper: starting at <P>"}
{"classname": "webgraph.LinkDumper", "TemplateID": 305, "logline": "\"LinkDumper: running inverter\"", "loggerLevel": "info", "TemplatePattern": "LinkDumper: running inverter"}
{"classname": "webgraph.LinkDumper", "TemplateID": 306, "logline": "\"LinkDumper: finished inverter\"", "loggerLevel": "info", "TemplatePattern": "LinkDumper: finished inverter"}
{"classname": "webgraph.LinkDumper", "TemplateID": 307, "logline": "StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "webgraph.LinkDumper", "TemplateID": 308, "logline": "\"LinkDumper: running merger\"", "loggerLevel": "info", "TemplatePattern": "LinkDumper: running merger"}
{"classname": "webgraph.LinkDumper", "TemplateID": 309, "logline": "\"LinkDumper: finished merger\"", "loggerLevel": "info", "TemplatePattern": "LinkDumper: finished merger"}
{"classname": "webgraph.LinkDumper", "TemplateID": 310, "logline": "StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "webgraph.LinkDumper", "TemplateID": 311, "logline": "\"LinkDumper: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)", "loggerLevel": "info", "TemplatePattern": "LinkDumper: finished at <P>, elapsed: <P>"}
{"classname": "webgraph.LinkDumper", "TemplateID": 312, "logline": "\"LinkDumper: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "LinkDumper: <P>"}
{"classname": "webgraph.LoopReader", "TemplateID": 313, "logline": "url + \":\"", "loggerLevel": "none", "TemplatePattern": "<P> :"}
{"classname": "webgraph.LoopReader", "TemplateID": 314, "logline": "\"  \" + loopUrl", "loggerLevel": "none", "TemplatePattern": "  <P>"}
{"classname": "webgraph.LinkRank", "TemplateID": 315, "logline": "\"Starting link counter job\"", "loggerLevel": "info", "TemplatePattern": "Starting link counter job"}
{"classname": "webgraph.LinkRank", "TemplateID": 316, "logline": "StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "webgraph.LinkRank", "TemplateID": 317, "logline": "\"Finished link counter job\"", "loggerLevel": "info", "TemplatePattern": "Finished link counter job"}
{"classname": "webgraph.LinkRank", "TemplateID": 318, "logline": "\"Reading numlinks temp file\"", "loggerLevel": "info", "TemplatePattern": "Reading numlinks temp file"}
{"classname": "webgraph.LinkRank", "TemplateID": 319, "logline": "\"Deleting numlinks temp file\"", "loggerLevel": "info", "TemplatePattern": "Deleting numlinks temp file"}
{"classname": "webgraph.LinkRank", "TemplateID": 320, "logline": "\"Starting initialization job\"", "loggerLevel": "info", "TemplatePattern": "Starting initialization job"}
{"classname": "webgraph.LinkRank", "TemplateID": 321, "logline": "StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "webgraph.LinkRank", "TemplateID": 322, "logline": "\"Finished initialization job.\"", "loggerLevel": "info", "TemplatePattern": "Finished initialization job."}
{"classname": "webgraph.LinkRank", "TemplateID": 323, "logline": "\"Starting inverter job\"", "loggerLevel": "info", "TemplatePattern": "Starting inverter job"}
{"classname": "webgraph.LinkRank", "TemplateID": 324, "logline": "StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "webgraph.LinkRank", "TemplateID": 325, "logline": "\"Finished inverter job.\"", "loggerLevel": "info", "TemplatePattern": "Finished inverter job."}
{"classname": "webgraph.LinkRank", "TemplateID": 326, "logline": "\"Starting analysis job\"", "loggerLevel": "info", "TemplatePattern": "Starting analysis job"}
{"classname": "webgraph.LinkRank", "TemplateID": 327, "logline": "StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "webgraph.LinkRank", "TemplateID": 328, "logline": "\"Finished analysis job.\"", "loggerLevel": "info", "TemplatePattern": "Finished analysis job."}
{"classname": "webgraph.LinkRank", "TemplateID": 329, "logline": "\"LoopSet without Node object received for \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/scoring/webgraph/LinkRank.java-            + key.toString()  + \" . You should either not use Loops as input of the LinkRank program or rerun the Loops program over the WebGraph.\"", "loggerLevel": "warn", "TemplatePattern": "LoopSet without Node object received for <P> . You should either not use Loops as input of the LinkRank program or rerun the Loops program over the WebGraph."}
{"classname": "webgraph.LinkRank", "TemplateID": 330, "logline": "fromUrl + \": num outlinks \" + numOutlinks", "loggerLevel": "debug", "TemplatePattern": "<P> : num outlinks <P>"}
{"classname": "webgraph.LinkRank", "TemplateID": 331, "logline": "fromUrl + \": Skipping inverting inlink from loop \"  + toUrl", "loggerLevel": "debug", "TemplatePattern": "<P> : Skipping inverting inlink from loop <P>"}
{"classname": "webgraph.LinkRank", "TemplateID": 332, "logline": "toUrl + \": inverting inlink from \" + fromUrl  /root/nutch-git-source/nutch/src/java/org/apache/nutch/scoring/webgraph/LinkRank.java-              + \" origscore: \" + inlinkScore + \" numOutlinks: \" + numOutlinks  + \" inlinkscore: \" + outlinkScore", "loggerLevel": "debug", "TemplatePattern": "<P> : inverting inlink from <P> origscore: <P> numOutlinks: <P> inlinkscore: <P>"}
{"classname": "webgraph.LinkRank", "TemplateID": 333, "logline": "StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "webgraph.LinkRank", "TemplateID": 334, "logline": "url + \": ignoring \" + scoreFromInlink + \" from \"  + inlinkUrl + \", duplicate page or domain\"", "loggerLevel": "debug", "TemplatePattern": "<P> : ignoring <P> from <P>, duplicate page or domain"}
{"classname": "webgraph.LinkRank", "TemplateID": 335, "logline": "url + \": adding \" + scoreFromInlink + \" from \" + inlinkUrl  + \", total: \" + totalInlinkScore", "loggerLevel": "debug", "TemplatePattern": "<P> : adding <P> from <P>, total: <P>"}
{"classname": "webgraph.LinkRank", "TemplateID": 336, "logline": "url + \": score: \" + linkRankScore + \" num inlinks: \"  + numInlinks + \" iteration: \" + itNum", "loggerLevel": "debug", "TemplatePattern": "<P> : score: <P> num inlinks: <P> iteration: <P>"}
{"classname": "webgraph.LinkRank", "TemplateID": 337, "logline": "\"Analysis: starting at \" + sdf.format(start)", "loggerLevel": "info", "TemplatePattern": "Analysis: starting at <P>"}
{"classname": "webgraph.LinkRank", "TemplateID": 338, "logline": "\"Analysis: Number of links: \" + numLinks", "loggerLevel": "info", "TemplatePattern": "Analysis: Number of links: <P>"}
{"classname": "webgraph.LinkRank", "TemplateID": 339, "logline": "\"Analysis: Rank One: \" + rankOneScore", "loggerLevel": "info", "TemplatePattern": "Analysis: Rank One: <P>"}
{"classname": "webgraph.LinkRank", "TemplateID": 340, "logline": "\"Analysis: Starting iteration \" + (i + 1) + \" of \"  + numIterations", "loggerLevel": "info", "TemplatePattern": "Analysis: Starting iteration <P> of <P>"}
{"classname": "webgraph.LinkRank", "TemplateID": 341, "logline": "\"Analysis: Installing new link scores\"", "loggerLevel": "info", "TemplatePattern": "Analysis: Installing new link scores"}
{"classname": "webgraph.LinkRank", "TemplateID": 342, "logline": "\"Analysis: finished iteration \" + (i + 1) + \" of \"  + numIterations", "loggerLevel": "info", "TemplatePattern": "Analysis: finished iteration <P> of <P>"}
{"classname": "webgraph.LinkRank", "TemplateID": 343, "logline": "\"Analysis: Installing web graph nodes\"", "loggerLevel": "info", "TemplatePattern": "Analysis: Installing web graph nodes"}
{"classname": "webgraph.LinkRank", "TemplateID": 344, "logline": "\"Analysis: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)", "loggerLevel": "info", "TemplatePattern": "Analysis: finished at <P>, elapsed: <P>"}
{"classname": "webgraph.LinkRank", "TemplateID": 345, "logline": "\"LinkAnalysis: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "LinkAnalysis: <P>"}
{"classname": "webgraph.WebGraph", "TemplateID": 346, "logline": "\"Skipping \" + url + \":\" + e", "loggerLevel": "warn", "TemplatePattern": "Skipping <P>:<P>"}
{"classname": "webgraph.WebGraph", "TemplateID": 347, "logline": "\"WebGraphDb: starting at \" + sdf.format(start)", "loggerLevel": "info", "TemplatePattern": "WebGraphDb: starting at <P>"}
{"classname": "webgraph.WebGraph", "TemplateID": 348, "logline": "\"WebGraphDb: webgraphdb: \" + webGraphDb", "loggerLevel": "info", "TemplatePattern": "WebGraphDb: webgraphdb: <P>"}
{"classname": "webgraph.WebGraph", "TemplateID": 349, "logline": "\"WebGraphDb: URL normalize: \" + normalize", "loggerLevel": "info", "TemplatePattern": "WebGraphDb: URL normalize: <P>"}
{"classname": "webgraph.WebGraph", "TemplateID": 350, "logline": "\"WebGraphDb: URL filter: \" + filter", "loggerLevel": "info", "TemplatePattern": "WebGraphDb: URL filter: <P>"}
{"classname": "webgraph.WebGraph", "TemplateID": 351, "logline": "\"OutlinkDb: deleting gone links\"", "loggerLevel": "info", "TemplatePattern": "OutlinkDb: deleting gone links"}
{"classname": "webgraph.WebGraph", "TemplateID": 352, "logline": "\"OutlinkDb: adding input: \" + parseData", "loggerLevel": "info", "TemplatePattern": "OutlinkDb: adding input: <P>"}
{"classname": "webgraph.WebGraph", "TemplateID": 353, "logline": "\"OutlinkDb: adding input: \" + crawlFetch", "loggerLevel": "info", "TemplatePattern": "OutlinkDb: adding input: <P>"}
{"classname": "webgraph.WebGraph", "TemplateID": 354, "logline": "\"OutlinkDb: adding input: \" + outlinkDb", "loggerLevel": "info", "TemplatePattern": "OutlinkDb: adding input: <P>"}
{"classname": "webgraph.WebGraph", "TemplateID": 355, "logline": "\"OutlinkDb: running\"", "loggerLevel": "info", "TemplatePattern": "OutlinkDb: running"}
{"classname": "webgraph.WebGraph", "TemplateID": 356, "logline": "\"OutlinkDb: installing \" + outlinkDb", "loggerLevel": "info", "TemplatePattern": "OutlinkDb: installing <P>"}
{"classname": "webgraph.WebGraph", "TemplateID": 357, "logline": "\"OutlinkDb: finished\"", "loggerLevel": "info", "TemplatePattern": "OutlinkDb: finished"}
{"classname": "webgraph.WebGraph", "TemplateID": 358, "logline": "StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "webgraph.WebGraph", "TemplateID": 359, "logline": "\"InlinkDb: adding input: \" + outlinkDb", "loggerLevel": "info", "TemplatePattern": "InlinkDb: adding input: <P>"}
{"classname": "webgraph.WebGraph", "TemplateID": 360, "logline": "\"InlinkDb: running\"", "loggerLevel": "info", "TemplatePattern": "InlinkDb: running"}
{"classname": "webgraph.WebGraph", "TemplateID": 361, "logline": "\"InlinkDb: installing \" + inlinkDb", "loggerLevel": "info", "TemplatePattern": "InlinkDb: installing <P>"}
{"classname": "webgraph.WebGraph", "TemplateID": 362, "logline": "\"InlinkDb: finished\"", "loggerLevel": "info", "TemplatePattern": "InlinkDb: finished"}
{"classname": "webgraph.WebGraph", "TemplateID": 363, "logline": "StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "webgraph.WebGraph", "TemplateID": 364, "logline": "\"NodeDb: adding input: \" + outlinkDb", "loggerLevel": "info", "TemplatePattern": "NodeDb: adding input: <P>"}
{"classname": "webgraph.WebGraph", "TemplateID": 365, "logline": "\"NodeDb: adding input: \" + inlinkDb", "loggerLevel": "info", "TemplatePattern": "NodeDb: adding input: <P>"}
{"classname": "webgraph.WebGraph", "TemplateID": 366, "logline": "\"NodeDb: running\"", "loggerLevel": "info", "TemplatePattern": "NodeDb: running"}
{"classname": "webgraph.WebGraph", "TemplateID": 367, "logline": "\"NodeDb: installing \" + nodeDb", "loggerLevel": "info", "TemplatePattern": "NodeDb: installing <P>"}
{"classname": "webgraph.WebGraph", "TemplateID": 368, "logline": "\"NodeDb: finished\"", "loggerLevel": "info", "TemplatePattern": "NodeDb: finished"}
{"classname": "webgraph.WebGraph", "TemplateID": 369, "logline": "StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "webgraph.WebGraph", "TemplateID": 370, "logline": "\"WebGraphDb: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)", "loggerLevel": "info", "TemplatePattern": "WebGraphDb: finished at <P>, elapsed: <P>"}
{"classname": "webgraph.WebGraph", "TemplateID": 371, "logline": "\"WebGraph: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "WebGraph: <P>"}
{"classname": "webgraph.NodeReader", "TemplateID": 372, "logline": "url + \":\"", "loggerLevel": "none", "TemplatePattern": "<P> :"}
{"classname": "webgraph.NodeReader", "TemplateID": 373, "logline": "\"  inlink score: \" + node.getInlinkScore()", "loggerLevel": "none", "TemplatePattern": "  inlink score: <P>"}
{"classname": "webgraph.NodeReader", "TemplateID": 374, "logline": "\"  outlink score: \" + node.getOutlinkScore()", "loggerLevel": "none", "TemplatePattern": "  outlink score: <P>"}
{"classname": "webgraph.NodeReader", "TemplateID": 375, "logline": "\"  num inlinks: \" + node.getNumInlinks()", "loggerLevel": "none", "TemplatePattern": "  num inlinks: <P>"}
{"classname": "webgraph.NodeReader", "TemplateID": 376, "logline": "\"  num outlinks: \" + node.getNumOutlinks()", "loggerLevel": "none", "TemplatePattern": "  num outlinks: <P>"}
{"classname": "webgraph.Loops", "TemplateID": 377, "logline": "\"Loops: starting at \" + sdf.format(start)", "loggerLevel": "info", "TemplatePattern": "Loops: starting at <P>"}
{"classname": "webgraph.Loops", "TemplateID": 378, "logline": "\"Loops: webgraphdb: \" + webGraphDb", "loggerLevel": "info", "TemplatePattern": "Loops: webgraphdb: <P>"}
{"classname": "webgraph.Loops", "TemplateID": 379, "logline": "\"Loops: starting initializer\"", "loggerLevel": "info", "TemplatePattern": "Loops: starting initializer"}
{"classname": "webgraph.Loops", "TemplateID": 380, "logline": "\"Loops: installing initializer \" + routes", "loggerLevel": "info", "TemplatePattern": "Loops: installing initializer <P>"}
{"classname": "webgraph.Loops", "TemplateID": 381, "logline": "\"Loops: finished initializer\"", "loggerLevel": "info", "TemplatePattern": "Loops: finished initializer"}
{"classname": "webgraph.Loops", "TemplateID": 382, "logline": "StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "webgraph.Loops", "TemplateID": 383, "logline": "\"Loops: starting looper\"", "loggerLevel": "info", "TemplatePattern": "Loops: starting looper"}
{"classname": "webgraph.Loops", "TemplateID": 384, "logline": "\"Loops: installing looper \" + routes", "loggerLevel": "info", "TemplatePattern": "Loops: installing looper <P>"}
{"classname": "webgraph.Loops", "TemplateID": 385, "logline": "\"Loops: finished looper\"", "loggerLevel": "info", "TemplatePattern": "Loops: finished looper"}
{"classname": "webgraph.Loops", "TemplateID": 386, "logline": "StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "webgraph.Loops", "TemplateID": 387, "logline": "\"Loops: starting finalizer\"", "loggerLevel": "info", "TemplatePattern": "Loops: starting finalizer"}
{"classname": "webgraph.Loops", "TemplateID": 388, "logline": "\"Loops: finished finalizer\"", "loggerLevel": "info", "TemplatePattern": "Loops: finished finalizer"}
{"classname": "webgraph.Loops", "TemplateID": 389, "logline": "StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "webgraph.Loops", "TemplateID": 390, "logline": "\"Loops: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)", "loggerLevel": "info", "TemplatePattern": "Loops: finished at <P>, elapsed: <P>"}
{"classname": "webgraph.Loops", "TemplateID": 391, "logline": "\"Loops: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "Loops: <P>"}
{"classname": "plugin.PluginRepository", "TemplateID": 392, "logline": "\"No plugins found on paths of property plugin.folders=\\\"{}\\\"\",  conf.get(\"plugin.folders\")", "loggerLevel": "warn", "TemplatePattern": "No plugins found on paths of property plugin.folders=\\<P>plugin.folders<P>"}
{"classname": "plugin.PluginRepository", "TemplateID": 393, "logline": "e.toString()", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "plugin.PluginRepository", "TemplateID": 394, "logline": "\"Adding extension point \" + xpId", "loggerLevel": "debug", "TemplatePattern": "Adding extension point <P>"}
{"classname": "plugin.PluginRepository", "TemplateID": 395, "logline": "mde.getMessage()", "loggerLevel": "warn", "TemplatePattern": "<P> "}
{"classname": "plugin.PluginRepository", "TemplateID": 396, "logline": "cde.getMessage()", "loggerLevel": "warn", "TemplatePattern": "<P> "}
{"classname": "plugin.PluginRepository", "TemplateID": 397, "logline": "\"Plugin Auto-activation mode: [\" + this.auto + \"]\"", "loggerLevel": "info", "TemplatePattern": "Plugin Auto-activation mode: [<P>]"}
{"classname": "plugin.PluginRepository", "TemplateID": 398, "logline": "\"Registered Plugins:\"", "loggerLevel": "info", "TemplatePattern": "Registered Plugins:"}
{"classname": "plugin.PluginRepository", "TemplateID": 399, "logline": "\"\\tNONE\"", "loggerLevel": "info", "TemplatePattern": "\\tNONE"}
{"classname": "plugin.PluginRepository", "TemplateID": 400, "logline": "\"\\t\" + plugin.getName() + \" (\" + plugin.getPluginId() + \")\"", "loggerLevel": "info", "TemplatePattern": "\\t<P> (<P>)"}
{"classname": "plugin.PluginRepository", "TemplateID": 401, "logline": "\"Registered Extension-Points:\"", "loggerLevel": "info", "TemplatePattern": "Registered Extension-Points:"}
{"classname": "plugin.PluginRepository", "TemplateID": 402, "logline": "\"\\tNONE\"", "loggerLevel": "info", "TemplatePattern": "\\tNONE"}
{"classname": "plugin.PluginRepository", "TemplateID": 403, "logline": "\"\\t\" + ep.getName() + \" (\" + ep.getId() + \")\"", "loggerLevel": "info", "TemplatePattern": "\\t<P> (<P>)"}
{"classname": "plugin.PluginRepository", "TemplateID": 404, "logline": "\"not including: \" + id", "loggerLevel": "debug", "TemplatePattern": "not including: <P>"}
{"classname": "plugin.PluginRepository", "TemplateID": 405, "logline": "\"excluding: \" + id", "loggerLevel": "debug", "TemplatePattern": "excluding: <P>"}
{"classname": "plugin.PluginRepository", "TemplateID": 406, "logline": "clazz.getSimpleName() + \" : \" + orderedFilter  /root/nutch-git-source/nutch/src/java/org/apache/nutch/plugin/PluginRepository.java-                + \" declared in configuration property \" + orderProperty  + \" but not found in an active plugin - ignoring.\"", "loggerLevel": "error", "TemplatePattern": "<P>  : <P> declared in configuration property <P> but not found in an active plugin - ignoring."}
{"classname": "plugin.PluginRepository", "TemplateID": 407, "logline": "clazz.getSimpleName() + \" : filters[\" + i + \"] = \"  + filter[i].getClass()", "loggerLevel": "trace", "TemplatePattern": "<P>  : filters[<P>] = <P>"}
{"classname": "plugin.PluginRepository", "TemplateID": 408, "logline": "\"Plugin '\" + args[0] + \"' not present or inactive.\"", "loggerLevel": "none", "TemplatePattern": "Plugin '<P>' not present or inactive."}
{"classname": "plugin.PluginRepository", "TemplateID": 409, "logline": "\"Could not load the class '\" + args[1] + \": \"  + e.getMessage()", "loggerLevel": "none", "TemplatePattern": "Could not load the class '<P>: <P>"}
{"classname": "plugin.PluginRepository", "TemplateID": 410, "logline": "\"Could not find the 'main(String[])' method in class \"  + args[1] + \": \" + e.getMessage()", "loggerLevel": "none", "TemplatePattern": "Could not find the 'main(String[])' method in class <P>: <P>"}
{"classname": "plugin.PluginManifestParser", "TemplateID": 411, "logline": "\"Plugins: looking in: \" + directory.getAbsolutePath()", "loggerLevel": "info", "TemplatePattern": "Plugins: looking in: <P>"}
{"classname": "plugin.PluginManifestParser", "TemplateID": 412, "logline": "\"parsing: \" + manifestPath", "loggerLevel": "debug", "TemplatePattern": "parsing: <P>"}
{"classname": "plugin.PluginManifestParser", "TemplateID": 413, "logline": "\"Error while loading plugin `\" + manifestPath + \"` \"  + e.toString()", "loggerLevel": "warn", "TemplatePattern": "Error while loading plugin `<P>` <P>"}
{"classname": "plugin.PluginManifestParser", "TemplateID": 414, "logline": "\"Plugins: directory not found: \" + name", "loggerLevel": "warn", "TemplatePattern": "Plugins: directory not found: <P>"}
{"classname": "plugin.PluginManifestParser", "TemplateID": 415, "logline": "\"Plugins: not a file: url. Can't load plugins from: \" + url", "loggerLevel": "warn", "TemplatePattern": "Plugins: not a file: url. Can't load plugins from: <P>"}
{"classname": "plugin.PluginManifestParser", "TemplateID": 416, "logline": "\"Plugins: directory not found: \" + name", "loggerLevel": "warn", "TemplatePattern": "Plugins: directory not found: <P>"}
{"classname": "plugin.PluginManifestParser", "TemplateID": 417, "logline": "\"plugin: id=\" + id + \" name=\" + name + \" version=\" + version  + \" provider=\" + providerName + \"class=\" + pluginClazz", "loggerLevel": "debug", "TemplatePattern": "plugin: id=<P> name=<P> version=<P> provider=<P>class=<P>"}
{"classname": "plugin.PluginManifestParser", "TemplateID": 418, "logline": "\"impl: point=\" + pointId + \" class=\" + extensionClass", "loggerLevel": "debug", "TemplatePattern": "impl: point=<P> class=<P>"}
{"classname": "plugin.PluginDescriptor", "TemplateID": 419, "logline": "getPluginId() + \" \" + e.toString()", "loggerLevel": "debug", "TemplatePattern": "<P>  <P>"}
{"classname": "net.URLFilterChecker", "TemplateID": 420, "logline": "\"Checking URLFilter \" + filterName", "loggerLevel": "none", "TemplatePattern": "Checking URLFilter <P>"}
{"classname": "net.URLFilterChecker", "TemplateID": 421, "logline": "\"+\"", "loggerLevel": "none", "TemplatePattern": "+"}
{"classname": "net.URLFilterChecker", "TemplateID": 422, "logline": "out", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "net.URLFilterChecker", "TemplateID": 423, "logline": "\"-\"", "loggerLevel": "none", "TemplatePattern": "-"}
{"classname": "net.URLFilterChecker", "TemplateID": 424, "logline": "line", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "net.URLFilterChecker", "TemplateID": 425, "logline": "\"Checking combination of all URLFilters available\"", "loggerLevel": "none", "TemplatePattern": "Checking combination of all URLFilters available"}
{"classname": "net.URLFilterChecker", "TemplateID": 426, "logline": "\"+\"", "loggerLevel": "none", "TemplatePattern": "+"}
{"classname": "net.URLFilterChecker", "TemplateID": 427, "logline": "out", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "net.URLFilterChecker", "TemplateID": 428, "logline": "\"-\"", "loggerLevel": "none", "TemplatePattern": "-"}
{"classname": "net.URLFilterChecker", "TemplateID": 429, "logline": "line", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "net.URLFilterChecker", "TemplateID": 430, "logline": "usage", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "net.URLFilterChecker", "TemplateID": 431, "logline": "usage", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "net.URLNormalizerChecker", "TemplateID": 432, "logline": "\"Checking URLNormalizer \" + normalizerName", "loggerLevel": "none", "TemplatePattern": "Checking URLNormalizer <P>"}
{"classname": "net.URLNormalizerChecker", "TemplateID": 433, "logline": "out", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "net.URLNormalizerChecker", "TemplateID": 434, "logline": "\"Checking combination of all URLNormalizers available\"", "loggerLevel": "none", "TemplatePattern": "Checking combination of all URLNormalizers available"}
{"classname": "net.URLNormalizerChecker", "TemplateID": 435, "logline": "out", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "net.URLNormalizerChecker", "TemplateID": 436, "logline": "usage", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "net.URLNormalizers", "TemplateID": 437, "logline": "\"URLNormalizers:PluginRuntimeException when \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/net/URLNormalizers.java-            + \"initializing url normalizer plugin \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/net/URLNormalizers.java-            + ext.getDescriptor().getPluginId()  /root/nutch-git-source/nutch/src/java/org/apache/nutch/net/URLNormalizers.java-            + \" instance in getURLNormalizers \"  + \"function: attempting to continue instantiating plugins\"", "loggerLevel": "warn", "TemplatePattern": "URLNormalizers:PluginRuntimeException when <P>initializing url normalizer plugin <P> instance in getURLNormalizers <P>function: attempting to continue instantiating plugins"}
{"classname": "protocols.HttpDateFormat", "TemplateID": 438, "logline": "string", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "protocols.HttpDateFormat", "TemplateID": 439, "logline": "HttpDateFormat.toString(time)", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "tools.AbstractCommonCrawlFormat", "TemplateID": 440, "logline": "\"Error in processing file \" + url + \": \" + ioe.getMessage()", "loggerLevel": "warn", "TemplatePattern": "Error in processing file <P>: <P>"}
{"classname": "tools.AbstractCommonCrawlFormat", "TemplateID": 441, "logline": "pe.getMessage()", "loggerLevel": "warn", "TemplatePattern": "<P> "}
{"classname": "tools.AbstractCommonCrawlFormat", "TemplateID": 442, "logline": "pe.getMessage()", "loggerLevel": "warn", "TemplatePattern": "<P> "}
{"classname": "tools.AbstractCommonCrawlFormat", "TemplateID": 443, "logline": "pe.getMessage()", "loggerLevel": "warn", "TemplatePattern": "<P> "}
{"classname": "tools.ResolveUrls", "TemplateID": 444, "logline": "\"Resolved: \" + host", "loggerLevel": "info", "TemplatePattern": "Resolved: <P>"}
{"classname": "tools.ResolveUrls", "TemplateID": 445, "logline": "\"Error Resolving: \" + host", "loggerLevel": "info", "TemplatePattern": "Error Resolving: <P>"}
{"classname": "tools.ResolveUrls", "TemplateID": 446, "logline": "\", \" + total + \" millis\"", "loggerLevel": "info", "TemplatePattern": ", <P> millis"}
{"classname": "tools.ResolveUrls", "TemplateID": 447, "logline": "\"Starting: \" + urlStr", "loggerLevel": "info", "TemplatePattern": "Starting: <P>"}
{"classname": "tools.ResolveUrls", "TemplateID": 448, "logline": "StringUtils.stringifyException(e)", "loggerLevel": "info", "TemplatePattern": "<P> "}
{"classname": "tools.ResolveUrls", "TemplateID": 449, "logline": "\"Total: \" + numTotal.get() + \", Resovled: \" + numResolved.get()  /root/nutch-git-source/nutch/src/java/org/apache/nutch/tools/ResolveUrls.java-        + \", Errored: \" + numErrored.get() + \", Average Time: \"  + totalTime.get() / numTotal.get()", "loggerLevel": "info", "TemplatePattern": "Total: <P>, Resovled: <P>, Errored: <P>, Average Time: <P>"}
{"classname": "tools.ResolveUrls", "TemplateID": 450, "logline": "\"ResolveUrls: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "ResolveUrls: <P>"}
{"classname": "arc.ArcSegmentCreator", "TemplateID": 451, "logline": "\"Couldn't pass score, url \" + key + \" (\" + e + \")\"", "loggerLevel": "warn", "TemplatePattern": "Couldn't pass score, url <P> (<P>)"}
{"classname": "arc.ArcSegmentCreator", "TemplateID": 452, "logline": "\"Error parsing: \" + key + \": \"  + StringUtils.stringifyException(e)", "loggerLevel": "warn", "TemplatePattern": "Error parsing: <P>: <P>"}
{"classname": "arc.ArcSegmentCreator", "TemplateID": 453, "logline": "\"Error parsing: \" + key + \": \" + parseStatus", "loggerLevel": "warn", "TemplatePattern": "Error parsing: <P>: <P>"}
{"classname": "arc.ArcSegmentCreator", "TemplateID": 454, "logline": "\"Couldn't pass score, url \" + key + \" (\" + e + \")\"", "loggerLevel": "warn", "TemplatePattern": "Couldn't pass score, url <P> (<P>)"}
{"classname": "arc.ArcSegmentCreator", "TemplateID": 455, "logline": "\"ArcSegmentCreator caught:\"  + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "ArcSegmentCreator caught:<P>"}
{"classname": "arc.ArcSegmentCreator", "TemplateID": 456, "logline": "\"Conversion of \" + url + \" failed with: \"  + StringUtils.stringifyException(t)", "loggerLevel": "info", "TemplatePattern": "Conversion of <P> failed with: <P>"}
{"classname": "arc.ArcSegmentCreator", "TemplateID": 457, "logline": "\"Ignoring file header: \" + urlStr", "loggerLevel": "info", "TemplatePattern": "Ignoring file header: <P>"}
{"classname": "arc.ArcSegmentCreator", "TemplateID": 458, "logline": "\"Processing: \" + urlStr", "loggerLevel": "info", "TemplatePattern": "Processing: <P>"}
{"classname": "arc.ArcSegmentCreator", "TemplateID": 459, "logline": "\"Skipping \" + url + \":\" + e", "loggerLevel": "warn", "TemplatePattern": "Skipping <P>:<P>"}
{"classname": "arc.ArcSegmentCreator", "TemplateID": 460, "logline": "\"ArcSegmentCreator: starting at \" + sdf.format(start)", "loggerLevel": "info", "TemplatePattern": "ArcSegmentCreator: starting at <P>"}
{"classname": "arc.ArcSegmentCreator", "TemplateID": 461, "logline": "\"ArcSegmentCreator: arc files dir: \" + arcFiles", "loggerLevel": "info", "TemplatePattern": "ArcSegmentCreator: arc files dir: <P>"}
{"classname": "arc.ArcSegmentCreator", "TemplateID": 462, "logline": "\"ArcSegmentCreator: finished at \" + sdf.format(end)  + \", elapsed: \" + TimingUtil.elapsedTime(start, end)", "loggerLevel": "info", "TemplatePattern": "ArcSegmentCreator: finished at <P>, elapsed: <P>"}
{"classname": "arc.ArcSegmentCreator", "TemplateID": 463, "logline": "usage", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "arc.ArcSegmentCreator", "TemplateID": 464, "logline": "\"ArcSegmentCreator: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "ArcSegmentCreator: <P>"}
{"classname": "arc.ArcRecordReader", "TemplateID": 465, "logline": "\"Ignoring position: \" + (startRead)", "loggerLevel": "none", "TemplatePattern": "Ignoring position: <P>"}
{"classname": "tools.Benchmark", "TemplateID": 466, "logline": "\"\\t-depth NN\\tperform NN crawl cycles (default: 10)\"", "loggerLevel": "none", "TemplatePattern": "\\t-depth NN\\tperform NN crawl cycles (default: 10)"}
{"classname": "tools.Benchmark", "TemplateID": 467, "logline": "\"\\t-plugins <regex>\\toverride 'plugin.includes'.\"", "loggerLevel": "none", "TemplatePattern": "\\t-plugins <regex>\\toverride 'plugin.includes'."}
{"classname": "tools.Benchmark", "TemplateID": 468, "logline": "\"\\tNOTE: if not specified, this is reset to: \"  + plugins", "loggerLevel": "none", "TemplatePattern": "\\tNOTE: if not specified, this is reset to: <P>"}
{"classname": "tools.Benchmark", "TemplateID": 469, "logline": "\"Invalid argument: '\" + args[i] + \"'\"", "loggerLevel": "fatal", "TemplatePattern": "Invalid argument: '<P>'"}
{"classname": "tools.Benchmark", "TemplateID": 470, "logline": "res", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "tools.Benchmark", "TemplateID": 471, "logline": "\"crawl started in: \" + dir", "loggerLevel": "info", "TemplatePattern": "crawl started in: <P>"}
{"classname": "tools.Benchmark", "TemplateID": 472, "logline": "\"rootUrlDir = \" + rootUrlDir", "loggerLevel": "info", "TemplatePattern": "rootUrlDir = <P>"}
{"classname": "tools.Benchmark", "TemplateID": 473, "logline": "\"threads = \" + threads", "loggerLevel": "info", "TemplatePattern": "threads = <P>"}
{"classname": "tools.Benchmark", "TemplateID": 474, "logline": "\"depth = \" + depth", "loggerLevel": "info", "TemplatePattern": "depth = <P>"}
{"classname": "tools.Benchmark", "TemplateID": 475, "logline": "\"Stopping at depth=\" + i + \" - no more URLs to fetch.\"", "loggerLevel": "info", "TemplatePattern": "Stopping at depth=<P> - no more URLs to fetch."}
{"classname": "tools.Benchmark", "TemplateID": 476, "logline": "\"No URLs to fetch - check your seed list and URL filters.\"", "loggerLevel": "warn", "TemplatePattern": "No URLs to fetch - check your seed list and URL filters."}
{"classname": "tools.Benchmark", "TemplateID": 477, "logline": "\"crawl finished: \" + dir", "loggerLevel": "info", "TemplatePattern": "crawl finished: <P>"}
{"classname": "tools.CommonCrawlDataDumper", "TemplateID": 478, "logline": "\"Output directory: [\" + outputDir.getAbsolutePath() + \"]: does not exist, creating it.\"", "loggerLevel": "warn", "TemplatePattern": "Output directory: [<P>]: does not exist, creating it."}
{"classname": "tools.CommonCrawlDataDumper", "TemplateID": 479, "logline": "CommonCrawlDataDumper.class.getName() + \": \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> : <P>"}
{"classname": "tools.CommonCrawlDataDumper", "TemplateID": 480, "logline": "\"Gzipping CBOR data has been skipped\"", "loggerLevel": "info", "TemplatePattern": "Gzipping CBOR data has been skipped"}
{"classname": "tools.CommonCrawlDataDumper", "TemplateID": 481, "logline": "\"No segment directories found in [\" + segmentRootDir.getAbsolutePath() + \"]\"", "loggerLevel": "error", "TemplatePattern": "No segment directories found in [<P>]"}
{"classname": "tools.CommonCrawlDataDumper", "TemplateID": 482, "logline": "\"Processing segment: [\" + segment.getAbsolutePath() + \"]\"", "loggerLevel": "info", "TemplatePattern": "Processing segment: [<P>]"}
{"classname": "tools.CommonCrawlDataDumper", "TemplateID": 483, "logline": "\"Skipping segment: [\" + segmentContentPath\t+ \"]: no data directory present\"", "loggerLevel": "warn", "TemplatePattern": "Skipping segment: [<P>]: no data directory present"}
{"classname": "tools.CommonCrawlDataDumper", "TemplateID": 484, "logline": "\"Skipping segment: [\" + segmentContentPath\t+ \"]: no data directory present\"", "loggerLevel": "warn", "TemplatePattern": "Skipping segment: [<P>]: no data directory present"}
{"classname": "tools.CommonCrawlDataDumper", "TemplateID": 485, "logline": "pe.getMessage()", "loggerLevel": "warn", "TemplatePattern": "<P> "}
{"classname": "tools.CommonCrawlDataDumper", "TemplateID": 486, "logline": "\"Fatal error in creating JSON data: \" + ioe.getMessage()", "loggerLevel": "error", "TemplatePattern": "Fatal error in creating JSON data: <P>"}
{"classname": "tools.CommonCrawlDataDumper", "TemplateID": 487, "logline": "\"Skipping writing: [\" + outputFullPath\t+ \"]: file already exists\"", "loggerLevel": "info", "TemplatePattern": "Skipping writing: [<P>]: file already exists"}
{"classname": "tools.CommonCrawlDataDumper", "TemplateID": 488, "logline": "\"Writing: [\" + outputFullPath + \"]\"", "loggerLevel": "info", "TemplatePattern": "Writing: [<P>]"}
{"classname": "tools.CommonCrawlDataDumper", "TemplateID": 489, "logline": "\"Skipping compressing: [\" + outputFullPath + \"]: file already exists\"", "loggerLevel": "info", "TemplatePattern": "Skipping compressing: [<P>]: file already exists"}
{"classname": "tools.CommonCrawlDataDumper", "TemplateID": 490, "logline": "\"Compressing: [\" + outputFullPath + \"]\"", "loggerLevel": "info", "TemplatePattern": "Compressing: [<P>]"}
{"classname": "tools.CommonCrawlDataDumper", "TemplateID": 491, "logline": "\"CommonsCrawlDataDumper File Stats: \" + DumpFileUtil.displayFileTypes(typeCounts, filteredCounts)", "loggerLevel": "info", "TemplatePattern": "CommonsCrawlDataDumper File Stats: <P>"}
{"classname": "tools.CommonCrawlDataDumper", "TemplateID": 492, "logline": "\"Error in closing stream: \" + ioe.getMessage()", "loggerLevel": "warn", "TemplatePattern": "Error in closing stream: <P>"}
{"classname": "tools.CommonCrawlDataDumper", "TemplateID": 493, "logline": "\"Creating a new gzip archive: \" + archiveName", "loggerLevel": "info", "TemplatePattern": "Creating a new gzip archive: <P>"}
{"classname": "tools.CommonCrawlDataDumper", "TemplateID": 494, "logline": "\"CBOR encoding failed: \" + e.getMessage()", "loggerLevel": "warn", "TemplatePattern": "CBOR encoding failed: <P>"}
{"classname": "tools.CommonCrawlDataDumper", "TemplateID": 495, "logline": "\"Failed to parse URL: {}\", urlString", "loggerLevel": "error", "TemplatePattern": "Failed to parse URL: {}<P>"}
{"classname": "tools.FileDumper", "TemplateID": 496, "logline": "\"Accepting all mimetypes.\"", "loggerLevel": "info", "TemplatePattern": "Accepting all mimetypes."}
{"classname": "tools.FileDumper", "TemplateID": 497, "logline": "\"No segment directories found in [\"  + segmentRootDir.getAbsolutePath() + \"]\"", "loggerLevel": "none", "TemplatePattern": "No segment directories found in [<P>]"}
{"classname": "tools.FileDumper", "TemplateID": 498, "logline": "\"Processing segment: [\" + segment.getAbsolutePath() + \"]\"", "loggerLevel": "info", "TemplatePattern": "Processing segment: [<P>]"}
{"classname": "tools.FileDumper", "TemplateID": 499, "logline": "\"Skipping segment: [\" + segmentPath  + \"]: no data directory present\"", "loggerLevel": "warn", "TemplatePattern": "Skipping segment: [<P>]: no data directory present"}
{"classname": "tools.FileDumper", "TemplateID": 500, "logline": "\"Tika is unable to detect type for: [\" + url + \"]\"", "loggerLevel": "warn", "TemplatePattern": "Tika is unable to detect type for: [<P>]"}
{"classname": "tools.FileDumper", "TemplateID": 501, "logline": "\"Writing: [\" + outputFullPath + \"]\"", "loggerLevel": "info", "TemplatePattern": "Writing: [<P>]"}
{"classname": "tools.FileDumper", "TemplateID": 502, "logline": "\"Skipping writing: [\" + outputFullPath  + \"]: file already exists\"", "loggerLevel": "info", "TemplatePattern": "Skipping writing: [<P>]: file already exists"}
{"classname": "tools.FileDumper", "TemplateID": 503, "logline": "\"Dumper File Stats: \"  + DumpFileUtil.displayFileTypes(typeCounts, filteredCounts)", "loggerLevel": "info", "TemplatePattern": "Dumper File Stats: <P>"}
{"classname": "tools.FileDumper", "TemplateID": 504, "logline": "\"Output directory: [\" + outputDir.getAbsolutePath()  + \"]: does not exist, creating it.\"", "loggerLevel": "warn", "TemplatePattern": "Output directory: [<P>]: does not exist, creating it."}
{"classname": "tools.FileDumper", "TemplateID": 505, "logline": "\"FileDumper: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "FileDumper: <P>"}
{"classname": "tools.FreeGenerator", "TemplateID": 506, "logline": "\"Error adding url '\" + value.toString() + \"', skipping: \"  + StringUtils.stringifyException(e)", "loggerLevel": "warn", "TemplatePattern": "Error adding url '<P>', skipping: <P>"}
{"classname": "tools.FreeGenerator", "TemplateID": 507, "logline": "\"- skipping \" + value.toString()", "loggerLevel": "debug", "TemplatePattern": "- skipping <P>"}
{"classname": "tools.FreeGenerator", "TemplateID": 508, "logline": "\"\\t-filter\\trun current URLFilters on input URLs\"", "loggerLevel": "none", "TemplatePattern": "\\t-filter\\trun current URLFilters on input URLs"}
{"classname": "tools.FreeGenerator", "TemplateID": 509, "logline": "\"Unknown argument: \" + args[i] + \", exiting ...\"", "loggerLevel": "error", "TemplatePattern": "Unknown argument: <P>, exiting ..."}
{"classname": "tools.FreeGenerator", "TemplateID": 510, "logline": "\"FreeGenerator: starting at \" + sdf.format(start)", "loggerLevel": "info", "TemplatePattern": "FreeGenerator: starting at <P>"}
{"classname": "tools.FreeGenerator", "TemplateID": 511, "logline": "\"FAILED: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "FAILED: <P>"}
{"classname": "tools.FreeGenerator", "TemplateID": 512, "logline": "\"FreeGenerator: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)", "loggerLevel": "info", "TemplatePattern": "FreeGenerator: finished at <P>, elapsed: <P>"}
{"classname": "tools.DmozParser", "TemplateID": 513, "logline": "curURL", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "tools.DmozParser", "TemplateID": 514, "logline": "\"Begin parse\"", "loggerLevel": "info", "TemplatePattern": "Begin parse"}
{"classname": "tools.DmozParser", "TemplateID": 515, "logline": "\"Completed parse.  Found \" + pages + \" pages.\"", "loggerLevel": "info", "TemplatePattern": "Completed parse.  Found <P> pages."}
{"classname": "tools.DmozParser", "TemplateID": 516, "logline": "\"Error: \" + spe.toString() + \": \" + spe.getMessage()", "loggerLevel": "error", "TemplatePattern": "Error: <P>: <P>"}
{"classname": "tools.DmozParser", "TemplateID": 517, "logline": "\"Fatal err: \" + spe.toString() + \": \" + spe.getMessage()", "loggerLevel": "error", "TemplatePattern": "Fatal err: <P>: <P>"}
{"classname": "tools.DmozParser", "TemplateID": 518, "logline": "\"Last known line is \" + location.getLineNumber()  + \", column \" + location.getColumnNumber()", "loggerLevel": "error", "TemplatePattern": "Last known line is <P>, column <P>"}
{"classname": "tools.DmozParser", "TemplateID": 519, "logline": "\"Warning: \" + spe.toString() + \": \" + spe.getMessage()", "loggerLevel": "warn", "TemplatePattern": "Warning: <P>: <P>"}
{"classname": "tools.DmozParser", "TemplateID": 520, "logline": "\"skew = \" + rp.hashSkew", "loggerLevel": "info", "TemplatePattern": "skew = <P>"}
{"classname": "tools.DmozParser", "TemplateID": 521, "logline": "e.toString()", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "tools.DmozParser", "TemplateID": 522, "logline": "e.toString()", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "tools.DmozParser", "TemplateID": 523, "logline": "\"Topic selection pattern = \" + regExp", "loggerLevel": "info", "TemplatePattern": "Topic selection pattern = <P>"}
{"classname": "util.PrefixStringMatcher", "TemplateID": 524, "logline": "\"testing: \" + tests[i]", "loggerLevel": "none", "TemplatePattern": "testing: <P>"}
{"classname": "util.PrefixStringMatcher", "TemplateID": 525, "logline": "\"   matches: \" + matcher.matches(tests[i])", "loggerLevel": "none", "TemplatePattern": "   matches: <P>"}
{"classname": "util.PrefixStringMatcher", "TemplateID": 526, "logline": "\"  shortest: \" + matcher.shortestMatch(tests[i])", "loggerLevel": "none", "TemplatePattern": "  shortest: <P>"}
{"classname": "util.PrefixStringMatcher", "TemplateID": 527, "logline": "\"   longest: \" + matcher.longestMatch(tests[i])", "loggerLevel": "none", "TemplatePattern": "   longest: <P>"}
{"classname": "util.CommandRunner", "TemplateID": 528, "logline": "usage", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "util.CommandRunner", "TemplateID": 529, "logline": "usage", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "util.CommandRunner", "TemplateID": 530, "logline": "\"output value: \" + cr.getExitValue()", "loggerLevel": "none", "TemplatePattern": "output value: <P>"}
{"classname": "util.DumpFileUtil", "TemplateID": 531, "logline": "\"Failed to create dir: {}\", fullDirPath", "loggerLevel": "error", "TemplatePattern": "Failed to create dir: {}<P>"}
{"classname": "util.DumpFileUtil", "TemplateID": 532, "logline": "\"File name is too long. Truncated to {} characters.\", MAX_LENGTH_OF_FILENAME", "loggerLevel": "info", "TemplatePattern": "File name is too long. Truncated to {} characters.<P>"}
{"classname": "util.DumpFileUtil", "TemplateID": 533, "logline": "\"File extension is too long. Truncated to {} characters.\", MAX_LENGTH_OF_EXTENSION", "loggerLevel": "info", "TemplatePattern": "File extension is too long. Truncated to {} characters.<P>"}
{"classname": "util.DumpFileUtil", "TemplateID": 534, "logline": "\"Failed to create dir: {}\", fullDirPath", "loggerLevel": "error", "TemplatePattern": "Failed to create dir: {}<P>"}
{"classname": "util.DumpFileUtil", "TemplateID": 535, "logline": "\"File extension is too long. Truncated to {} characters.\", MAX_LENGTH_OF_EXTENSION", "loggerLevel": "info", "TemplatePattern": "File extension is too long. Truncated to {} characters.<P>"}
{"classname": "util.URLUtil", "TemplateID": 536, "logline": "\"Usage : URLUtil <url>\"", "loggerLevel": "none", "TemplatePattern": "Usage : URLUtil <url>"}
{"classname": "util.URLUtil", "TemplateID": 537, "logline": "URLUtil.getDomainName(new URL(url))", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "util.SuffixStringMatcher", "TemplateID": 538, "logline": "\"testing: \" + tests[i]", "loggerLevel": "none", "TemplatePattern": "testing: <P>"}
{"classname": "util.SuffixStringMatcher", "TemplateID": 539, "logline": "\"   matches: \" + matcher.matches(tests[i])", "loggerLevel": "none", "TemplatePattern": "   matches: <P>"}
{"classname": "util.SuffixStringMatcher", "TemplateID": 540, "logline": "\"  shortest: \" + matcher.shortestMatch(tests[i])", "loggerLevel": "none", "TemplatePattern": "  shortest: <P>"}
{"classname": "util.SuffixStringMatcher", "TemplateID": 541, "logline": "\"   longest: \" + matcher.longestMatch(tests[i])", "loggerLevel": "none", "TemplatePattern": "   longest: <P>"}
{"classname": "util.GZIPUtils", "TemplateID": 542, "logline": "\"Error writing outStream: \", e", "loggerLevel": "error", "TemplatePattern": "Error writing outStream: <P>"}
{"classname": "util.GZIPUtils", "TemplateID": 543, "logline": "\"Error closing outStream: \", e", "loggerLevel": "error", "TemplatePattern": "Error closing outStream: <P>"}
{"classname": "util.GZIPUtils", "TemplateID": 544, "logline": "\"Error: \", e", "loggerLevel": "error", "TemplatePattern": "Error: <P>"}
{"classname": "util.EncodingDetector", "TemplateID": 545, "logline": "\"Exception from ICU4J (ignoring): \", e", "loggerLevel": "debug", "TemplatePattern": "Exception from ICU4J (ignoring): <P>"}
{"classname": "util.EncodingDetector", "TemplateID": 546, "logline": "base + \": charset \" + clue", "loggerLevel": "trace", "TemplatePattern": "<P> : charset <P>"}
{"classname": "util.EncodingDetector", "TemplateID": 547, "logline": "base + \": Choosing encoding: \" + charset  + \" with confidence \" + clue.confidence", "loggerLevel": "trace", "TemplatePattern": "<P> : Choosing encoding: <P> with confidence <P>"}
{"classname": "util.EncodingDetector", "TemplateID": 548, "logline": "base + \": Choosing encoding: \" + bestClue", "loggerLevel": "trace", "TemplatePattern": "<P> : Choosing encoding: <P>"}
{"classname": "util.EncodingDetector", "TemplateID": 549, "logline": "sb.toString()", "loggerLevel": "trace", "TemplatePattern": "<P> "}
{"classname": "util.EncodingDetector", "TemplateID": 550, "logline": "\"Invalid encoding \" + encoding + \" detected, using default.\"", "loggerLevel": "warn", "TemplatePattern": "Invalid encoding <P> detected, using default."}
{"classname": "util.EncodingDetector", "TemplateID": 551, "logline": "\"Usage: EncodingDetector <file>\"", "loggerLevel": "none", "TemplatePattern": "Usage: EncodingDetector <file>"}
{"classname": "util.EncodingDetector", "TemplateID": 552, "logline": "\"Guessed encoding: \" + encoding", "loggerLevel": "none", "TemplatePattern": "Guessed encoding: <P>"}
{"classname": "util.MimeUtil", "TemplateID": 553, "logline": "\">>\"+customMimeTypeFile", "loggerLevel": "warn", "TemplatePattern": ">><P>"}
{"classname": "util.MimeUtil", "TemplateID": 554, "logline": "customMimeTypeFile", "loggerLevel": "warn", "TemplatePattern": "<P> "}
{"classname": "util.MimeUtil", "TemplateID": 555, "logline": "\"Can't load mime.types.file : \" + customMimeTypeFile  + \" using Tika's default\"", "loggerLevel": "error", "TemplatePattern": "Can't load mime.types.file : <P> using Tika's default"}
{"classname": "util.MimeUtil", "TemplateID": 556, "logline": "\"Exception in MimeUtil \" + e.getMessage()", "loggerLevel": "error", "TemplatePattern": "Exception in MimeUtil <P>"}
{"classname": "util.MimeUtil", "TemplateID": 557, "logline": "message, e", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "util.MimeUtil", "TemplateID": 558, "logline": "\"Exception getting mime type by name: [\" + name  + \"]: Message: \" + e.getMessage()", "loggerLevel": "error", "TemplatePattern": "Exception getting mime type by name: [<P>]: Message: <P>"}
{"classname": "util.MimeUtil", "TemplateID": 559, "logline": "\"Exception getting mime type for file: [\" + f.getPath()  + \"]: Message: \" + e.getMessage()", "loggerLevel": "error", "TemplatePattern": "Exception getting mime type for file: [<P>]: Message: <P>"}
{"classname": "util.ObjectCache", "TemplateID": 560, "logline": "\"No object cache found for conf=\" + conf  + \", instantiating a new object cache\"", "loggerLevel": "debug", "TemplatePattern": "No object cache found for conf=<P>, instantiating a new object cache"}
{"classname": "util.DomUtil", "TemplateID": 561, "logline": "\"Error: \", e", "loggerLevel": "error", "TemplatePattern": "Error: <P>"}
{"classname": "util.DomUtil", "TemplateID": 562, "logline": "\"Error: \", e", "loggerLevel": "error", "TemplatePattern": "Error: <P>"}
{"classname": "util.DomUtil", "TemplateID": 563, "logline": "\"Error: \", e", "loggerLevel": "error", "TemplatePattern": "Error: <P>"}
{"classname": "util.DomUtil", "TemplateID": 564, "logline": "\"Error: \", e1", "loggerLevel": "error", "TemplatePattern": "Error: <P>"}
{"classname": "util.DomUtil", "TemplateID": 565, "logline": "\"Error: \", e1", "loggerLevel": "error", "TemplatePattern": "Error: <P>"}
{"classname": "util.DomUtil", "TemplateID": 566, "logline": "\"Error: \", e2", "loggerLevel": "error", "TemplatePattern": "Error: <P>"}
{"classname": "util.DomUtil", "TemplateID": 567, "logline": "\"Error: \", ex", "loggerLevel": "error", "TemplatePattern": "Error: <P>"}
{"classname": "util.StringUtil", "TemplateID": 568, "logline": "\"Usage: StringUtil <encoding name>\"", "loggerLevel": "none", "TemplatePattern": "Usage: StringUtil <encoding name>"}
{"classname": "util.StringUtil", "TemplateID": 569, "logline": "args[0] + \" is resolved to \"  + EncodingDetector.resolveEncodingAlias(args[0])", "loggerLevel": "none", "TemplatePattern": "<P>  is resolved to <P>"}
{"classname": "domain.DomainStatistics", "TemplateID": 570, "logline": "\"DomainStatistics: starting at \" + sdf.format(start)", "loggerLevel": "info", "TemplatePattern": "DomainStatistics: starting at <P>"}
{"classname": "domain.DomainStatistics", "TemplateID": 571, "logline": "\"DomainStatistics: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)", "loggerLevel": "info", "TemplatePattern": "DomainStatistics: finished at <P>, elapsed: <P>"}
{"classname": "domain.DomainStatistics", "TemplateID": 572, "logline": "\"url : \" + url", "loggerLevel": "info", "TemplatePattern": "url : <P>"}
{"classname": "domain.DomainSuffixesReader", "TemplateID": 573, "logline": "StringUtils.stringifyException(ex)", "loggerLevel": "warn", "TemplatePattern": "<P> "}
{"classname": "domain.DomainSuffixesReader", "TemplateID": 574, "logline": "StringUtils.stringifyException(ex)", "loggerLevel": "warn", "TemplatePattern": "<P> "}
{"classname": "domain.DomainSuffixes", "TemplateID": 575, "logline": "StringUtils.stringifyException(ex)", "loggerLevel": "warn", "TemplatePattern": "<P> "}
{"classname": "util.DeflateUtils", "TemplateID": 576, "logline": "\"Caught Exception in inflateBestEffort\", e", "loggerLevel": "info", "TemplatePattern": "Caught Exception in inflateBestEffort<P>"}
{"classname": "util.DeflateUtils", "TemplateID": 577, "logline": "\"Error compressing: \", e", "loggerLevel": "error", "TemplatePattern": "Error compressing: <P>"}
{"classname": "util.DeflateUtils", "TemplateID": 578, "logline": "\"Error closing: \", e", "loggerLevel": "error", "TemplatePattern": "Error closing: <P>"}
{"classname": "parse.ParseData", "TemplateID": 579, "logline": "\"usage:\" + usage", "loggerLevel": "none", "TemplatePattern": "usage:<P>"}
{"classname": "parse.ParseData", "TemplateID": 580, "logline": "\"Reading from file: \" + file", "loggerLevel": "none", "TemplatePattern": "Reading from file: <P>"}
{"classname": "parse.ParseData", "TemplateID": 581, "logline": "\"Retrieved \" + recno + \" from file \" + file", "loggerLevel": "none", "TemplatePattern": "Retrieved <P> from file <P>"}
{"classname": "parse.ParseData", "TemplateID": 582, "logline": "parseDatum", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "parse.ParseText", "TemplateID": 583, "logline": "\"usage:\" + usage", "loggerLevel": "none", "TemplatePattern": "usage:<P>"}
{"classname": "parse.ParseText", "TemplateID": 584, "logline": "\"Retrieved \" + recno + \" from file \" + filename", "loggerLevel": "none", "TemplatePattern": "Retrieved <P> from file <P>"}
{"classname": "parse.ParseText", "TemplateID": 585, "logline": "parseText", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "parse.ParseSegment", "TemplateID": 586, "logline": "\"Skipping \" + key + \" as content is not fetched successfully\"", "loggerLevel": "debug", "TemplatePattern": "Skipping <P> as content is not fetched successfully"}
{"classname": "parse.ParseSegment", "TemplateID": 587, "logline": "\"Error parsing: \" + key + \": \"  + StringUtils.stringifyException(e)", "loggerLevel": "warn", "TemplatePattern": "Error parsing: <P>: <P>"}
{"classname": "parse.ParseSegment", "TemplateID": 588, "logline": "\"Error parsing: \" + key + \": \" + parseStatus", "loggerLevel": "warn", "TemplatePattern": "Error parsing: <P>: <P>"}
{"classname": "parse.ParseSegment", "TemplateID": 589, "logline": "\"Error passing score: \" + url + \": \" + e.getMessage()", "loggerLevel": "warn", "TemplatePattern": "Error passing score: <P>: <P>"}
{"classname": "parse.ParseSegment", "TemplateID": 590, "logline": "\"Parsed (\" + Long.toString(end - start) + \"ms):\" + url", "loggerLevel": "info", "TemplatePattern": "Parsed (<P>ms):<P>"}
{"classname": "parse.ParseSegment", "TemplateID": 591, "logline": "\"Wrong contentlength format for \" + url, e", "loggerLevel": "warn", "TemplatePattern": "Wrong contentlength format for <P>"}
{"classname": "parse.ParseSegment", "TemplateID": 592, "logline": "url + \" skipped. Content of size \" + inHeaderSize  + \" was truncated to \" + actualSize", "loggerLevel": "info", "TemplatePattern": "<P>  skipped. Content of size <P> was truncated to <P>"}
{"classname": "parse.ParseSegment", "TemplateID": 593, "logline": "url + \" actualSize=\" + actualSize + \" inHeaderSize=\"  + inHeaderSize", "loggerLevel": "debug", "TemplatePattern": "<P>  actualSize=<P> inHeaderSize=<P>"}
{"classname": "parse.ParseSegment", "TemplateID": 594, "logline": "\"ParseSegment: starting at \" + sdf.format(start)", "loggerLevel": "info", "TemplatePattern": "ParseSegment: starting at <P>"}
{"classname": "parse.ParseSegment", "TemplateID": 595, "logline": "\"ParseSegment: segment: \" + segment", "loggerLevel": "info", "TemplatePattern": "ParseSegment: segment: <P>"}
{"classname": "parse.ParseSegment", "TemplateID": 596, "logline": "\"ParseSegment: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)", "loggerLevel": "info", "TemplatePattern": "ParseSegment: finished at <P>, elapsed: <P>"}
{"classname": "parse.ParseSegment", "TemplateID": 597, "logline": "usage", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "parse.OutlinkExtractor", "TemplateID": 598, "logline": "\"Time limit exceeded for getOutLinks\"", "loggerLevel": "warn", "TemplatePattern": "Time limit exceeded for getOutLinks"}
{"classname": "parse.OutlinkExtractor", "TemplateID": 599, "logline": "\"Invalid url: '\" + url + \"', skipping.\"", "loggerLevel": "warn", "TemplatePattern": "Invalid url: '<P>', skipping."}
{"classname": "parse.OutlinkExtractor", "TemplateID": 600, "logline": "\"getOutlinks\", ex", "loggerLevel": "error", "TemplatePattern": "getOutlinks<P>"}
{"classname": "parse.ParseResult", "TemplateID": 601, "logline": "entry.getKey() + \" is not parsed successfully, filtering\"", "loggerLevel": "warn", "TemplatePattern": "<P>  is not parsed successfully, filtering"}
{"classname": "parse.ParserChecker", "TemplateID": 602, "logline": "usage", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "parse.ParserChecker", "TemplateID": 603, "logline": "usage", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "parse.ParserChecker", "TemplateID": 604, "logline": "\"fetching: \" + url", "loggerLevel": "info", "TemplatePattern": "fetching: <P>"}
{"classname": "parse.ParserChecker", "TemplateID": 605, "logline": "\"Handling redirect to \" + newURL", "loggerLevel": "info", "TemplatePattern": "Handling redirect to <P>"}
{"classname": "parse.ParserChecker", "TemplateID": 606, "logline": "\"Fetch failed with protocol status: \"  + output.getStatus()", "loggerLevel": "none", "TemplatePattern": "Fetch failed with protocol status: <P>"}
{"classname": "parse.ParserChecker", "TemplateID": 607, "logline": "\"Redirect(s) not handled due to configuration.\"", "loggerLevel": "none", "TemplatePattern": "Redirect(s) not handled due to configuration."}
{"classname": "parse.ParserChecker", "TemplateID": 608, "logline": "\"Max Redirects to handle per config: \" + maxRedirects", "loggerLevel": "none", "TemplatePattern": "Max Redirects to handle per config: <P>"}
{"classname": "parse.ParserChecker", "TemplateID": 609, "logline": "\"Number of Redirects handled: \" + numRedirects", "loggerLevel": "none", "TemplatePattern": "Number of Redirects handled: <P>"}
{"classname": "parse.ParserChecker", "TemplateID": 610, "logline": "\"No content for \" + url", "loggerLevel": "error", "TemplatePattern": "No content for <P>"}
{"classname": "parse.ParserChecker", "TemplateID": 611, "logline": "\"Failed to determine content type!\"", "loggerLevel": "error", "TemplatePattern": "Failed to determine content type!"}
{"classname": "parse.ParserChecker", "TemplateID": 612, "logline": "\"Content is truncated, parse may fail!\"", "loggerLevel": "warn", "TemplatePattern": "Content is truncated, parse may fail!"}
{"classname": "parse.ParserChecker", "TemplateID": 613, "logline": "\"Couldn't pass score before parsing, url \" + turl + \" (\" + e  + \")\"", "loggerLevel": "warn", "TemplatePattern": "Couldn't pass score before parsing, url <P> (<P>)"}
{"classname": "parse.ParserChecker", "TemplateID": 614, "logline": "StringUtils.stringifyException(e)", "loggerLevel": "warn", "TemplatePattern": "<P> "}
{"classname": "parse.ParserChecker", "TemplateID": 615, "logline": "\"Parsing content failed!\"", "loggerLevel": "error", "TemplatePattern": "Parsing content failed!"}
{"classname": "parse.ParserChecker", "TemplateID": 616, "logline": "\"parsing: \" + url", "loggerLevel": "info", "TemplatePattern": "parsing: <P>"}
{"classname": "parse.ParserChecker", "TemplateID": 617, "logline": "\"contentType: \" + contentType", "loggerLevel": "info", "TemplatePattern": "contentType: <P>"}
{"classname": "parse.ParserChecker", "TemplateID": 618, "logline": "\"signature: \" + StringUtil.toHexString(signature)", "loggerLevel": "info", "TemplatePattern": "signature: <P>"}
{"classname": "parse.ParserChecker", "TemplateID": 619, "logline": "\"Failed to get parse from parse result\"", "loggerLevel": "error", "TemplatePattern": "Failed to get parse from parse result"}
{"classname": "parse.ParserChecker", "TemplateID": 620, "logline": "\"Available parses in parse result (by URL key):\"", "loggerLevel": "error", "TemplatePattern": "Available parses in parse result (by URL key):"}
{"classname": "parse.ParserChecker", "TemplateID": 621, "logline": "\"  \" + entry.getKey()", "loggerLevel": "error", "TemplatePattern": "  <P>"}
{"classname": "parse.ParserChecker", "TemplateID": 622, "logline": "\"Parse result does not contain a parse for URL to be checked:\"", "loggerLevel": "error", "TemplatePattern": "Parse result does not contain a parse for URL to be checked:"}
{"classname": "parse.ParserChecker", "TemplateID": 623, "logline": "\"  \" + turl", "loggerLevel": "error", "TemplatePattern": "  <P>"}
{"classname": "parse.ParserChecker", "TemplateID": 624, "logline": "\"Couldn't pass score after parsing, url \" + turl + \" (\" + e  + \")\"", "loggerLevel": "warn", "TemplatePattern": "Couldn't pass score after parsing, url <P> (<P>)"}
{"classname": "parse.ParserChecker", "TemplateID": 625, "logline": "StringUtils.stringifyException(e)", "loggerLevel": "warn", "TemplatePattern": "<P> "}
{"classname": "parse.ParserChecker", "TemplateID": 626, "logline": "\"---------\\nUrl\\n---------------\\n\"", "loggerLevel": "info", "TemplatePattern": "---------\\nUrl\\n---------------\\n"}
{"classname": "parse.ParserChecker", "TemplateID": 627, "logline": "entry.getKey()", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "parse.ParserChecker", "TemplateID": 628, "logline": "\"\\n---------\\nParseData\\n---------\\n\"", "loggerLevel": "info", "TemplatePattern": "\\n---------\\nParseData\\n---------\\n"}
{"classname": "parse.ParserChecker", "TemplateID": 629, "logline": "parse.getData().toString()", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "parse.ParserChecker", "TemplateID": 630, "logline": "\"---------\\nParseText\\n---------\\n\"", "loggerLevel": "info", "TemplatePattern": "---------\\nParseText\\n---------\\n"}
{"classname": "parse.ParserChecker", "TemplateID": 631, "logline": "parse.getText()", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "parse.ParseOutputFormat", "TemplateID": 632, "logline": "\"Cannot filter init score for url \" + key  + \", using default: \" + e.getMessage()", "loggerLevel": "warn", "TemplatePattern": "Cannot filter init score for url <P>, using default: <P>"}
{"classname": "parse.ParseOutputFormat", "TemplateID": 633, "logline": "\"Cannot distribute score from \" + key + \": \"  + e.getMessage()", "loggerLevel": "warn", "TemplatePattern": "Cannot distribute score from <P>: <P>"}
{"classname": "parse.ParseOutputFormat", "TemplateID": 634, "logline": "\"Can't read fetch time for: \" + key", "loggerLevel": "warn", "TemplatePattern": "Can't read fetch time for: <P>"}
{"classname": "parse.ParserFactory", "TemplateID": 635, "logline": "\"ParserFactory:PluginRuntimeException when \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/parse/ParserFactory.java-              + \"initializing parser plugin \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/parse/ParserFactory.java-              + ext.getDescriptor().getPluginId() + \" instance in getParsers \"  + \"function: attempting to continue instantiating parsers\"", "loggerLevel": "warn", "TemplatePattern": "ParserFactory:PluginRuntimeException when <P>initializing parser plugin <P> instance in getParsers <P>function: attempting to continue instantiating parsers"}
{"classname": "parse.ParserFactory", "TemplateID": 636, "logline": "\"Canno initialize parser \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/parse/ParserFactory.java-              + parserExt.getDescriptor().getPluginId() + \" (cause: \"  + e.toString()", "loggerLevel": "warn", "TemplatePattern": "Canno initialize parser <P> (cause: <P>"}
{"classname": "parse.ParserFactory", "TemplateID": 637, "logline": "\"ParserFactory:Plugin: \" + parsePluginId  /root/nutch-git-source/nutch/src/java/org/apache/nutch/parse/ParserFactory.java-                  + \" mapped to contentType \" + contentType  /root/nutch-git-source/nutch/src/java/org/apache/nutch/parse/ParserFactory.java-                  + \" via parse-plugins.xml, but \" + \"its plugin.xml \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/parse/ParserFactory.java-                  + \"file does not claim to support contentType: \"  + contentType", "loggerLevel": "warn", "TemplatePattern": "ParserFactory:Plugin: <P> mapped to contentType <P> via parse-plugins.xml, but <P>its plugin.xml <P>file does not claim to support contentType: <P>"}
{"classname": "parse.ParserFactory", "TemplateID": 638, "logline": "\"ParserFactory: Plugin: \" + parsePluginId  /root/nutch-git-source/nutch/src/java/org/apache/nutch/parse/ParserFactory.java-                  + \" mapped to contentType \" + contentType  /root/nutch-git-source/nutch/src/java/org/apache/nutch/parse/ParserFactory.java-                  + \" via parse-plugins.xml, but not enabled via \"  + \"plugin.includes in nutch-default.xml\"", "loggerLevel": "warn", "TemplatePattern": "ParserFactory: Plugin: <P> mapped to contentType <P> via parse-plugins.xml, but not enabled via <P>plugin.includes in nutch-default.xml"}
{"classname": "parse.ParserFactory", "TemplateID": 639, "logline": "\"The parsing plugins: \" + extensionsIDs.toString()  /root/nutch-git-source/nutch/src/java/org/apache/nutch/parse/ParserFactory.java-              + \" are enabled via the plugin.includes system \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/parse/ParserFactory.java-              + \"property, and all claim to support the content type \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/parse/ParserFactory.java-              + contentType + \", but they are not mapped to it  in the \"  + \"parse-plugins.xml file\"", "loggerLevel": "info", "TemplatePattern": "The parsing plugins: <P> are enabled via the plugin.includes system <P>property, and all claim to support the content type <P>, but they are not mapped to it  in the <P>parse-plugins.xml file"}
{"classname": "parse.ParsePluginsReader", "TemplateID": 640, "logline": "\"Unable to load parse plugins file from URL \" + \"[\"  + fParsePluginsFile + \"]. Reason is [\" + e + \"]\"", "loggerLevel": "warn", "TemplatePattern": "Unable to load parse plugins file from URL <P>[<P>]. Reason is [<P>]"}
{"classname": "parse.ParsePluginsReader", "TemplateID": 641, "logline": "\"Unable to parse [\" + fParsePluginsFile + \"].\" + \"Reason is [\"  + e + \"]\"", "loggerLevel": "warn", "TemplatePattern": "Unable to parse [<P>].<P>Reason is [<P>]"}
{"classname": "parse.ParsePluginsReader", "TemplateID": 642, "logline": "\"ParsePluginsReader:ERROR:no plugins defined for mime type: \"  + mimeTypeStr + \", continuing parse\"", "loggerLevel": "warn", "TemplatePattern": "ParsePluginsReader:ERROR:no plugins defined for mime type: <P>, continuing parse"}
{"classname": "parse.ParsePluginsReader", "TemplateID": 643, "logline": "usage", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "parse.ParsePluginsReader", "TemplateID": 644, "logline": "\"MIMETYPE: \" + mimeType", "loggerLevel": "none", "TemplatePattern": "MIMETYPE: <P>"}
{"classname": "parse.ParsePluginsReader", "TemplateID": 645, "logline": "\"EXTENSION IDs:\"", "loggerLevel": "none", "TemplatePattern": "EXTENSION IDs:"}
{"classname": "parse.ParsePluginsReader", "TemplateID": 646, "logline": "j", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "parse.ParsePluginsReader", "TemplateID": 647, "logline": "\"No aliases defined in parse-plugins.xml!\"", "loggerLevel": "warn", "TemplatePattern": "No aliases defined in parse-plugins.xml!"}
{"classname": "parse.ParsePluginsReader", "TemplateID": 648, "logline": "\"There should only be one \\\"aliases\\\" tag in parse-plugins.xml\"", "loggerLevel": "warn", "TemplatePattern": "There should only be one \\<P> tag in parse-plugins.xml"}
{"classname": "parse.ParsePluginsReader", "TemplateID": 649, "logline": "\"Found alias: plugin-id: \" + parsePluginId  + \", extension-id: \" + extensionId", "loggerLevel": "trace", "TemplatePattern": "Found alias: plugin-id: <P>, extension-id: <P>"}
{"classname": "parse.ParseUtil", "TemplateID": 650, "logline": "\"No suitable parser found when trying to parse content \"  + content.getUrl() + \" of type \" + content.getContentType()", "loggerLevel": "warn", "TemplatePattern": "No suitable parser found when trying to parse content <P> of type <P>"}
{"classname": "parse.ParseUtil", "TemplateID": 651, "logline": "\"Parsing [\" + content.getUrl() + \"] with [\" + parsers[i]  + \"]\"", "loggerLevel": "debug", "TemplatePattern": "Parsing [<P>] with [<P>]"}
{"classname": "parse.ParseUtil", "TemplateID": 652, "logline": "\"Unable to successfully parse content \" + content.getUrl()  + \" of type \" + content.getContentType()", "loggerLevel": "warn", "TemplatePattern": "Unable to successfully parse content <P> of type <P>"}
{"classname": "parse.ParseUtil", "TemplateID": 653, "logline": "\"No suitable parser found when trying to parse content \"  + content.getUrl() + \" of type \" + content.getContentType()", "loggerLevel": "warn", "TemplatePattern": "No suitable parser found when trying to parse content <P> of type <P>"}
{"classname": "parse.ParseUtil", "TemplateID": 654, "logline": "\"Unable to successfully parse content \" + content.getUrl()  + \" of type \" + content.getContentType()", "loggerLevel": "warn", "TemplatePattern": "Unable to successfully parse content <P> of type <P>"}
{"classname": "parse.ParseUtil", "TemplateID": 655, "logline": "\"Error parsing \" + content.getUrl() + \" with \" + p, e", "loggerLevel": "warn", "TemplatePattern": "Error parsing <P> with <P>"}
{"classname": "protocol.Content", "TemplateID": 656, "logline": "\"usage:\" + usage", "loggerLevel": "none", "TemplatePattern": "usage:<P>"}
{"classname": "protocol.Content", "TemplateID": 657, "logline": "\"Reading from file: \" + file", "loggerLevel": "none", "TemplatePattern": "Reading from file: <P>"}
{"classname": "protocol.Content", "TemplateID": 658, "logline": "\"Retrieved \" + recno + \" from file \" + file", "loggerLevel": "none", "TemplatePattern": "Retrieved <P> from file <P>"}
{"classname": "protocol.Content", "TemplateID": 659, "logline": "content", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "protocol.RobotRulesParser", "TemplateID": 660, "logline": "\"\\tcomma as a delimiter without any spaces.\"", "loggerLevel": "none", "TemplatePattern": "\\tcomma as a delimiter without any spaces."}
{"classname": "protocol.RobotRulesParser", "TemplateID": 661, "logline": "(rules.isAllowed(testPath) ? \"allowed\"  : \"not allowed\") + \":\\t\" + testPath", "loggerLevel": "none", "TemplatePattern": "<P>  <P>allowed<P>"}
{"classname": "protocol.RobotRulesParser", "TemplateID": 662, "logline": "(rules.isAllowed(testPath) ? \"allowed\"  : \"not allowed\") + \":\\t\" + testPath", "loggerLevel": "none", "TemplatePattern": "<P>  <P>not allowed<P>:\\t<P>"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 663, "logline": "\"CrawlDb statistics start: \" + crawlDb", "loggerLevel": "info", "TemplatePattern": "CrawlDb statistics start: <P>"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 664, "logline": "\"Statistics for CrawlDb: \" + crawlDb", "loggerLevel": "info", "TemplatePattern": "Statistics for CrawlDb: <P>"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 665, "logline": "\"TOTAL urls:\\t\" + totalCnt.get()", "loggerLevel": "info", "TemplatePattern": "TOTAL urls:\\t<P>"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 666, "logline": "\"min score:\\t\" + (val.get() / 1000.0f)", "loggerLevel": "info", "TemplatePattern": "min score:\\t<P>"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 667, "logline": "\"max score:\\t\" + (val.get() / 1000.0f)", "loggerLevel": "info", "TemplatePattern": "max score:\\t<P>"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 668, "logline": "\"avg score:\\t\"  + (float) ((((double) val.get()) / totalCnt.get()) / 1000.0)", "loggerLevel": "info", "TemplatePattern": "avg score:\\t<P>"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 669, "logline": "\"   \" + st[2] + \" :\\t\" + val", "loggerLevel": "info", "TemplatePattern": "   <P> :\\t<P>"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 670, "logline": "st[0] + \" \" + code + \" (\"  + CrawlDatum.getStatusName((byte) code) + \"):\\t\" + val", "loggerLevel": "info", "TemplatePattern": "<P>  <P> (<P>):\\t<P>"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 671, "logline": "k + \":\\t\" + val", "loggerLevel": "info", "TemplatePattern": "<P> :\\t<P>"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 672, "logline": "\"CrawlDb statistics: done\"", "loggerLevel": "info", "TemplatePattern": "CrawlDb statistics: done"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 673, "logline": "\"URL: \" + url", "loggerLevel": "none", "TemplatePattern": "URL: <P>"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 674, "logline": "res", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "crawl.CrawlDbReader", "TemplateID": 675, "logline": "\"not found\"", "loggerLevel": "none", "TemplatePattern": "not found"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 676, "logline": "\"CrawlDb dump: starting\"", "loggerLevel": "info", "TemplatePattern": "CrawlDb dump: starting"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 677, "logline": "\"CrawlDb db: \" + crawlDb", "loggerLevel": "info", "TemplatePattern": "CrawlDb db: <P>"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 678, "logline": "\"CrawlDb dump: done\"", "loggerLevel": "info", "TemplatePattern": "CrawlDb dump: done"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 679, "logline": "\"CrawlDb topN: starting (topN=\" + topN + \", min=\" + min + \")\"", "loggerLevel": "info", "TemplatePattern": "CrawlDb topN: starting (topN=<P>, min=<P>)"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 680, "logline": "\"CrawlDb db: \" + crawlDb", "loggerLevel": "info", "TemplatePattern": "CrawlDb db: <P>"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 681, "logline": "\"CrawlDb topN: collecting topN scores.\"", "loggerLevel": "info", "TemplatePattern": "CrawlDb topN: collecting topN scores."}
{"classname": "crawl.CrawlDbReader", "TemplateID": 682, "logline": "\"CrawlDb topN: done\"", "loggerLevel": "info", "TemplatePattern": "CrawlDb topN: done"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 683, "logline": "\"\\t\\t[-sort]\\tlist status sorted by host\"", "loggerLevel": "none", "TemplatePattern": "\\t\\t[-sort]\\tlist status sorted by host"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 684, "logline": "\"\\t\\t[-format csv]\\tdump in Csv format\"", "loggerLevel": "none", "TemplatePattern": "\\t\\t[-format csv]\\tdump in Csv format"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 685, "logline": "\"\\t\\t[-format crawldb]\\tdump as CrawlDB\"", "loggerLevel": "none", "TemplatePattern": "\\t\\t[-format crawldb]\\tdump as CrawlDB"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 686, "logline": "\"\\t\\t[-regex <expr>]\\tfilter records with expression\"", "loggerLevel": "none", "TemplatePattern": "\\t\\t[-regex <expr>]\\tfilter records with expression"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 687, "logline": "\"\\t\\t[-retry <num>]\\tminimum retry count\"", "loggerLevel": "none", "TemplatePattern": "\\t\\t[-retry <num>]\\tminimum retry count"}
{"classname": "crawl.CrawlDbReader", "TemplateID": 688, "logline": "\"\\t\\t\\tThis can significantly improve performance.\"", "loggerLevel": "none", "TemplatePattern": "\\t\\t\\tThis can significantly improve performance."}
{"classname": "crawl.CrawlDbReader", "TemplateID": 689, "logline": "\"\\nError: wrong argument \" + args[i]", "loggerLevel": "none", "TemplatePattern": "\\nError: wrong argument <P>"}
{"classname": "crawl.Injector", "TemplateID": 690, "logline": "\"Skipping \" + url + \":\" + e", "loggerLevel": "warn", "TemplatePattern": "Skipping <P>:<P>"}
{"classname": "crawl.Injector", "TemplateID": 691, "logline": "\"Cannot filter injected score for url \" + url  + \", using default (\" + e.getMessage() + \")\"", "loggerLevel": "warn", "TemplatePattern": "Cannot filter injected score for url <P>, using default (<P>)"}
{"classname": "crawl.Injector", "TemplateID": 692, "logline": "\"Injector: overwrite: \" + overwrite", "loggerLevel": "info", "TemplatePattern": "Injector: overwrite: <P>"}
{"classname": "crawl.Injector", "TemplateID": 693, "logline": "\"Injector: update: \" + update", "loggerLevel": "info", "TemplatePattern": "Injector: update: <P>"}
{"classname": "crawl.Injector", "TemplateID": 694, "logline": "\"Injector: starting at \" + sdf.format(start)", "loggerLevel": "info", "TemplatePattern": "Injector: starting at <P>"}
{"classname": "crawl.Injector", "TemplateID": 695, "logline": "\"Injector: crawlDb: \" + crawlDb", "loggerLevel": "info", "TemplatePattern": "Injector: crawlDb: <P>"}
{"classname": "crawl.Injector", "TemplateID": 696, "logline": "\"Injector: urlDir: \" + urlDir", "loggerLevel": "info", "TemplatePattern": "Injector: urlDir: <P>"}
{"classname": "crawl.Injector", "TemplateID": 697, "logline": "\"Injector: Converting injected urls to crawl db entries.\"", "loggerLevel": "info", "TemplatePattern": "Injector: Converting injected urls to crawl db entries."}
{"classname": "crawl.Injector", "TemplateID": 698, "logline": "\"Injector: Total number of urls rejected by filters: \"  + urlsFiltered", "loggerLevel": "info", "TemplatePattern": "Injector: Total number of urls rejected by filters: <P>"}
{"classname": "crawl.Injector", "TemplateID": 699, "logline": "\"Injector: Total number of urls after normalization: \"  + urlsInjected", "loggerLevel": "info", "TemplatePattern": "Injector: Total number of urls after normalization: <P>"}
{"classname": "crawl.Injector", "TemplateID": 700, "logline": "\"Injector: Merging injected urls into crawl db.\"", "loggerLevel": "info", "TemplatePattern": "Injector: Merging injected urls into crawl db."}
{"classname": "crawl.Injector", "TemplateID": 701, "logline": "\"Injector: URLs merged: \" + urlsMerged", "loggerLevel": "info", "TemplatePattern": "Injector: URLs merged: <P>"}
{"classname": "crawl.Injector", "TemplateID": 702, "logline": "\"Injector: Total new urls injected: \"  + (urlsInjected - urlsMerged)", "loggerLevel": "info", "TemplatePattern": "Injector: Total new urls injected: <P>"}
{"classname": "crawl.Injector", "TemplateID": 703, "logline": "\"Injector: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)", "loggerLevel": "info", "TemplatePattern": "Injector: finished at <P>, elapsed: <P>"}
{"classname": "crawl.Injector", "TemplateID": 704, "logline": "\"Usage: Injector <crawldb> <url_dir>\"", "loggerLevel": "none", "TemplatePattern": "Usage: Injector <crawldb> <url_dir>"}
{"classname": "crawl.Injector", "TemplateID": 705, "logline": "\"Injector: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "Injector: <P>"}
{"classname": "crawl.CrawlDbFilter", "TemplateID": 706, "logline": "\"Skipping \" + url + \":\" + e", "loggerLevel": "warn", "TemplatePattern": "Skipping <P>:<P>"}
{"classname": "crawl.CrawlDbFilter", "TemplateID": 707, "logline": "\"Skipping \" + url + \":\" + e", "loggerLevel": "warn", "TemplatePattern": "Skipping <P>:<P>"}
{"classname": "crawl.AbstractFetchSchedule", "TemplateID": 708, "logline": "\"defaultInterval=\" + defaultInterval", "loggerLevel": "info", "TemplatePattern": "defaultInterval=<P>"}
{"classname": "crawl.AbstractFetchSchedule", "TemplateID": 709, "logline": "\"maxInterval=\" + maxInterval", "loggerLevel": "info", "TemplatePattern": "maxInterval=<P>"}
{"classname": "crawl.FetchScheduleFactory", "TemplateID": 710, "logline": "\"Using FetchSchedule impl: \" + clazz", "loggerLevel": "info", "TemplatePattern": "Using FetchSchedule impl: <P>"}
{"classname": "crawl.CrawlDbReducer", "TemplateID": 711, "logline": "\"Unknown status, key: \" + key + \", datum: \" + datum", "loggerLevel": "warn", "TemplatePattern": "Unknown status, key: <P>, datum: <P>"}
{"classname": "crawl.CrawlDbReducer", "TemplateID": 712, "logline": "\"Missing fetch and old value, signature=\" + signature", "loggerLevel": "warn", "TemplatePattern": "Missing fetch and old value, signature=<P>"}
{"classname": "crawl.CrawlDbReducer", "TemplateID": 713, "logline": "\"Cannot filter init score for url \" + key  + \", using default: \" + e.getMessage()", "loggerLevel": "warn", "TemplatePattern": "Cannot filter init score for url <P>, using default: <P>"}
{"classname": "crawl.CrawlDbReducer", "TemplateID": 714, "logline": "\"Unexpected status: \" + fetch.getStatus()  + \" resetting to old status.\"", "loggerLevel": "warn", "TemplatePattern": "Unexpected status: <P> resetting to old status."}
{"classname": "crawl.CrawlDbReducer", "TemplateID": 715, "logline": "\"Lone CrawlDatum.STATUS_SIGNATURE: \" + key", "loggerLevel": "warn", "TemplatePattern": "Lone CrawlDatum.STATUS_SIGNATURE: <P>"}
{"classname": "crawl.CrawlDbReducer", "TemplateID": 716, "logline": "\"Couldn't update score, key=\" + key + \": \" + e", "loggerLevel": "warn", "TemplatePattern": "Couldn't update score, key=<P>: <P>"}
{"classname": "crawl.Generator", "TemplateID": 717, "logline": "\"Couldn't filter url: \" + url + \" (\" + e.getMessage()  + \")\"", "loggerLevel": "warn", "TemplatePattern": "Couldn't filter url: <P> (<P>)"}
{"classname": "crawl.Generator", "TemplateID": 718, "logline": "\"-shouldFetch rejected '\" + url + \"', fetchTime=\"  + crawlDatum.getFetchTime() + \", curTime=\" + curTime", "loggerLevel": "debug", "TemplatePattern": "-shouldFetch rejected '<P>', fetchTime=<P>, curTime=<P>"}
{"classname": "crawl.Generator", "TemplateID": 719, "logline": "\"Couldn't filter generatorSortValue for \" + key + \": \" + sfe", "loggerLevel": "warn", "TemplatePattern": "Couldn't filter generatorSortValue for <P>: <P>"}
{"classname": "crawl.Generator", "TemplateID": 720, "logline": "\"Malformed URL: '\" + urlString + \"', skipping (\"  + StringUtils.stringifyException(e) + \")\"", "loggerLevel": "warn", "TemplatePattern": "Malformed URL: '<P>', skipping (<P>)"}
{"classname": "crawl.Generator", "TemplateID": 721, "logline": "\"Generator: starting at \" + sdf.format(start)", "loggerLevel": "info", "TemplatePattern": "Generator: starting at <P>"}
{"classname": "crawl.Generator", "TemplateID": 722, "logline": "\"Generator: Selecting best-scoring urls due for fetch.\"", "loggerLevel": "info", "TemplatePattern": "Generator: Selecting best-scoring urls due for fetch."}
{"classname": "crawl.Generator", "TemplateID": 723, "logline": "\"Generator: filtering: \" + filter", "loggerLevel": "info", "TemplatePattern": "Generator: filtering: <P>"}
{"classname": "crawl.Generator", "TemplateID": 724, "logline": "\"Generator: normalizing: \" + norm", "loggerLevel": "info", "TemplatePattern": "Generator: normalizing: <P>"}
{"classname": "crawl.Generator", "TemplateID": 725, "logline": "\"Generator: topN: \" + topN", "loggerLevel": "info", "TemplatePattern": "Generator: topN: <P>"}
{"classname": "crawl.Generator", "TemplateID": 726, "logline": "\"Generator: jobtracker is 'local', generating exactly one partition.\"", "loggerLevel": "info", "TemplatePattern": "Generator: jobtracker is 'local', generating exactly one partition."}
{"classname": "crawl.Generator", "TemplateID": 727, "logline": "\"Generator: exception while partitioning segments, exiting ...\"", "loggerLevel": "warn", "TemplatePattern": "Generator: exception while partitioning segments, exiting ..."}
{"classname": "crawl.Generator", "TemplateID": 728, "logline": "\"Generator: 0 records selected for fetching, exiting ...\"", "loggerLevel": "warn", "TemplatePattern": "Generator: 0 records selected for fetching, exiting ..."}
{"classname": "crawl.Generator", "TemplateID": 729, "logline": "\"Generator: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)", "loggerLevel": "info", "TemplatePattern": "Generator: finished at <P>, elapsed: <P>"}
{"classname": "crawl.Generator", "TemplateID": 730, "logline": "\"Generator: Partitioning selected urls for politeness.\"", "loggerLevel": "info", "TemplatePattern": "Generator: Partitioning selected urls for politeness."}
{"classname": "crawl.Generator", "TemplateID": 731, "logline": "\"Generator: segment: \" + segment", "loggerLevel": "info", "TemplatePattern": "Generator: segment: <P>"}
{"classname": "crawl.Generator", "TemplateID": 732, "logline": "\"Generator: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "Generator: <P>"}
{"classname": "crawl.Generator", "TemplateID": 733, "logline": "\"Generator: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "Generator: <P>"}
{"classname": "crawl.AdaptiveFetchSchedule", "TemplateID": 734, "logline": "p.toString()", "loggerLevel": "info", "TemplatePattern": "<P> "}
{"classname": "crawl.AdaptiveFetchSchedule", "TemplateID": 735, "logline": "i + \". \" + changed + \"\\twill fetch at \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/crawl/AdaptiveFetchSchedule.java-          + (p.getFetchTime() / delta) + \"\\tinterval \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/crawl/AdaptiveFetchSchedule.java-          + (p.getFetchInterval() / SECONDS_PER_DAY) + \" days\" + \"\\t missed \"  + miss", "loggerLevel": "info", "TemplatePattern": "<P> . <P>\\twill fetch at <P>\\tinterval <P> days<P>\\t missed <P>"}
{"classname": "crawl.AdaptiveFetchSchedule", "TemplateID": 736, "logline": "\"\\tfetched & adjusted: \" + \"\\twill fetch at \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/crawl/AdaptiveFetchSchedule.java-            + (p.getFetchTime() / delta) + \"\\tinterval \"  + (p.getFetchInterval() / SECONDS_PER_DAY) + \" days\"", "loggerLevel": "info", "TemplatePattern": "\\tfetched & adjusted: <P>\\twill fetch at <P>\\tinterval <P> days"}
{"classname": "crawl.AdaptiveFetchSchedule", "TemplateID": 737, "logline": "\"Total missed: \" + totalMiss + \", max miss: \" + maxMiss", "loggerLevel": "info", "TemplatePattern": "Total missed: <P>, max miss: <P>"}
{"classname": "crawl.AdaptiveFetchSchedule", "TemplateID": 738, "logline": "\"Page changed \" + changeCnt + \" times, fetched \" + fetchCnt  + \" times.\"", "loggerLevel": "info", "TemplatePattern": "Page changed <P> times, fetched <P> times."}
{"classname": "crawl.CrawlDbMerger", "TemplateID": 739, "logline": "\"CrawlDb merge: starting at \" + sdf.format(start)", "loggerLevel": "info", "TemplatePattern": "CrawlDb merge: starting at <P>"}
{"classname": "crawl.CrawlDbMerger", "TemplateID": 740, "logline": "\"Adding \" + dbs[i]", "loggerLevel": "info", "TemplatePattern": "Adding <P>"}
{"classname": "crawl.CrawlDbMerger", "TemplateID": 741, "logline": "\"CrawlDb merge: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)", "loggerLevel": "info", "TemplatePattern": "CrawlDb merge: finished at <P>, elapsed: <P>"}
{"classname": "crawl.CrawlDbMerger", "TemplateID": 742, "logline": "\"\\toutput_crawldb\\toutput CrawlDb\"", "loggerLevel": "none", "TemplatePattern": "\\toutput_crawldb\\toutput CrawlDb"}
{"classname": "crawl.CrawlDbMerger", "TemplateID": 743, "logline": "\"\\t-filter\\tuse URLFilters on urls in the crawldb(s)\"", "loggerLevel": "none", "TemplatePattern": "\\t-filter\\tuse URLFilters on urls in the crawldb(s)"}
{"classname": "crawl.CrawlDbMerger", "TemplateID": 744, "logline": "\"CrawlDb merge: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "CrawlDb merge: <P>"}
{"classname": "crawl.TextProfileSignature", "TemplateID": 745, "logline": "name + \"\\t\" + StringUtil.toHexString(signature)", "loggerLevel": "none", "TemplatePattern": "<P> \\t<P>"}
{"classname": "crawl.LinkDb", "TemplateID": 746, "logline": "\"Skipping \" + fromUrl + \":\" + e", "loggerLevel": "warn", "TemplatePattern": "Skipping <P>:<P>"}
{"classname": "crawl.LinkDb", "TemplateID": 747, "logline": "\"Skipping \" + fromUrl + \":\" + e", "loggerLevel": "warn", "TemplatePattern": "Skipping <P>:<P>"}
{"classname": "crawl.LinkDb", "TemplateID": 748, "logline": "\"Skipping \" + toUrl + \":\" + e", "loggerLevel": "warn", "TemplatePattern": "Skipping <P>:<P>"}
{"classname": "crawl.LinkDb", "TemplateID": 749, "logline": "\"Skipping \" + toUrl + \":\" + e", "loggerLevel": "warn", "TemplatePattern": "Skipping <P>:<P>"}
{"classname": "crawl.LinkDb", "TemplateID": 750, "logline": "\"LinkDb: starting at \" + sdf.format(start)", "loggerLevel": "info", "TemplatePattern": "LinkDb: starting at <P>"}
{"classname": "crawl.LinkDb", "TemplateID": 751, "logline": "\"LinkDb: linkdb: \" + linkDb", "loggerLevel": "info", "TemplatePattern": "LinkDb: linkdb: <P>"}
{"classname": "crawl.LinkDb", "TemplateID": 752, "logline": "\"LinkDb: URL normalize: \" + normalize", "loggerLevel": "info", "TemplatePattern": "LinkDb: URL normalize: <P>"}
{"classname": "crawl.LinkDb", "TemplateID": 753, "logline": "\"LinkDb: URL filter: \" + filter", "loggerLevel": "info", "TemplatePattern": "LinkDb: URL filter: <P>"}
{"classname": "crawl.LinkDb", "TemplateID": 754, "logline": "\"LinkDb: internal links will be ignored.\"", "loggerLevel": "info", "TemplatePattern": "LinkDb: internal links will be ignored."}
{"classname": "crawl.LinkDb", "TemplateID": 755, "logline": "\"LinkDb: external links will be ignored.\"", "loggerLevel": "info", "TemplatePattern": "LinkDb: external links will be ignored."}
{"classname": "crawl.LinkDb", "TemplateID": 756, "logline": "\"LinkDb: internal and external links are ignored! \"  + \"Nothing to do, actually. Exiting.\"", "loggerLevel": "warn", "TemplatePattern": "LinkDb: internal and external links are ignored! <P>Nothing to do, actually. Exiting."}
{"classname": "crawl.LinkDb", "TemplateID": 757, "logline": "\"LinkDb: adding segment: \" + segments[i]", "loggerLevel": "info", "TemplatePattern": "LinkDb: adding segment: <P>"}
{"classname": "crawl.LinkDb", "TemplateID": 758, "logline": "\"LinkDb: merging with existing linkdb: \" + linkDb", "loggerLevel": "info", "TemplatePattern": "LinkDb: merging with existing linkdb: <P>"}
{"classname": "crawl.LinkDb", "TemplateID": 759, "logline": "\"LinkDb: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)", "loggerLevel": "info", "TemplatePattern": "LinkDb: finished at <P>, elapsed: <P>"}
{"classname": "crawl.LinkDb", "TemplateID": 760, "logline": "\"LinkDb createJob: \" + e", "loggerLevel": "warn", "TemplatePattern": "LinkDb createJob: <P>"}
{"classname": "crawl.LinkDb", "TemplateID": 761, "logline": "\"\\tlinkdb\\toutput LinkDb to create or update\"", "loggerLevel": "none", "TemplatePattern": "\\tlinkdb\\toutput LinkDb to create or update"}
{"classname": "crawl.LinkDb", "TemplateID": 762, "logline": "\"\\tseg1 seg2 ...\\t list of segment directories\"", "loggerLevel": "none", "TemplatePattern": "\\tseg1 seg2 ...\\t list of segment directories"}
{"classname": "crawl.LinkDb", "TemplateID": 763, "logline": "\"\\t-noNormalize\\tdon't normalize link URLs\"", "loggerLevel": "none", "TemplatePattern": "\\t-noNormalize\\tdon't normalize link URLs"}
{"classname": "crawl.LinkDb", "TemplateID": 764, "logline": "\"\\t-noFilter\\tdon't apply URLFilters to link URLs\"", "loggerLevel": "none", "TemplatePattern": "\\t-noFilter\\tdon't apply URLFilters to link URLs"}
{"classname": "crawl.LinkDb", "TemplateID": 765, "logline": "\"LinkDb: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "LinkDb: <P>"}
{"classname": "crawl.LinkDb", "TemplateID": 766, "logline": "\"LinkDb: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "LinkDb: <P>"}
{"classname": "crawl.URLPartitioner", "TemplateID": 767, "logline": "\"Unknown partition mode : \" + mode + \" - forcing to byHost\"", "loggerLevel": "error", "TemplatePattern": "Unknown partition mode : <P> - forcing to byHost"}
{"classname": "crawl.URLPartitioner", "TemplateID": 768, "logline": "\"Malformed URL: '\" + urlString + \"'\"", "loggerLevel": "warn", "TemplatePattern": "Malformed URL: '<P>'"}
{"classname": "crawl.URLPartitioner", "TemplateID": 769, "logline": "\"Couldn't find IP for host: \" + url.getHost()", "loggerLevel": "info", "TemplatePattern": "Couldn't find IP for host: <P>"}
{"classname": "crawl.SignatureFactory", "TemplateID": 770, "logline": "\"Using Signature impl: \" + clazz", "loggerLevel": "info", "TemplatePattern": "Using Signature impl: <P>"}
{"classname": "crawl.LinkDbMerger", "TemplateID": 771, "logline": "\"LinkDb merge: starting at \" + sdf.format(start)", "loggerLevel": "info", "TemplatePattern": "LinkDb merge: starting at <P>"}
{"classname": "crawl.LinkDbMerger", "TemplateID": 772, "logline": "\"LinkDb merge: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)", "loggerLevel": "info", "TemplatePattern": "LinkDb merge: finished at <P>, elapsed: <P>"}
{"classname": "crawl.LinkDbMerger", "TemplateID": 773, "logline": "\"\\toutput_linkdb\\toutput LinkDb\"", "loggerLevel": "none", "TemplatePattern": "\\toutput_linkdb\\toutput LinkDb"}
{"classname": "crawl.LinkDbMerger", "TemplateID": 774, "logline": "\"LinkDbMerger: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "LinkDbMerger: <P>"}
{"classname": "crawl.MapWritable", "TemplateID": 775, "logline": "\"Unable to load internal map entry\" + e.toString()", "loggerLevel": "warn", "TemplatePattern": "Unable to load internal map entry<P>"}
{"classname": "crawl.MapWritable", "TemplateID": 776, "logline": "\"Unable to load meta data entry, ignoring.. : \"  + e.toString()", "loggerLevel": "warn", "TemplatePattern": "Unable to load meta data entry, ignoring.. : <P>"}
{"classname": "crawl.MimeAdaptiveFetchSchedule", "TemplateID": 777, "logline": "org.apache.hadoop.util.StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "crawl.MimeAdaptiveFetchSchedule", "TemplateID": 778, "logline": "\"Invalid configuration line in: \" + line", "loggerLevel": "warn", "TemplatePattern": "Invalid configuration line in: <P>"}
{"classname": "crawl.MimeAdaptiveFetchSchedule", "TemplateID": 779, "logline": "p.toString()", "loggerLevel": "info", "TemplatePattern": "<P> "}
{"classname": "crawl.MimeAdaptiveFetchSchedule", "TemplateID": 780, "logline": "i + \". \" + changed + \"\\twill fetch at \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/crawl/MimeAdaptiveFetchSchedule.java-          + (p.getFetchTime() / delta) + \"\\tinterval \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/crawl/MimeAdaptiveFetchSchedule.java-          + (p.getFetchInterval() / SECONDS_PER_DAY) + \" days\" + \"\\t missed \"  + miss", "loggerLevel": "info", "TemplatePattern": "<P> . <P>\\twill fetch at <P>\\tinterval <P> days<P>\\t missed <P>"}
{"classname": "crawl.MimeAdaptiveFetchSchedule", "TemplateID": 781, "logline": "\"\\tfetched & adjusted: \" + \"\\twill fetch at \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/crawl/MimeAdaptiveFetchSchedule.java-            + (p.getFetchTime() / delta) + \"\\tinterval \"  + (p.getFetchInterval() / SECONDS_PER_DAY) + \" days\"", "loggerLevel": "info", "TemplatePattern": "\\tfetched & adjusted: <P>\\twill fetch at <P>\\tinterval <P> days"}
{"classname": "crawl.MimeAdaptiveFetchSchedule", "TemplateID": 782, "logline": "\"Total missed: \" + totalMiss + \", max miss: \" + maxMiss", "loggerLevel": "info", "TemplatePattern": "Total missed: <P>, max miss: <P>"}
{"classname": "crawl.MimeAdaptiveFetchSchedule", "TemplateID": 783, "logline": "\"Page changed \" + changeCnt + \" times, fetched \" + fetchCnt  + \" times.\"", "loggerLevel": "info", "TemplatePattern": "Page changed <P> times, fetched <P> times."}
{"classname": "crawl.LinkDbReader", "TemplateID": 784, "logline": "\"LinkDb dump: starting at \" + sdf.format(start)", "loggerLevel": "info", "TemplatePattern": "LinkDb dump: starting at <P>"}
{"classname": "crawl.LinkDbReader", "TemplateID": 785, "logline": "\"LinkDb dump: db: \" + linkdb", "loggerLevel": "info", "TemplatePattern": "LinkDb dump: db: <P>"}
{"classname": "crawl.LinkDbReader", "TemplateID": 786, "logline": "\"LinkDb dump: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)", "loggerLevel": "info", "TemplatePattern": "LinkDb dump: finished at <P>, elapsed: <P>"}
{"classname": "crawl.LinkDbReader", "TemplateID": 787, "logline": "\" - no link information.\"", "loggerLevel": "none", "TemplatePattern": " - no link information."}
{"classname": "crawl.LinkDbReader", "TemplateID": 788, "logline": "it.next().toString()", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "crawl.LinkDbReader", "TemplateID": 789, "logline": "\"Error: wrong argument \" + args[1]", "loggerLevel": "none", "TemplatePattern": "Error: wrong argument <P>"}
{"classname": "crawl.LinkDbReader", "TemplateID": 790, "logline": "\"LinkDbReader: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "LinkDbReader: <P>"}
{"classname": "crawl.LinkDbFilter", "TemplateID": 791, "logline": "\"Skipping \" + url + \":\" + e", "loggerLevel": "warn", "TemplatePattern": "Skipping <P>:<P>"}
{"classname": "crawl.LinkDbFilter", "TemplateID": 792, "logline": "\"Skipping \" + url + \":\" + e", "loggerLevel": "warn", "TemplatePattern": "Skipping <P>:<P>"}
{"classname": "crawl.LinkDbFilter", "TemplateID": 793, "logline": "\"Skipping \" + fromUrl + \":\" + e", "loggerLevel": "warn", "TemplatePattern": "Skipping <P>:<P>"}
{"classname": "crawl.LinkDbFilter", "TemplateID": 794, "logline": "\"Skipping \" + fromUrl + \":\" + e", "loggerLevel": "warn", "TemplatePattern": "Skipping <P>:<P>"}
{"classname": "crawl.CrawlDb", "TemplateID": 795, "logline": "\"CrawlDb update: starting at \" + sdf.format(start)", "loggerLevel": "info", "TemplatePattern": "CrawlDb update: starting at <P>"}
{"classname": "crawl.CrawlDb", "TemplateID": 796, "logline": "\"CrawlDb update: db: \" + crawlDb", "loggerLevel": "info", "TemplatePattern": "CrawlDb update: db: <P>"}
{"classname": "crawl.CrawlDb", "TemplateID": 797, "logline": "\"CrawlDb update: segments: \" + Arrays.asList(segments)", "loggerLevel": "info", "TemplatePattern": "CrawlDb update: segments: <P>"}
{"classname": "crawl.CrawlDb", "TemplateID": 798, "logline": "\"CrawlDb update: additions allowed: \" + additionsAllowed", "loggerLevel": "info", "TemplatePattern": "CrawlDb update: additions allowed: <P>"}
{"classname": "crawl.CrawlDb", "TemplateID": 799, "logline": "\"CrawlDb update: URL normalizing: \" + normalize", "loggerLevel": "info", "TemplatePattern": "CrawlDb update: URL normalizing: <P>"}
{"classname": "crawl.CrawlDb", "TemplateID": 800, "logline": "\"CrawlDb update: URL filtering: \" + filter", "loggerLevel": "info", "TemplatePattern": "CrawlDb update: URL filtering: <P>"}
{"classname": "crawl.CrawlDb", "TemplateID": 801, "logline": "\"CrawlDb update: 404 purging: \" + url404Purging", "loggerLevel": "info", "TemplatePattern": "CrawlDb update: 404 purging: <P>"}
{"classname": "crawl.CrawlDb", "TemplateID": 802, "logline": "\" - skipping invalid segment \" + segments[i]", "loggerLevel": "info", "TemplatePattern": " - skipping invalid segment <P>"}
{"classname": "crawl.CrawlDb", "TemplateID": 803, "logline": "\"CrawlDb update: Merging segment data into db.\"", "loggerLevel": "info", "TemplatePattern": "CrawlDb update: Merging segment data into db."}
{"classname": "crawl.CrawlDb", "TemplateID": 804, "logline": "\"CrawlDb update: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)", "loggerLevel": "info", "TemplatePattern": "CrawlDb update: finished at <P>, elapsed: <P>"}
{"classname": "crawl.CrawlDb", "TemplateID": 805, "logline": "\"\\tcrawldb\\tCrawlDb to update\"", "loggerLevel": "none", "TemplatePattern": "\\tcrawldb\\tCrawlDb to update"}
{"classname": "crawl.CrawlDb", "TemplateID": 806, "logline": "\"CrawlDb update: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "CrawlDb update: <P>"}
{"classname": "crawl.CrawlDb", "TemplateID": 807, "logline": "\"CrawlDb update: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "CrawlDb update: <P>"}
{"classname": "crawl.DeduplicationJob", "TemplateID": 808, "logline": "\"Usage: DeduplicationJob <crawldb>\"", "loggerLevel": "none", "TemplatePattern": "Usage: DeduplicationJob <crawldb>"}
{"classname": "crawl.DeduplicationJob", "TemplateID": 809, "logline": "\"DeduplicationJob: starting at \" + sdf.format(start)", "loggerLevel": "info", "TemplatePattern": "DeduplicationJob: starting at <P>"}
{"classname": "crawl.DeduplicationJob", "TemplateID": 810, "logline": "\"Deduplication: \" + (int) dups  + \" documents marked as duplicates\"", "loggerLevel": "info", "TemplatePattern": "Deduplication: <P> documents marked as duplicates"}
{"classname": "crawl.DeduplicationJob", "TemplateID": 811, "logline": "\"DeduplicationJob: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "DeduplicationJob: <P>"}
{"classname": "crawl.DeduplicationJob", "TemplateID": 812, "logline": "\"Deduplication: Updating status of duplicate urls into crawl db.\"", "loggerLevel": "info", "TemplatePattern": "Deduplication: Updating status of duplicate urls into crawl db."}
{"classname": "crawl.DeduplicationJob", "TemplateID": 813, "logline": "\"DeduplicationMergeJob: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "DeduplicationMergeJob: <P>"}
{"classname": "crawl.DeduplicationJob", "TemplateID": 814, "logline": "\"Deduplication finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)", "loggerLevel": "info", "TemplatePattern": "Deduplication finished at <P>, elapsed: <P>"}
{"classname": "fetcher.OldFetcher", "TemplateID": 829, "logline": "\"fetcher caught:\" + e.toString()", "loggerLevel": "error", "TemplatePattern": "fetcher caught:<P>"}
{"classname": "fetcher.OldFetcher", "TemplateID": 830, "logline": "\"fetching \" + url", "loggerLevel": "info", "TemplatePattern": "fetching <P>"}
{"classname": "fetcher.OldFetcher", "TemplateID": 831, "logline": "\"redirectCount=\" + redirectCount", "loggerLevel": "debug", "TemplatePattern": "redirectCount=<P>"}
{"classname": "fetcher.OldFetcher", "TemplateID": 832, "logline": "\"Unknown ProtocolStatus: \" + status.getCode()", "loggerLevel": "warn", "TemplatePattern": "Unknown ProtocolStatus: <P>"}
{"classname": "fetcher.OldFetcher", "TemplateID": 833, "logline": "\" - redirect count exceeded \" + url", "loggerLevel": "info", "TemplatePattern": " - redirect count exceeded <P>"}
{"classname": "fetcher.OldFetcher", "TemplateID": 834, "logline": "\"fetcher caught:\" + e.toString()", "loggerLevel": "error", "TemplatePattern": "fetcher caught:<P>"}
{"classname": "fetcher.OldFetcher", "TemplateID": 835, "logline": "\" - \" + redirType + \" redirect to \" + url  + \" (fetching now)\"", "loggerLevel": "debug", "TemplatePattern": " - <P> redirect to <P> (fetching now)"}
{"classname": "fetcher.OldFetcher", "TemplateID": 836, "logline": "\" - \" + redirType + \" redirect to \" + url  + \" (fetching later)\"", "loggerLevel": "debug", "TemplatePattern": " - <P> redirect to <P> (fetching later)"}
{"classname": "fetcher.OldFetcher", "TemplateID": 837, "logline": "\" - \" + redirType + \" redirect skipped: \"  + (newUrl != null ? \"to same url\" : \"filtered\")", "loggerLevel": "debug", "TemplatePattern": " - <P> redirect skipped: <P> <P>to same url<P>"}
{"classname": "fetcher.OldFetcher", "TemplateID": 838, "logline": "\" - \" + redirType + \" redirect skipped: \"  + (newUrl != null ? \"to same url\" : \"filtered\")", "loggerLevel": "debug", "TemplatePattern": " - <P> redirect skipped: <P> <P>filtered<P>"}
{"classname": "fetcher.OldFetcher", "TemplateID": 839, "logline": "\"fetch of \" + url + \" failed with: \" + message", "loggerLevel": "info", "TemplatePattern": "fetch of <P> failed with: <P>"}
{"classname": "fetcher.OldFetcher", "TemplateID": 840, "logline": "\"Couldn't pass score, url \" + key + \" (\" + e + \")\"", "loggerLevel": "warn", "TemplatePattern": "Couldn't pass score, url <P> (<P>)"}
{"classname": "fetcher.OldFetcher", "TemplateID": 841, "logline": "\"Error parsing: \" + key + \": \"  + StringUtils.stringifyException(e)", "loggerLevel": "warn", "TemplatePattern": "Error parsing: <P>: <P>"}
{"classname": "fetcher.OldFetcher", "TemplateID": 842, "logline": "\"Error parsing: \" + key + \": \" + parseStatus", "loggerLevel": "warn", "TemplatePattern": "Error parsing: <P>: <P>"}
{"classname": "fetcher.OldFetcher", "TemplateID": 843, "logline": "\"Couldn't pass score, url \" + key + \" (\" + e + \")\"", "loggerLevel": "warn", "TemplatePattern": "Couldn't pass score, url <P> (<P>)"}
{"classname": "fetcher.OldFetcher", "TemplateID": 844, "logline": "\"fetcher caught:\" + e.toString()", "loggerLevel": "error", "TemplatePattern": "fetcher caught:<P>"}
{"classname": "fetcher.OldFetcher", "TemplateID": 845, "logline": "\"OldFetcher: threads: \" + threadCount", "loggerLevel": "info", "TemplatePattern": "OldFetcher: threads: <P>"}
{"classname": "fetcher.OldFetcher", "TemplateID": 846, "logline": "\"Aborting with \" + activeThreads + \" hung threads.\"", "loggerLevel": "warn", "TemplatePattern": "Aborting with <P> hung threads."}
{"classname": "fetcher.OldFetcher", "TemplateID": 847, "logline": "\"OldFetcher: starting at \" + sdf.format(start)", "loggerLevel": "info", "TemplatePattern": "OldFetcher: starting at <P>"}
{"classname": "fetcher.OldFetcher", "TemplateID": 848, "logline": "\"OldFetcher: segment: \" + segment", "loggerLevel": "info", "TemplatePattern": "OldFetcher: segment: <P>"}
{"classname": "fetcher.OldFetcher", "TemplateID": 849, "logline": "\"OldFetcher: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)", "loggerLevel": "info", "TemplatePattern": "OldFetcher: finished at <P>, elapsed: <P>"}
{"classname": "fetcher.OldFetcher", "TemplateID": 850, "logline": "usage", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "fetcher.OldFetcher", "TemplateID": 851, "logline": "\"OldFetcher: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "OldFetcher: <P>"}
{"classname": "fetcher.FetcherThread", "TemplateID": 869, "logline": "\" - \" + redirType + \" redirect skipped: \"  + (newUrl != null ? \"to same url\" : \"filtered\")", "loggerLevel": "debug", "TemplatePattern": " - <P> redirect skipped: <P> <P>to same url<P>"}
{"classname": "fetcher.FetcherThread", "TemplateID": 870, "logline": "\" - \" + redirType + \" redirect skipped: \"  + (newUrl != null ? \"to same url\" : \"filtered\")", "loggerLevel": "debug", "TemplatePattern": " - <P> redirect skipped: <P> <P>filtered<P>"}
{"classname": "fetcher.Fetcher", "TemplateID": 877, "logline": "\"Fetcher: threads: \" + threadCount", "loggerLevel": "info", "TemplatePattern": "Fetcher: threads: <P>"}
{"classname": "fetcher.Fetcher", "TemplateID": 878, "logline": "\"Fetcher: time-out divisor: \" + timeoutDivisor", "loggerLevel": "info", "TemplatePattern": "Fetcher: time-out divisor: <P>"}
{"classname": "fetcher.Fetcher", "TemplateID": 879, "logline": "\"Fetcher: throughput threshold: \" + throughputThresholdPages", "loggerLevel": "info", "TemplatePattern": "Fetcher: throughput threshold: <P>"}
{"classname": "fetcher.Fetcher", "TemplateID": 880, "logline": "\"Fetcher: throughput threshold retries: \"  + throughputThresholdMaxRetries", "loggerLevel": "info", "TemplatePattern": "Fetcher: throughput threshold retries: <P>"}
{"classname": "fetcher.Fetcher", "TemplateID": 881, "logline": "\"fetcher.maxNum.threads can't be < than \" + threadCount  + \" : using \" + threadCount + \" instead\"", "loggerLevel": "info", "TemplatePattern": "fetcher.maxNum.threads can't be < than <P> : using <P> instead"}
{"classname": "fetcher.Fetcher", "TemplateID": 882, "logline": "\"fetcher.bandwidth.target.check.everyNSecs can't be < to 1 : using 1 instead\"", "loggerLevel": "info", "TemplatePattern": "fetcher.bandwidth.target.check.everyNSecs can't be < to 1 : using 1 instead"}
{"classname": "fetcher.Fetcher", "TemplateID": 883, "logline": "\"-activeThreads=\" + activeThreads + \", spinWaiting=\"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/fetcher/Fetcher.java-          + spinWaiting.get() + \", fetchQueues.totalSize=\"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/fetcher/Fetcher.java-          + fetchQueues.getTotalSize() + \", fetchQueues.getQueueCount=\"  + fetchQueues.getQueueCount()", "loggerLevel": "info", "TemplatePattern": "-activeThreads=<P>, spinWaiting=<P>, fetchQueues.totalSize=<P>, fetchQueues.getQueueCount=<P>"}
{"classname": "fetcher.Fetcher", "TemplateID": 884, "logline": "Integer.toString(throughputThresholdNumRetries)  /root/nutch-git-source/nutch/src/java/org/apache/nutch/fetcher/Fetcher.java-              + \": dropping below configured threshold of \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/fetcher/Fetcher.java-              + Integer.toString(throughputThresholdPages)  + \" pages per second\"", "loggerLevel": "warn", "TemplatePattern": "<P> : dropping below configured threshold of <P> pages per second"}
{"classname": "fetcher.Fetcher", "TemplateID": 885, "logline": "\"Dropped below threshold too many times, killing!\"", "loggerLevel": "warn", "TemplatePattern": "Dropped below threshold too many times, killing!"}
{"classname": "fetcher.Fetcher", "TemplateID": 886, "logline": "\"averageBdwPerThread : \" + (averageBdwPerThread / 1000)  + \" kbps\"", "loggerLevel": "info", "TemplatePattern": "averageBdwPerThread : <P> kbps"}
{"classname": "fetcher.Fetcher", "TemplateID": 887, "logline": "\"Has space for more threads (\"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/fetcher/Fetcher.java-                  + (bpsSinceLastCheck / 1000) + \" vs \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/fetcher/Fetcher.java-                  + (targetBandwidth / 1000) + \" kbps) \\t=> adding \"  + additionalThreads + \" new threads\"", "loggerLevel": "info", "TemplatePattern": "Has space for more threads (<P> vs <P> kbps) \\t=> adding <P> new threads"}
{"classname": "fetcher.Fetcher", "TemplateID": 888, "logline": "\"Exceeding target bandwidth (\" + bpsSinceLastCheck / 1000  /root/nutch-git-source/nutch/src/java/org/apache/nutch/fetcher/Fetcher.java-                + \" vs \" + (targetBandwidth / 1000)  + \" kbps). \\t=> excessThreads = \" + excessThreads", "loggerLevel": "info", "TemplatePattern": "Exceeding target bandwidth (<P> vs <P> kbps). \\t=> excessThreads = <P>"}
{"classname": "fetcher.Fetcher", "TemplateID": 889, "logline": "\"Aborting with \" + activeThreads + \" hung threads.\"", "loggerLevel": "warn", "TemplatePattern": "Aborting with <P> hung threads."}
{"classname": "fetcher.Fetcher", "TemplateID": 890, "logline": "\"Thread #\" + i + \" hung while processing \"  + thread.getReprUrl()", "loggerLevel": "warn", "TemplatePattern": "Thread #<P> hung while processing <P>"}
{"classname": "fetcher.Fetcher", "TemplateID": 891, "logline": "sb.toString()", "loggerLevel": "debug", "TemplatePattern": "<P> "}
{"classname": "fetcher.Fetcher", "TemplateID": 892, "logline": "\"-activeThreads=\" + activeThreads", "loggerLevel": "info", "TemplatePattern": "-activeThreads=<P>"}
{"classname": "fetcher.Fetcher", "TemplateID": 893, "logline": "\"Fetcher: starting at \" + sdf.format(start)", "loggerLevel": "info", "TemplatePattern": "Fetcher: starting at <P>"}
{"classname": "fetcher.Fetcher", "TemplateID": 894, "logline": "\"Fetcher: segment: \" + segment", "loggerLevel": "info", "TemplatePattern": "Fetcher: segment: <P>"}
{"classname": "fetcher.Fetcher", "TemplateID": 895, "logline": "\"Fetcher Timelimit set for : \" + timelimit", "loggerLevel": "info", "TemplatePattern": "Fetcher Timelimit set for : <P>"}
{"classname": "fetcher.Fetcher", "TemplateID": 896, "logline": "\"Fetcher: following outlinks up to depth: \"  + Integer.toString(maxOutlinkDepth)", "loggerLevel": "info", "TemplatePattern": "Fetcher: following outlinks up to depth: <P>"}
{"classname": "fetcher.Fetcher", "TemplateID": 897, "logline": "\"Fetcher: maximum outlinks to follow: \"  + Integer.toString(totalOutlinksToFollow)", "loggerLevel": "info", "TemplatePattern": "Fetcher: maximum outlinks to follow: <P>"}
{"classname": "fetcher.Fetcher", "TemplateID": 898, "logline": "\"Fetcher: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)", "loggerLevel": "info", "TemplatePattern": "Fetcher: finished at <P>, elapsed: <P>"}
{"classname": "fetcher.Fetcher", "TemplateID": 899, "logline": "usage", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "fetcher.Fetcher", "TemplateID": 900, "logline": "\"Fetcher: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "Fetcher: <P>"}
{"classname": "fetcher.Fetcher", "TemplateID": 901, "logline": "message", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "fetcher.Fetcher", "TemplateID": 902, "logline": "\"Fetcher: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "Fetcher: <P>"}
{"classname": "indexer.IndexingFiltersChecker", "TemplateID": 911, "logline": "usage", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "indexer.IndexingFiltersChecker", "TemplateID": 912, "logline": "usage", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "indexer.IndexingFiltersChecker", "TemplateID": 913, "logline": "\"fetching: \" + url", "loggerLevel": "info", "TemplatePattern": "fetching: <P>"}
{"classname": "indexer.IndexingFiltersChecker", "TemplateID": 914, "logline": "\"Fetch failed with protocol status: \"  + output.getStatus()", "loggerLevel": "none", "TemplatePattern": "Fetch failed with protocol status: <P>"}
{"classname": "indexer.IndexingFiltersChecker", "TemplateID": 915, "logline": "\"No content for \" + url", "loggerLevel": "none", "TemplatePattern": "No content for <P>"}
{"classname": "indexer.IndexingFiltersChecker", "TemplateID": 916, "logline": "\"Content is truncated, parse may fail!\"", "loggerLevel": "warn", "TemplatePattern": "Content is truncated, parse may fail!"}
{"classname": "indexer.IndexingFiltersChecker", "TemplateID": 917, "logline": "\"parsing: \" + url", "loggerLevel": "info", "TemplatePattern": "parsing: <P>"}
{"classname": "indexer.IndexingFiltersChecker", "TemplateID": 918, "logline": "\"contentType: \" + contentType", "loggerLevel": "info", "TemplatePattern": "contentType: <P>"}
{"classname": "indexer.IndexingFiltersChecker", "TemplateID": 919, "logline": "\"Failed to get parse from parse result\"", "loggerLevel": "error", "TemplatePattern": "Failed to get parse from parse result"}
{"classname": "indexer.IndexingFiltersChecker", "TemplateID": 920, "logline": "\"Available parses in parse result (by URL key):\"", "loggerLevel": "error", "TemplatePattern": "Available parses in parse result (by URL key):"}
{"classname": "indexer.IndexingFiltersChecker", "TemplateID": 921, "logline": "\"  \" + entry.getKey()", "loggerLevel": "error", "TemplatePattern": "  <P>"}
{"classname": "indexer.IndexingFiltersChecker", "TemplateID": 922, "logline": "\"Parse result does not contain a parse for URL to be checked:\"", "loggerLevel": "error", "TemplatePattern": "Parse result does not contain a parse for URL to be checked:"}
{"classname": "indexer.IndexingFiltersChecker", "TemplateID": 923, "logline": "\"  \" + urlText", "loggerLevel": "error", "TemplatePattern": "  <P>"}
{"classname": "indexer.IndexingFiltersChecker", "TemplateID": 924, "logline": "\"Document discarded by indexing filter\"", "loggerLevel": "none", "TemplatePattern": "Document discarded by indexing filter"}
{"classname": "indexer.IndexingFiltersChecker", "TemplateID": 925, "logline": "fname + \" :\\t\" + str.substring(0, minText)", "loggerLevel": "none", "TemplatePattern": "<P>  :\\t<P>"}
{"classname": "indexer.CleaningJob", "TemplateID": 926, "logline": "\"CleaningJob: deleted a total of \" + totalDeleted + \" documents\"", "loggerLevel": "info", "TemplatePattern": "CleaningJob: deleted a total of <P> documents"}
{"classname": "indexer.CleaningJob", "TemplateID": 927, "logline": "\"CleaningJob: starting at \" + sdf.format(start)", "loggerLevel": "info", "TemplatePattern": "CleaningJob: starting at <P>"}
{"classname": "indexer.CleaningJob", "TemplateID": 928, "logline": "\"CleaningJob: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)", "loggerLevel": "info", "TemplatePattern": "CleaningJob: finished at <P>, elapsed: <P>"}
{"classname": "indexer.CleaningJob", "TemplateID": 929, "logline": "\"Missing crawldb. \" + usage", "loggerLevel": "error", "TemplatePattern": "Missing crawldb. <P>"}
{"classname": "indexer.CleaningJob", "TemplateID": 930, "logline": "usage", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "indexer.CleaningJob", "TemplateID": 931, "logline": "writers.describe()", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "indexer.CleaningJob", "TemplateID": 932, "logline": "\"CleaningJob: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "CleaningJob: <P>"}
{"classname": "indexer.CleaningJob", "TemplateID": 933, "logline": "\"ERROR CleaningJob: \"  + StringUtils.stringifyException(e)", "loggerLevel": "none", "TemplatePattern": "ERROR CleaningJob: <P>"}
{"classname": "indexer.IndexWriters", "TemplateID": 934, "logline": "\"Adding \" + writer.getClass().getName()", "loggerLevel": "info", "TemplatePattern": "Adding <P>"}
{"classname": "indexer.IndexerMapReduce", "TemplateID": 935, "logline": "\"Skipping \" + url + \":\" + e", "loggerLevel": "warn", "TemplatePattern": "Skipping <P>:<P>"}
{"classname": "indexer.IndexerMapReduce", "TemplateID": 936, "logline": "\"Unrecognized type: \" + value.getClass()", "loggerLevel": "warn", "TemplatePattern": "Unrecognized type: <P>"}
{"classname": "indexer.IndexerMapReduce", "TemplateID": 937, "logline": "\"Error indexing \" + key + \": \" + e", "loggerLevel": "warn", "TemplatePattern": "Error indexing <P>: <P>"}
{"classname": "indexer.IndexerMapReduce", "TemplateID": 938, "logline": "\"Error calculating score \" + key + \": \" + e", "loggerLevel": "warn", "TemplatePattern": "Error calculating score <P>: <P>"}
{"classname": "indexer.IndexerMapReduce", "TemplateID": 939, "logline": "\"IndexerMapReduce: crawldb: \" + crawlDb", "loggerLevel": "info", "TemplatePattern": "IndexerMapReduce: crawldb: <P>"}
{"classname": "indexer.IndexerMapReduce", "TemplateID": 940, "logline": "\"IndexerMapReduce: linkdb: \" + linkDb", "loggerLevel": "info", "TemplatePattern": "IndexerMapReduce: linkdb: <P>"}
{"classname": "indexer.IndexerMapReduce", "TemplateID": 941, "logline": "\"IndexerMapReduces: adding segment: \" + segment", "loggerLevel": "info", "TemplatePattern": "IndexerMapReduces: adding segment: <P>"}
{"classname": "indexer.IndexingJob", "TemplateID": 942, "logline": "\"Indexer: starting at \" + sdf.format(start)", "loggerLevel": "info", "TemplatePattern": "Indexer: starting at <P>"}
{"classname": "indexer.IndexingJob", "TemplateID": 943, "logline": "\"Indexer: deleting gone documents: \" + deleteGone", "loggerLevel": "info", "TemplatePattern": "Indexer: deleting gone documents: <P>"}
{"classname": "indexer.IndexingJob", "TemplateID": 944, "logline": "\"Indexer: URL filtering: \" + filter", "loggerLevel": "info", "TemplatePattern": "Indexer: URL filtering: <P>"}
{"classname": "indexer.IndexingJob", "TemplateID": 945, "logline": "\"Indexer: URL normalizing: \" + normalize", "loggerLevel": "info", "TemplatePattern": "Indexer: URL normalizing: <P>"}
{"classname": "indexer.IndexingJob", "TemplateID": 946, "logline": "writers.describe()", "loggerLevel": "info", "TemplatePattern": "<P> "}
{"classname": "indexer.IndexingJob", "TemplateID": 949, "logline": "\"Indexer: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)", "loggerLevel": "info", "TemplatePattern": "Indexer: finished at <P>, elapsed: <P>"}
{"classname": "indexer.IndexingJob", "TemplateID": 950, "logline": "writers.describe()", "loggerLevel": "none", "TemplatePattern": "<P> "}
{"classname": "indexer.IndexingJob", "TemplateID": 951, "logline": "\"Indexer: \" + StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "Indexer: <P>"}
{"classname": "segment.SegmentChecker", "TemplateID": 952, "logline": "\"No segment path or filesystem set.\"", "loggerLevel": "info", "TemplatePattern": "No segment path or filesystem set."}
{"classname": "segment.SegmentChecker", "TemplateID": 953, "logline": "\"Segment dir is complete: \" + segmentPath.toString() + \".\"", "loggerLevel": "info", "TemplatePattern": "Segment dir is complete: <P>."}
{"classname": "segment.SegmentChecker", "TemplateID": 954, "logline": "\"Skipping segment: \" + segmentPath.toString()  /root/nutch-git-source/nutch/src/java/org/apache/nutch/segment/SegmentChecker.java-          + \". Missing sub directories: \"  + missingDirString.substring(0, missingDirString.length() - 2)", "loggerLevel": "warn", "TemplatePattern": "Skipping segment: <P>. Missing sub directories: <P>"}
{"classname": "segment.SegmentMergeFilters", "TemplateID": 955, "logline": "\"Key \" + key + \" dropped by \" + filter.getClass().getName()", "loggerLevel": "trace", "TemplatePattern": "Key <P> dropped by <P>"}
{"classname": "segment.SegmentMergeFilters", "TemplateID": 956, "logline": "\"Key \" + key + \" accepted for merge.\"", "loggerLevel": "trace", "TemplatePattern": "Key <P> accepted for merge."}
{"classname": "segment.SegmentReader", "TemplateID": 957, "logline": "\"IOException:\", e", "loggerLevel": "error", "TemplatePattern": "IOException:<P>"}
{"classname": "segment.SegmentReader", "TemplateID": 958, "logline": "\"IOException:\", e", "loggerLevel": "error", "TemplatePattern": "IOException:<P>"}
{"classname": "segment.SegmentReader", "TemplateID": 959, "logline": "\"Unrecognized type: \" + value.getClass()", "loggerLevel": "warn", "TemplatePattern": "Unrecognized type: <P>"}
{"classname": "segment.SegmentReader", "TemplateID": 960, "logline": "\"SegmentReader: dump segment: \" + segment", "loggerLevel": "info", "TemplatePattern": "SegmentReader: dump segment: <P>"}
{"classname": "segment.SegmentReader", "TemplateID": 961, "logline": "\"Couldn't copy the content of \" + partFile.toString()  + \" into \" + dumpFile.toString()", "loggerLevel": "warn", "TemplatePattern": "Couldn't copy the content of <P> into <P>"}
{"classname": "segment.SegmentReader", "TemplateID": 962, "logline": "exception.getMessage()", "loggerLevel": "warn", "TemplatePattern": "<P> "}
{"classname": "segment.SegmentReader", "TemplateID": 963, "logline": "\"SegmentReader: done\"", "loggerLevel": "info", "TemplatePattern": "SegmentReader: done"}
{"classname": "segment.SegmentReader", "TemplateID": 964, "logline": "\"SegmentReader: get '\" + key + \"'\"", "loggerLevel": "info", "TemplatePattern": "SegmentReader: get '<P>'"}
{"classname": "segment.SegmentReader", "TemplateID": 965, "logline": "\"Exception:\", e", "loggerLevel": "error", "TemplatePattern": "Exception:<P>"}
{"classname": "segment.SegmentReader", "TemplateID": 966, "logline": "\"Exception:\", e", "loggerLevel": "error", "TemplatePattern": "Exception:<P>"}
{"classname": "segment.SegmentReader", "TemplateID": 967, "logline": "\"Exception:\", e", "loggerLevel": "error", "TemplatePattern": "Exception:<P>"}
{"classname": "segment.SegmentReader", "TemplateID": 968, "logline": "\"Exception:\", e", "loggerLevel": "error", "TemplatePattern": "Exception:<P>"}
{"classname": "segment.SegmentReader", "TemplateID": 969, "logline": "\"Exception:\", e", "loggerLevel": "error", "TemplatePattern": "Exception:<P>"}
{"classname": "segment.SegmentReader", "TemplateID": 970, "logline": "\"Exception:\", e", "loggerLevel": "error", "TemplatePattern": "Exception:<P>"}
{"classname": "segment.SegmentReader", "TemplateID": 971, "logline": "\"(\" + cnt + \" to retrieve)\"", "loggerLevel": "debug", "TemplatePattern": "(<P> to retrieve)"}
{"classname": "segment.SegmentReader", "TemplateID": 972, "logline": "\"Missing required argument: <segment_dir>\"", "loggerLevel": "none", "TemplatePattern": "Missing required argument: <segment_dir>"}
{"classname": "segment.SegmentReader", "TemplateID": 973, "logline": "\"Missing required argument: <output>\"", "loggerLevel": "none", "TemplatePattern": "Missing required argument: <output>"}
{"classname": "segment.SegmentReader", "TemplateID": 974, "logline": "\"Missing required argument: <segment_dir>\"", "loggerLevel": "none", "TemplatePattern": "Missing required argument: <segment_dir>"}
{"classname": "segment.SegmentReader", "TemplateID": 975, "logline": "\"Missing required argument: <keyValue>\"", "loggerLevel": "none", "TemplatePattern": "Missing required argument: <keyValue>"}
{"classname": "segment.SegmentReader", "TemplateID": 976, "logline": "\"Invalid operation: \" + args[0]", "loggerLevel": "none", "TemplatePattern": "Invalid operation: <P>"}
{"classname": "segment.SegmentReader", "TemplateID": 977, "logline": "\"* General options:\"", "loggerLevel": "none", "TemplatePattern": "* General options:"}
{"classname": "segment.SegmentReader", "TemplateID": 978, "logline": "\"\\t-nocontent\\tignore content directory\"", "loggerLevel": "none", "TemplatePattern": "\\t-nocontent\\tignore content directory"}
{"classname": "segment.SegmentReader", "TemplateID": 979, "logline": "\"\\t-nofetch\\tignore crawl_fetch directory\"", "loggerLevel": "none", "TemplatePattern": "\\t-nofetch\\tignore crawl_fetch directory"}
{"classname": "segment.SegmentReader", "TemplateID": 980, "logline": "\"\\t-nogenerate\\tignore crawl_generate directory\"", "loggerLevel": "none", "TemplatePattern": "\\t-nogenerate\\tignore crawl_generate directory"}
{"classname": "segment.SegmentReader", "TemplateID": 981, "logline": "\"\\t-noparse\\tignore crawl_parse directory\"", "loggerLevel": "none", "TemplatePattern": "\\t-noparse\\tignore crawl_parse directory"}
{"classname": "segment.SegmentReader", "TemplateID": 982, "logline": "\"\\t-noparsedata\\tignore parse_data directory\"", "loggerLevel": "none", "TemplatePattern": "\\t-noparsedata\\tignore parse_data directory"}
{"classname": "segment.SegmentReader", "TemplateID": 983, "logline": "\"\\t-noparsetext\\tignore parse_text directory\"", "loggerLevel": "none", "TemplatePattern": "\\t-noparsetext\\tignore parse_text directory"}
{"classname": "segment.SegmentReader", "TemplateID": 984, "logline": "", "loggerLevel": "none", "TemplatePattern": "<P>"}
{"classname": "segment.SegmentReader", "TemplateID": 985, "logline": "\"\\t<segment_dir>\\tname of the segment directory.\"", "loggerLevel": "none", "TemplatePattern": "\\t<segment_dir>\\tname of the segment directory."}
{"classname": "segment.SegmentReader", "TemplateID": 986, "logline": "", "loggerLevel": "none", "TemplatePattern": "<P>"}
{"classname": "segment.SegmentReader", "TemplateID": 987, "logline": "", "loggerLevel": "none", "TemplatePattern": "<P>"}
{"classname": "segment.SegmentReader", "TemplateID": 988, "logline": "\"\\t<segment_dir>\\tname of the segment directory.\"", "loggerLevel": "none", "TemplatePattern": "\\t<segment_dir>\\tname of the segment directory."}
{"classname": "segment.SegmentReader", "TemplateID": 989, "logline": "\"\\t<keyValue>\\tvalue of the key (url).\"", "loggerLevel": "none", "TemplatePattern": "\\t<keyValue>\\tvalue of the key (url)."}
{"classname": "segment.SegmentMerger", "TemplateID": 990, "logline": "\"Running OIF.next()\"", "loggerLevel": "debug", "TemplatePattern": "Running OIF.next()"}
{"classname": "segment.SegmentMerger", "TemplateID": 991, "logline": "\"Slice size: \" + sliceSize + \" URLs.\"", "loggerLevel": "info", "TemplatePattern": "Slice size: <P> URLs."}
{"classname": "segment.SegmentMerger", "TemplateID": 992, "logline": "\"Skipping \" + url + \":\" + e.getMessage()", "loggerLevel": "warn", "TemplatePattern": "Skipping <P>:<P>"}
{"classname": "segment.SegmentMerger", "TemplateID": 993, "logline": "\"Skipping key \" + url + \": \" + e.getMessage()", "loggerLevel": "warn", "TemplatePattern": "Skipping key <P>: <P>"}
{"classname": "segment.SegmentMerger", "TemplateID": 994, "logline": "\"Merging \" + segs.length + \" segments to \" + out + \"/\"  + segmentName", "loggerLevel": "info", "TemplatePattern": "Merging <P> segments to <P>/<P>"}
{"classname": "segment.SegmentMerger", "TemplateID": 995, "logline": "\"Input dir \" + segs[i] + \" doesn't exist, skipping.\"", "loggerLevel": "warn", "TemplatePattern": "Input dir <P> doesn't exist, skipping."}
{"classname": "segment.SegmentMerger", "TemplateID": 996, "logline": "\"SegmentMerger:   adding \" + segs[i]", "loggerLevel": "info", "TemplatePattern": "SegmentMerger:   adding <P>"}
{"classname": "segment.SegmentMerger", "TemplateID": 997, "logline": "\"SegmentMerger: using segment data from:\" + sb.toString()", "loggerLevel": "info", "TemplatePattern": "SegmentMerger: using segment data from:<P>"}
{"classname": "segment.SegmentMerger", "TemplateID": 998, "logline": "\"\\tseg1 seg2 ...\\tlist of segment dirs\"", "loggerLevel": "none", "TemplatePattern": "\\tseg1 seg2 ...\\tlist of segment dirs"}
{"classname": "segment.SegmentMerger", "TemplateID": 999, "logline": "\"ERROR: No input segments.\"", "loggerLevel": "none", "TemplatePattern": "ERROR: No input segments."}
{"classname": "impl.JobWorker", "TemplateID": 1000, "logline": "\"Cannot run job worker!\", e", "loggerLevel": "error", "TemplatePattern": "Cannot run job worker!<P>"}
{"classname": "service.NutchServer", "TemplateID": 1001, "logline": "\"Starting NutchServer on {}:{}  ...\", host, port", "loggerLevel": "info", "TemplatePattern": "Starting NutchServer on {}:{}  ...<P>"}
{"classname": "service.NutchServer", "TemplateID": 1002, "logline": "\"Started Nutch Server on {}:{} at {}\", host, port, started", "loggerLevel": "info", "TemplatePattern": "Started Nutch Server on {}:{} at {}<P>"}
{"classname": "service.NutchServer", "TemplateID": 1003, "logline": "\"Started Nutch Server on \" + host + \":\" + port + \" at \" + started", "loggerLevel": "none", "TemplatePattern": "Started Nutch Server on <P>:<P> at <P>"}
{"classname": "plugin.SimpleTestPlugin", "TemplateID": 1004, "logline": "\"start up Plugin: \" + getDescriptor().getPluginId()", "loggerLevel": "none", "TemplatePattern": "start up Plugin: <P>"}
{"classname": "plugin.SimpleTestPlugin", "TemplateID": 1005, "logline": "\"shutdown Plugin: \" + getDescriptor().getPluginId()", "loggerLevel": "none", "TemplatePattern": "shutdown Plugin: <P>"}
{"classname": "metadata.TestSpellCheckedMetadata", "TemplateID": 1006, "logline": "NUM_ITERATIONS + \" spellchecked metadata I/O time:\"  + (System.currentTimeMillis() - start) + \"ms.\"", "loggerLevel": "none", "TemplatePattern": "<P>  spellchecked metadata I/O time:<P>ms."}
{"classname": "proxy.LogDebugHandler", "TemplateID": 1007, "logline": "\"-- \" + req.getMethod() + \" \" + req.getUri().toString() + \"\\n\"  + req.getConnection().getRequestFields()", "loggerLevel": "debug", "TemplatePattern": "-- <P> <P>\\n<P>"}
{"classname": "proxy.ProxyTestbed", "TemplateID": 1008, "logline": "\"Unknown argument: \" + args[i]", "loggerLevel": "error", "TemplatePattern": "Unknown argument: <P>"}
{"classname": "proxy.ProxyTestbed", "TemplateID": 1009, "logline": "\"* Added debug handler.\"", "loggerLevel": "info", "TemplatePattern": "* Added debug handler."}
{"classname": "proxy.ProxyTestbed", "TemplateID": 1010, "logline": "\"* Added delay handler: \"  /root/nutch-git-source/nutch/src/test/org/apache/nutch/tools/proxy/ProxyTestbed.java-          + (delayVal < 0 ? \"random delay up to \" + (-delayVal)  : \"constant delay of \" + delayVal)", "loggerLevel": "info", "TemplatePattern": "* Added delay handler: <P> <P>random delay up to <P>"}
{"classname": "proxy.ProxyTestbed", "TemplateID": 1011, "logline": "\"* Added delay handler: \"  /root/nutch-git-source/nutch/src/test/org/apache/nutch/tools/proxy/ProxyTestbed.java-          + (delayVal < 0 ? \"random delay up to \" + (-delayVal)  : \"constant delay of \" + delayVal)", "loggerLevel": "info", "TemplatePattern": "* Added delay handler: <P> <P>constant delay of <P>"}
{"classname": "proxy.ProxyTestbed", "TemplateID": 1012, "logline": "\"* Added segment handler for: \" + p", "loggerLevel": "info", "TemplatePattern": "* Added segment handler for: <P>"}
{"classname": "proxy.ProxyTestbed", "TemplateID": 1013, "logline": "\"Skipping segment '\" + p + \"': \"  + StringUtils.stringifyException(e)", "loggerLevel": "warn", "TemplatePattern": "Skipping segment '<P>': <P>"}
{"classname": "proxy.ProxyTestbed", "TemplateID": 1014, "logline": "\"* Adding forwarding proxy for all unknown urls ...\"", "loggerLevel": "info", "TemplatePattern": "* Adding forwarding proxy for all unknown urls ..."}
{"classname": "proxy.ProxyTestbed", "TemplateID": 1015, "logline": "\"* Added fake handler for remaining URLs.\"", "loggerLevel": "info", "TemplatePattern": "* Added fake handler for remaining URLs."}
{"classname": "proxy.SegmentHandler", "TemplateID": 1016, "logline": "\"URI: \" + uri", "loggerLevel": "info", "TemplatePattern": "URI: <P>"}
{"classname": "proxy.SegmentHandler", "TemplateID": 1017, "logline": "\"-got \" + cd.toString()", "loggerLevel": "info", "TemplatePattern": "-got <P>"}
{"classname": "proxy.SegmentHandler", "TemplateID": 1018, "logline": "\"-data len=\" + data.length", "loggerLevel": "debug", "TemplatePattern": "-data len=<P>"}
{"classname": "proxy.SegmentHandler", "TemplateID": 1019, "logline": "\"- \" + names.length + \" meta\"", "loggerLevel": "debug", "TemplatePattern": "- <P> meta"}
{"classname": "proxy.SegmentHandler", "TemplateID": 1020, "logline": "\" -not found \" + url", "loggerLevel": "info", "TemplatePattern": " -not found <P>"}
{"classname": "proxy.SegmentHandler", "TemplateID": 1021, "logline": "StringUtils.stringifyException(e)", "loggerLevel": "warn", "TemplatePattern": "<P> "}
{"classname": "util.TestGZIPUtils", "TemplateID": 1022, "logline": "\"original data has len \" + origBytes.length", "loggerLevel": "none", "TemplatePattern": "original data has len <P>"}
{"classname": "util.TestGZIPUtils", "TemplateID": 1023, "logline": "\"compressed data has len \" + compressedBytes.length", "loggerLevel": "none", "TemplatePattern": "compressed data has len <P>"}
{"classname": "util.TestGZIPUtils", "TemplateID": 1024, "logline": "\"truncated to len \" + i + \", trunc is null\"", "loggerLevel": "none", "TemplatePattern": "truncated to len <P>, trunc is null"}
{"classname": "util.TestGZIPUtils", "TemplateID": 1025, "logline": "\"truncated to len \" + i + \", trunc.length=  \"  + trunc.length", "loggerLevel": "none", "TemplatePattern": "truncated to len <P>, trunc.length=  <P>"}
{"classname": "util.TestPrefixStringMatcher", "TemplateID": 1026, "logline": "\"got \" + numMatches + \" matches out of \"  + numInputsTested + \" tests\"", "loggerLevel": "none", "TemplatePattern": "got <P> matches out of <P> tests"}
{"classname": "util.TestSuffixStringMatcher", "TemplateID": 1027, "logline": "\"got \" + numMatches + \" matches out of \"  + numInputsTested + \" tests\"", "loggerLevel": "none", "TemplatePattern": "got <P> matches out of <P> tests"}
{"classname": "crawl.CrawlDBTestUtil", "TemplateID": 1028, "logline": "\"* creating crawldb: \" + crawldb", "loggerLevel": "trace", "TemplatePattern": "* creating crawldb: <P>"}
{"classname": "crawl.CrawlDBTestUtil", "TemplateID": 1029, "logline": "\"adding:\" + row.url.toString()", "loggerLevel": "info", "TemplatePattern": "adding:<P>"}
{"classname": "crawl.CrawlDbUpdateUtil", "TemplateID": 1030, "logline": "StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "crawl.TestInjector", "TemplateID": 1031, "logline": "\"reading:\" + dbfile", "loggerLevel": "none", "TemplatePattern": "reading:<P>"}
{"classname": "crawl.TestInjector", "TemplateID": 1032, "logline": "\"reading:\" + dbfile", "loggerLevel": "none", "TemplatePattern": "reading:<P>"}
{"classname": "crawl.ContinuousCrawlTestUtil", "TemplateID": 1033, "logline": "\"document content changed\"", "loggerLevel": "info", "TemplatePattern": "document content changed"}
{"classname": "crawl.ContinuousCrawlTestUtil", "TemplateID": 1034, "logline": "\"Emulate a continuous crawl, launched every \"  /root/nutch-git-source/nutch/src/test/org/apache/nutch/crawl/ContinuousCrawlTestUtil.java-        + (interval / (FetchSchedule.SECONDS_PER_DAY * 1000)) + \" day (\"  + (interval / 1000) + \" seconds)\"", "loggerLevel": "info", "TemplatePattern": "Emulate a continuous crawl, launched every <P> day (<P> seconds)"}
{"classname": "crawl.ContinuousCrawlTestUtil", "TemplateID": 1035, "logline": "\"check: \" + new Date(nextTime)", "loggerLevel": "info", "TemplatePattern": "check: <P>"}
{"classname": "crawl.ContinuousCrawlTestUtil", "TemplateID": 1036, "logline": "\"... fetching now (\" + new Date(nextTime) + \")\"", "loggerLevel": "info", "TemplatePattern": "... fetching now (<P>)"}
{"classname": "crawl.ContinuousCrawlTestUtil", "TemplateID": 1037, "logline": "\"(last fetch: \" + new Date(lastFetchTime) + \" = \"  + TimingUtil.elapsedTime(lastFetchTime, nextTime) + \" ago)\"", "loggerLevel": "info", "TemplatePattern": "(last fetch: <P> = <P> ago)"}
{"classname": "crawl.ContinuousCrawlTestUtil", "TemplateID": 1038, "logline": "\"previously in CrawlDb: \" + copyDbDatum", "loggerLevel": "info", "TemplatePattern": "previously in CrawlDb: <P>"}
{"classname": "crawl.ContinuousCrawlTestUtil", "TemplateID": 1039, "logline": "\"after shouldFetch(): \" + afterShouldFetch", "loggerLevel": "info", "TemplatePattern": "after shouldFetch(): <P>"}
{"classname": "crawl.ContinuousCrawlTestUtil", "TemplateID": 1040, "logline": "\"fetch: \" + fetchDatum", "loggerLevel": "info", "TemplatePattern": "fetch: <P>"}
{"classname": "crawl.ContinuousCrawlTestUtil", "TemplateID": 1041, "logline": "\"wrong result in CrawlDb: \" + res.get(0)", "loggerLevel": "warn", "TemplatePattern": "wrong result in CrawlDb: <P>"}
{"classname": "crawl.ContinuousCrawlTestUtil", "TemplateID": 1042, "logline": "\"Max. number of errors \" + maxErrors  + \" reached. Stopping.\"", "loggerLevel": "error", "TemplatePattern": "Max. number of errors <P> reached. Stopping."}
{"classname": "crawl.TestCrawlDbMerger", "TemplateID": 1043, "logline": "\"url=\" + url", "loggerLevel": "none", "TemplatePattern": "url=<P>"}
{"classname": "crawl.TestCrawlDbMerger", "TemplateID": 1044, "logline": "\" cd \" + cd", "loggerLevel": "none", "TemplatePattern": " cd <P>"}
{"classname": "crawl.TestCrawlDbMerger", "TemplateID": 1045, "logline": "\" res \" + res", "loggerLevel": "none", "TemplatePattern": " res <P>"}
{"classname": "crawl.TODOTestCrawlDbStates", "TemplateID": 1046, "logline": "\"NUTCH-578: test long running continuous crawl with fetch_retry\"", "loggerLevel": "info", "TemplatePattern": "NUTCH-578: test long running continuous crawl with fetch_retry"}
{"classname": "crawl.TODOTestCrawlDbStates", "TemplateID": 1047, "logline": "\"Retry counter > db.fetch.retry.max: \" + result", "loggerLevel": "warn", "TemplatePattern": "Retry counter > db.fetch.retry.max: <P>"}
{"classname": "crawl.TODOTestCrawlDbStates", "TemplateID": 1048, "logline": "\"Retry counter max. value reached (overflow imminent): \"  + result", "loggerLevel": "warn", "TemplatePattern": "Retry counter max. value reached (overflow imminent): <P>"}
{"classname": "crawl.TODOTestCrawlDbStates", "TemplateID": 1049, "logline": "\"Retry counter overflow: \" + result", "loggerLevel": "error", "TemplatePattern": "Retry counter overflow: <P>"}
{"classname": "crawl.TODOTestCrawlDbStates", "TemplateID": 1050, "logline": "\"ok: \" + result", "loggerLevel": "info", "TemplatePattern": "ok: <P>"}
{"classname": "crawl.TODOTestCrawlDbStates", "TemplateID": 1051, "logline": "\"ok: \" + result", "loggerLevel": "info", "TemplatePattern": "ok: <P>"}
{"classname": "crawl.TODOTestCrawlDbStates", "TemplateID": 1052, "logline": "\"wrong: \" + result", "loggerLevel": "warn", "TemplatePattern": "wrong: <P>"}
{"classname": "crawl.TODOTestCrawlDbStates", "TemplateID": 1053, "logline": "\"NUTCH-1564 test SYNC_DELTA calculation of AdaptiveFetchSchedule\"", "loggerLevel": "info", "TemplatePattern": "NUTCH-1564 test SYNC_DELTA calculation of AdaptiveFetchSchedule"}
{"classname": "crawl.TODOTestCrawlDbStates", "TemplateID": 1054, "logline": "\"Next fetch time is in the past: \" + result", "loggerLevel": "error", "TemplatePattern": "Next fetch time is in the past: <P>"}
{"classname": "crawl.TODOTestCrawlDbStates", "TemplateID": 1055, "logline": "\"Less then one minute until next fetch: \" + result", "loggerLevel": "error", "TemplatePattern": "Less then one minute until next fetch: <P>"}
{"classname": "crawl.TODOTestCrawlDbStates", "TemplateID": 1056, "logline": "\"Interval until next fetch time (\"  /root/nutch-git-source/nutch/src/test/org/apache/nutch/crawl/TODOTestCrawlDbStates.java-              + TimingUtil.elapsedTime(fetchTime, result.getFetchTime())  + \") is not within min. and max. interval: \" + result", "loggerLevel": "error", "TemplatePattern": "Interval until next fetch time (<P>) is not within min. and max. interval: <P>"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1057, "logline": "\"Test CrawlDatum state transitions\"", "loggerLevel": "info", "TemplatePattern": "Test CrawlDatum state transitions"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1058, "logline": "\"Testing state transitions with \" + sched", "loggerLevel": "info", "TemplatePattern": "Testing state transitions with <P>"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1059, "logline": "fromDbStatusName + \" + \" + fetchStatusName + \" => \"  + getStatusName(toDbStatus)", "loggerLevel": "info", "TemplatePattern": "<P>  + <P> => <P>"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1060, "logline": "\"Test CrawlDatum states in Injector after inject\"", "loggerLevel": "info", "TemplatePattern": "Test CrawlDatum states in Injector after inject"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1061, "logline": "\"Testing inject with \" + sched", "loggerLevel": "info", "TemplatePattern": "Testing inject with <P>"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1062, "logline": "\"inject \"  /root/nutch-git-source/nutch/src/test/org/apache/nutch/crawl/TestCrawlDbStates.java-            + (fromDbStatus == -1 ? \"<not in CrawlDb>\" : CrawlDatum  /root/nutch-git-source/nutch/src/test/org/apache/nutch/crawl/TestCrawlDbStates.java-                .getStatusName(fromDbStatus)) + \" + \"  /root/nutch-git-source/nutch/src/test/org/apache/nutch/crawl/TestCrawlDbStates.java-            + getStatusName(STATUS_INJECTED) + \" => \"  + getStatusName(toDbStatus)", "loggerLevel": "info", "TemplatePattern": "inject <P> <P><not in CrawlDb><P>"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1063, "logline": "\"inject \"  /root/nutch-git-source/nutch/src/test/org/apache/nutch/crawl/TestCrawlDbStates.java-            + (fromDbStatus == -1 ? \"<not in CrawlDb>\" : CrawlDatum  /root/nutch-git-source/nutch/src/test/org/apache/nutch/crawl/TestCrawlDbStates.java-                .getStatusName(fromDbStatus)) + \" + \"  /root/nutch-git-source/nutch/src/test/org/apache/nutch/crawl/TestCrawlDbStates.java-            + getStatusName(STATUS_INJECTED) + \" => \"  + getStatusName(toDbStatus)", "loggerLevel": "info", "TemplatePattern": "inject <P> <P> + <P> => <P>"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1064, "logline": "StringUtils.stringifyException(e)", "loggerLevel": "error", "TemplatePattern": "<P> "}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1065, "logline": "\"Test state notmodified\"", "loggerLevel": "info", "TemplatePattern": "Test state notmodified"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1066, "logline": "desc", "loggerLevel": "info", "TemplatePattern": "<P> "}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1067, "logline": "desc", "loggerLevel": "info", "TemplatePattern": "<P> "}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1068, "logline": "\"last effective fetch (HTTP 200, not HTTP 304), at \"  /root/nutch-git-source/nutch/src/test/org/apache/nutch/crawl/TestCrawlDbStates.java-            + new Date(lastFetchTime)  /root/nutch-git-source/nutch/src/test/org/apache/nutch/crawl/TestCrawlDbStates.java-            + \", took place more than db.fetch.interval.max time, \"  + \"segment containing fetched content may have been deleted\"", "loggerLevel": "error", "TemplatePattern": "last effective fetch (HTTP 200, not HTTP 304), at <P>, took place more than db.fetch.interval.max time, <P>segment containing fetched content may have been deleted"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1069, "logline": "\"document has changed (signature changed) but state is still \"  + getStatusName(STATUS_DB_NOTMODIFIED)", "loggerLevel": "error", "TemplatePattern": "document has changed (signature changed) but state is still <P>"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1070, "logline": "\"ok: \" + result", "loggerLevel": "info", "TemplatePattern": "ok: <P>"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1071, "logline": "\"notmodified without previous fetch\"", "loggerLevel": "warn", "TemplatePattern": "notmodified without previous fetch"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1072, "logline": "\"ok (first fetch): \" + result", "loggerLevel": "info", "TemplatePattern": "ok (first fetch): <P>"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1073, "logline": "\"ok (content changed): \" + result", "loggerLevel": "info", "TemplatePattern": "ok (content changed): <P>"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1074, "logline": "\"document has not changed, db_notmodified expected\"", "loggerLevel": "warn", "TemplatePattern": "document has not changed, db_notmodified expected"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1075, "logline": "\"state set to unfetched by AdaptiveFetchSchedule\"", "loggerLevel": "info", "TemplatePattern": "state set to unfetched by AdaptiveFetchSchedule"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1076, "logline": "\"must reset signature: \" + result", "loggerLevel": "warn", "TemplatePattern": "must reset signature: <P>"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1077, "logline": "\"ok: \" + result", "loggerLevel": "info", "TemplatePattern": "ok: <P>"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1078, "logline": "\"wrong result: \" + result", "loggerLevel": "warn", "TemplatePattern": "wrong result: <P>"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1079, "logline": "\"modified time not set (TODO: not set by DefaultFetchSchedule)\"", "loggerLevel": "error", "TemplatePattern": "modified time not set (TODO: not set by DefaultFetchSchedule)"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1080, "logline": "\"wrong modified time: \" + new Date(result.getModifiedTime())  + \" (expected \" + new Date(modifiedTime) + \")\"", "loggerLevel": "error", "TemplatePattern": "wrong modified time: <P> (expected <P>)"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1081, "logline": "\"fetched with HTTP \" + httpCode + \" => \"  + getStatusName(datum.getStatus())", "loggerLevel": "info", "TemplatePattern": "fetched with HTTP <P> => <P>"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1082, "logline": "\"NUTCH-1245: test long running continuous crawl\"", "loggerLevel": "info", "TemplatePattern": "NUTCH-1245: test long running continuous crawl"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1083, "logline": "\"NUTCH-1245 (misconfiguration): test with db.fetch.interval.default > (1.5 * db.fetch.interval.max)\"", "loggerLevel": "info", "TemplatePattern": "NUTCH-1245 (misconfiguration): test with db.fetch.interval.default > (1.5 * db.fetch.interval.max)"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1084, "logline": "\"NUTCH-1422 must reset signature for redirects and similar states\"", "loggerLevel": "info", "TemplatePattern": "NUTCH-1422 must reset signature for redirects and similar states"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1085, "logline": "\"Testing reset signature with \" + sched", "loggerLevel": "info", "TemplatePattern": "Testing reset signature with <P>"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1086, "logline": "\"Step \" + counter + \": fetched with \"  + getStatusName(fetchState)", "loggerLevel": "info", "TemplatePattern": "Step <P>: fetched with <P>"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1087, "logline": "\"Should never get into state \"  /root/nutch-git-source/nutch/src/test/org/apache/nutch/crawl/TestCrawlDbStates.java-            + getStatusName(STATUS_DB_NOTMODIFIED) + \" from \"  + getStatusName(fetchState)", "loggerLevel": "error", "TemplatePattern": "Should never get into state <P> from <P>"}
{"classname": "crawl.TestCrawlDbStates", "TemplateID": 1088, "logline": "\"Signature not reset in state \"  + getStatusName(result.getStatus())", "loggerLevel": "error", "TemplatePattern": "Signature not reset in state <P>"}
{"classname": "segment.TestSegmentMergerCrawlDatums", "TemplateID": 1089, "logline": "\"Reading status for: \" + key.toString() + \" > \"  + CrawlDatum.getStatusName(value.getStatus())", "loggerLevel": "info", "TemplatePattern": "Reading status for: <P> > <P>"}
{"classname": "segment.TestSegmentMergerCrawlDatums", "TemplateID": 1090, "logline": "\"\\nSegment: \" + segment.toString()", "loggerLevel": "info", "TemplatePattern": "\\nSegment: <P>"}
{"classname": "segment.TestSegmentMergerCrawlDatums", "TemplateID": 1091, "logline": "url + \" > \" + CrawlDatum.getStatusName(CrawlDatum.STATUS_LINKED)", "loggerLevel": "info", "TemplatePattern": "<P>  > <P>"}
{"classname": "segment.TestSegmentMergerCrawlDatums", "TemplateID": 1092, "logline": "url + \" > \" + CrawlDatum.getStatusName(status)", "loggerLevel": "info", "TemplatePattern": "<P>  > <P>"}
{"classname": "segment.TestSegmentMergerCrawlDatums", "TemplateID": 1093, "logline": "redirectUrl + \" > \"  + CrawlDatum.getStatusName(CrawlDatum.STATUS_FETCH_REDIR_TEMP)", "loggerLevel": "info", "TemplatePattern": "<P>  > <P>"}
{"classname": "segment.TestSegmentMerger", "TemplateID": 1094, "logline": "\"Creating large segment 1...\"", "loggerLevel": "none", "TemplatePattern": "Creating large segment 1..."}
{"classname": "segment.TestSegmentMerger", "TemplateID": 1095, "logline": "\" - done: \" + countSeg1 + \" records.\"", "loggerLevel": "none", "TemplatePattern": " - done: <P> records."}
{"classname": "segment.TestSegmentMerger", "TemplateID": 1096, "logline": "\"Creating large segment 2...\"", "loggerLevel": "none", "TemplatePattern": "Creating large segment 2..."}
{"classname": "segment.TestSegmentMerger", "TemplateID": 1097, "logline": "\" - done: \" + countSeg2 + \" records.\"", "loggerLevel": "none", "TemplatePattern": " - done: <P> records."}
{"status": "added", "loggerLevel": "warn", "logline": "\"Cannot parse url: \" + url, e", "classname": "fetcher.Fetcher", "TemplateID": 1098, "TemplatePattern": "Cannot parse url: <P>"}
{"status": "added", "loggerLevel": "warn", "logline": "\"Unable to resolve: \" + u.getHost() + \", skipping.\"", "classname": "fetcher.Fetcher", "TemplateID": 1099, "TemplatePattern": "Unable to resolve: <P>, skipping."}
{"status": "added", "loggerLevel": "warn", "logline": "\"Unknown domain for url: \" + url + \", using URL string as key\"", "classname": "fetcher.Fetcher", "TemplateID": 1100, "TemplatePattern": "Unknown domain for url: <P>, using URL string as key"}
{"status": "added", "loggerLevel": "warn", "logline": "\"Unknown host for url: \" + url + \", using URL string as key\"", "classname": "fetcher.Fetcher", "TemplateID": 1101, "TemplatePattern": "Unknown host for url: <P>, using URL string as key"}
{"status": "added", "loggerLevel": "error", "logline": " \"Cannot remove FetchItem from queue or cannot add it to inProgress queue\", e", "classname": "fetcher.Fetcher", "TemplateID": 1102, "TemplatePattern": "<P> Cannot remove FetchItem from queue or cannot add it to inProgress queue<P>"}
{"status": "added", "loggerLevel": "info", "logline": "\"  maxThreads    = \" + maxThreads", "classname": "fetcher.Fetcher", "TemplateID": 1103, "TemplatePattern": "  maxThreads    = <P>"}
{"status": "added", "loggerLevel": "info", "logline": "\"  inProgress    = \" + inProgress.get()", "classname": "fetcher.Fetcher", "TemplateID": 1104, "TemplatePattern": "  inProgress    = <P>"}
{"status": "added", "loggerLevel": "info", "logline": "\"  crawlDelay    = \" + crawlDelay", "classname": "fetcher.Fetcher", "TemplateID": 1105, "TemplatePattern": "  crawlDelay    = <P>"}
{"status": "added", "loggerLevel": "info", "logline": "\"  minCrawlDelay = \" + minCrawlDelay", "classname": "fetcher.Fetcher", "TemplateID": 1106, "TemplatePattern": "  minCrawlDelay = <P>"}
{"status": "added", "loggerLevel": "info", "logline": "\"  nextFetchTime = \" + nextFetchTime.get()", "classname": "fetcher.Fetcher", "TemplateID": 1107, "TemplatePattern": "  nextFetchTime = <P>"}
{"status": "added", "loggerLevel": "info", "logline": "\"  now           = \" + System.currentTimeMillis()", "classname": "fetcher.Fetcher", "TemplateID": 1108, "TemplatePattern": "  now           = <P>"}
{"status": "added", "loggerLevel": "info", "logline": "\"  \" + i + \". \" + it.url", "classname": "fetcher.Fetcher", "TemplateID": 1109, "TemplatePattern": "  <P>. <P>"}
{"status": "added", "loggerLevel": "error", "logline": "\"Unknown partition mode : \" + queueMode + \" - forcing to byHost\"", "classname": "fetcher.Fetcher", "TemplateID": 1110, "TemplatePattern": "Unknown partition mode : <P> - forcing to byHost"}
{"status": "added", "loggerLevel": "info", "logline": "\"Using queue mode : \" + queueMode", "classname": "fetcher.Fetcher", "TemplateID": 1111, "TemplatePattern": "Using queue mode : <P>"}
{"status": "added", "loggerLevel": "warn", "logline": "\"Attempting to finish item from unknown queue: \" + it", "classname": "fetcher.Fetcher", "TemplateID": 1112, "TemplatePattern": "Attempting to finish item from unknown queue: <P>"}
{"status": "added", "loggerLevel": "info", "logline": "\"* queue: \" + id + \" >> dropping! \"", "classname": "fetcher.Fetcher", "TemplateID": 1113, "TemplatePattern": "* queue: <P> >> dropping! "}
{"status": "added", "loggerLevel": "info", "logline": "\"* queue: \" + queueid + \" >> removed \" + deleted + \" URLs from queue because \" + excCount + \" exceptions occurred\"", "classname": "fetcher.Fetcher", "TemplateID": 1114, "TemplatePattern": "* queue: <P> >> removed <P> URLs from queue because <P> exceptions occurred"}
{"status": "added", "loggerLevel": "info", "logline": "\"* queue: \" + id", "classname": "fetcher.Fetcher", "TemplateID": 1115, "TemplatePattern": "* queue: <P>"}
{"status": "added", "loggerLevel": "error", "logline": "\"QueueFeeder error reading input, record \" + cnt, e", "classname": "fetcher.Fetcher", "TemplateID": 1116, "TemplatePattern": "QueueFeeder error reading input, record <P>"}
{"status": "added", "loggerLevel": "debug", "logline": "\"-feeding \" + feed + \" input urls ...\"", "classname": "fetcher.Fetcher", "TemplateID": 1117, "TemplatePattern": "-feeding <P> input urls ..."}
{"status": "added", "loggerLevel": "error", "logline": "\"QueueFeeder error reading input, record \" + cnt, e", "classname": "fetcher.Fetcher", "TemplateID": 1118, "TemplatePattern": "QueueFeeder error reading input, record <P>"}
{"status": "added", "loggerLevel": "info", "logline": "\"QueueFeeder finished: total \" + cnt + \" records + hit by time limit :\" + timelimitcount", "classname": "fetcher.Fetcher", "TemplateID": 1119, "TemplatePattern": "QueueFeeder finished: total <P> records + hit by time limit :<P>"}
{"status": "added", "loggerLevel": "error", "logline": "\"Unknown partition mode : \" + queueMode + \" - forcing to byHost\"", "classname": "fetcher.Fetcher", "TemplateID": 1120, "TemplatePattern": "Unknown partition mode : <P> - forcing to byHost"}
{"status": "added", "loggerLevel": "info", "logline": "\"Using queue mode : \" + queueMode", "classname": "fetcher.Fetcher", "TemplateID": 1121, "TemplatePattern": "Using queue mode : <P>"}
{"status": "added", "loggerLevel": "debug", "logline": "getName() + \" set to halted\"", "classname": "fetcher.Fetcher", "TemplateID": 1122, "TemplatePattern": "<P>  set to halted"}
{"status": "added", "loggerLevel": "debug", "logline": "getName() + \" spin-waiting ...\"", "classname": "fetcher.Fetcher", "TemplateID": 1123, "TemplatePattern": "<P>  spin-waiting ..."}
{"status": "added", "loggerLevel": "info", "logline": "\"Thread \" + getName() + \" has no more work available\"", "classname": "fetcher.Fetcher", "TemplateID": 1124, "TemplatePattern": "Thread <P> has no more work available"}
{"status": "added", "loggerLevel": "info", "logline": "\"fetching \" + fit.url + \" (queue crawl delay=\" + fetchQueues.getFetchItemQueue(fit.queueID).crawlDelay + \"ms)\"", "classname": "fetcher.Fetcher", "TemplateID": 1125, "TemplatePattern": "fetching <P> (queue crawl delay=<P>ms)"}
{"status": "added", "loggerLevel": "debug", "logline": "\"redirectCount=\" + redirectCount", "classname": "fetcher.Fetcher", "TemplateID": 1126, "TemplatePattern": "redirectCount=<P>"}
{"status": "added", "loggerLevel": "debug", "logline": "\"Denied by robots.txt: \" + fit.url", "classname": "fetcher.Fetcher", "TemplateID": 1127, "TemplatePattern": "Denied by robots.txt: <P>"}
{"status": "added", "loggerLevel": "debug", "logline": "\"Crawl-Delay for \" + fit.url + \" too long (\" + rules.getCrawlDelay() + \"), skipping\"", "classname": "fetcher.Fetcher", "TemplateID": 1128, "TemplatePattern": "Crawl-Delay for <P> too long (<P>), skipping"}
{"status": "added", "loggerLevel": "info", "logline": "\"Crawl delay for queue: \" + fit.queueID + \" is set to \" + fiq.crawlDelay + \" as per robots.txt. url: \" + fit.url", "classname": "fetcher.Fetcher", "TemplateID": 1129, "TemplatePattern": "Crawl delay for queue: <P> is set to <P> as per robots.txt. url: <P>"}
{"status": "added", "loggerLevel": "warn", "logline": "\"Unknown ProtocolStatus: \" + status.getCode()", "classname": "fetcher.Fetcher", "TemplateID": 1130, "TemplatePattern": "Unknown ProtocolStatus: <P>"}
{"status": "added", "loggerLevel": "info", "logline": "\" - redirect count exceeded \" + fit.url", "classname": "fetcher.Fetcher", "TemplateID": 1131, "TemplatePattern": " - redirect count exceeded <P>"}
{"status": "added", "loggerLevel": "error", "logline": "\"fetcher caught:\" + e.toString()", "classname": "fetcher.Fetcher", "TemplateID": 1132, "TemplatePattern": "fetcher caught:<P>"}
{"status": "added", "loggerLevel": "info", "logline": "\"-finishing thread \" + getName() + \", activeThreads=\" + activeThreads", "classname": "fetcher.Fetcher", "TemplateID": 1133, "TemplatePattern": "-finishing thread <P>, activeThreads=<P>"}
{"status": "added", "loggerLevel": "debug", "logline": "\" - ignoring redirect \" + redirType + \" from \" + urlString + \" to \" + newUrl + \" because external links are ignored\"", "classname": "fetcher.Fetcher", "TemplateID": 1134, "TemplatePattern": " - ignoring redirect <P> from <P> to <P> because external links are ignored"}
{"status": "added", "loggerLevel": "debug", "logline": "\" - \" + redirType + \" redirect to \" + url + \" (fetching now)\"", "classname": "fetcher.Fetcher", "TemplateID": 1135, "TemplatePattern": " - <P> redirect to <P> (fetching now)"}
{"status": "added", "loggerLevel": "debug", "logline": "\" - \" + redirType + \" redirect to \" + url + \" (fetching later)\"", "classname": "fetcher.Fetcher", "TemplateID": 1136, "TemplatePattern": " - <P> redirect to <P> (fetching later)"}
{"status": "added", "loggerLevel": "debug", "logline": "\" - \" + redirType + \" redirect skipped: \" + (newUrl != null ? \"to same url\" : \"filtered\")", "classname": "fetcher.Fetcher", "TemplateID": 1137, "TemplatePattern": " - <P> redirect skipped: <P>to same url<P>filtered<P>"}
{"status": "added", "loggerLevel": "info", "logline": "\"fetch of \" + url + \" failed with: \" + message", "classname": "fetcher.Fetcher", "TemplateID": 1138, "TemplatePattern": "fetch of <P> failed with: <P>"}
{"status": "added", "loggerLevel": "warn", "logline": "\"Couldn't pass score, url \" + key + \" (\" + e + \")\"", "classname": "fetcher.Fetcher", "TemplateID": 1139, "TemplatePattern": "Couldn't pass score, url <P> (<P>)"}
{"status": "added", "loggerLevel": "warn", "logline": "\"Error parsing: \" + key + \": \" + StringUtils.stringifyException(e)", "classname": "fetcher.Fetcher", "TemplateID": 1140, "TemplatePattern": "Error parsing: <P>: <P>"}
{"status": "added", "loggerLevel": "warn", "logline": "\"Error parsing: \" + key + \": \" + parseStatus", "classname": "fetcher.Fetcher", "TemplateID": 1141, "TemplatePattern": "Error parsing: <P>: <P>"}
{"status": "added", "loggerLevel": "warn", "logline": "\"Couldn't pass score, url \" + key + \" (\" + e + \")\"", "classname": "fetcher.Fetcher", "TemplateID": 1142, "TemplatePattern": "Couldn't pass score, url <P> (<P>)"}
{"status": "added", "loggerLevel": "error", "logline": "\"fetcher caught:\" + e.toString()", "classname": "fetcher.Fetcher", "TemplateID": 1143, "TemplatePattern": "fetcher caught:<P>"}
