{"classname": "suffix.SuffixURLFilter", "TemplatePattern": "Missing urlfilter.suffix.file, all URLs will be rejected!", "TemplateID": 0, "loggerLevel": "warn", "logline": "\"Missing urlfilter.suffix.file, all URLs will be rejected!\""}
{"classname": "suffix.SuffixURLFilter", "TemplatePattern": "ACCEPTED <P>", "TemplateID": 1, "loggerLevel": "none", "logline": "\"ACCEPTED \" + out"}
{"classname": "suffix.SuffixURLFilter", "TemplatePattern": "REJECTED <P>", "TemplateID": 2, "loggerLevel": "none", "logline": "\"REJECTED \" + out"}
{"classname": "suffix.SuffixURLFilter", "TemplatePattern": "Attribute \\<P> is defined for plugin <P> as <P>", "TemplateID": 3, "loggerLevel": "info", "logline": "\"Attribute \\\"file\\\" is defined for plugin \" + pluginName  + \" as \" + attributeFile"}
{"classname": "suffix.SuffixURLFilter", "TemplatePattern": "<P> ", "TemplateID": 4, "loggerLevel": "error", "logline": "e.getMessage()"}
{"classname": "regex.RegexURLNormalizer", "TemplatePattern": "Can't load the default rules! ", "TemplateID": 5, "loggerLevel": "warn", "logline": "\"Can't load the default rules! \""}
{"classname": "regex.RegexURLNormalizer", "TemplatePattern": "Couldn't read default config: <P>", "TemplateID": 6, "loggerLevel": "warn", "logline": "\"Couldn't read default config: \" + e"}
{"classname": "regex.RegexURLNormalizer", "TemplatePattern": "Set config for scope '<P>': <P> rules.", "TemplateID": 7, "loggerLevel": "debug", "logline": "\"Set config for scope '\" + scope + \"': \" + rules.size()  + \" rules.\""}
{"classname": "regex.RegexURLNormalizer", "TemplatePattern": "resource for scope '<P>': <P>", "TemplateID": 8, "loggerLevel": "debug", "logline": "\"resource for scope '\" + scope + \"': \" + configFile"}
{"classname": "regex.RegexURLNormalizer", "TemplatePattern": "Couldn't load resource '<P>': <P>", "TemplateID": 9, "loggerLevel": "warn", "logline": "\"Couldn't load resource '\" + configFile + \"': \" + e"}
{"classname": "regex.RegexURLNormalizer", "TemplatePattern": "can't find rules for scope '<P>', using default", "TemplateID": 10, "loggerLevel": "info", "logline": "\"can't find rules for scope '\" + scope + \"', using default\""}
{"classname": "regex.RegexURLNormalizer", "TemplatePattern": "loading <P>", "TemplateID": 11, "loggerLevel": "info", "logline": "\"loading \" + filename"}
{"classname": "regex.RegexURLNormalizer", "TemplatePattern": "Error loading rules from '<P>': <P>", "TemplateID": 12, "loggerLevel": "error", "logline": "\"Error loading rules from '\" + filename + \"': \" + e"}
{"classname": "regex.RegexURLNormalizer", "TemplatePattern": "bad conf file: top-level element not <regex-normalize>", "TemplateID": 13, "loggerLevel": "error", "logline": "\"bad conf file: top-level element not <regex-normalize>\""}
{"classname": "regex.RegexURLNormalizer", "TemplatePattern": "bad conf file: element not <regex>", "TemplateID": 14, "loggerLevel": "warn", "logline": "\"bad conf file: element not <regex>\""}
{"classname": "regex.RegexURLNormalizer", "TemplatePattern": "skipped rule: <P> -> <P> : invalid regular expression pattern: <P>", "TemplateID": 15, "loggerLevel": "error", "logline": "\"skipped rule: \" + patternValue + \" -> \" + subValue  + \" : invalid regular expression pattern: \" + e"}
{"classname": "regex.RegexURLNormalizer", "TemplatePattern": "error parsing conf file: <P>", "TemplateID": 16, "loggerLevel": "error", "logline": "\"error parsing conf file: \" + e"}
{"classname": "regex.RegexURLNormalizer", "TemplatePattern": "* Rules for 'DEFAULT' scope:", "TemplateID": 17, "loggerLevel": "none", "logline": "\"* Rules for 'DEFAULT' scope:\""}
{"classname": "regex.RegexURLNormalizer", "TemplatePattern": "  <P> -> ", "TemplateID": 18, "loggerLevel": "none", "logline": "\"  \" + r.pattern.pattern() + \" -> \""}
{"classname": "regex.RegexURLNormalizer", "TemplatePattern": "<P> ", "TemplateID": 19, "loggerLevel": "none", "logline": "r.substitution"}
{"classname": "regex.RegexURLNormalizer", "TemplatePattern": "* Rules for '<P>' scope:", "TemplateID": 20, "loggerLevel": "none", "logline": "\"* Rules for '\" + scope + \"' scope:\""}
{"classname": "regex.RegexURLNormalizer", "TemplatePattern": "  <P> -> ", "TemplateID": 21, "loggerLevel": "none", "logline": "\"  \" + r.pattern.pattern() + \" -> \""}
{"classname": "regex.RegexURLNormalizer", "TemplatePattern": "<P> ", "TemplateID": 22, "loggerLevel": "none", "logline": "r.substitution"}
{"classname": "regex.RegexURLNormalizer", "TemplatePattern": "\\n---------- Normalizer test -----------", "TemplateID": 23, "loggerLevel": "none", "logline": "\"\\n---------- Normalizer test -----------\""}
{"classname": "regex.RegexURLNormalizer", "TemplatePattern": "Scope: <P>", "TemplateID": 24, "loggerLevel": "none", "logline": "\"Scope: \" + scope"}
{"classname": "regex.RegexURLNormalizer", "TemplatePattern": "Input url:  '<P>'", "TemplateID": 25, "loggerLevel": "none", "logline": "\"Input url:  '\" + args[0] + \"'\""}
{"classname": "regex.RegexURLNormalizer", "TemplatePattern": "Output url: '<P>'", "TemplateID": 26, "loggerLevel": "none", "logline": "\"Output url: '\" + normalizer.normalize(args[0], scope)  + \"'\""}
{"classname": "regex.TestRegexURLNormalizer", "TemplatePattern": "Could load config from '<P>': <P>", "TemplateID": 27, "loggerLevel": "warn", "logline": "\"Could load config from '\" + configs[i] + \"': \" + e.toString()"}
{"classname": "regex.TestRegexURLNormalizer", "TemplatePattern": "scope: <P> url: <P> | normalized: <P> | expected: <P>", "TemplateID": 28, "loggerLevel": "info", "logline": "\"scope: \" + scope + \" url: \" + url + \" | normalized: \"  + normalized + \" | expected: \" + expected"}
{"classname": "regex.TestRegexURLNormalizer", "TemplatePattern": "bench time (<P>) <P>ms", "TemplateID": 29, "loggerLevel": "info", "logline": "\"bench time (\" + loops + \") \"  + (System.currentTimeMillis() - start) + \"ms\""}
{"classname": "regex.TestRegexURLNormalizer", "TemplatePattern": "TestRegexURLNormalizer [-bench <iter>] <scope>", "TemplateID": 30, "loggerLevel": "none", "logline": "\"TestRegexURLNormalizer [-bench <iter>] <scope>\""}
{"classname": "regex.TestRegexURLNormalizer", "TemplatePattern": "Missing required scope name.", "TemplateID": 31, "loggerLevel": "none", "logline": "\"Missing required scope name.\""}
{"classname": "regex.TestRegexURLNormalizer", "TemplatePattern": "Invalid number of iterations: <P>", "TemplateID": 32, "loggerLevel": "none", "logline": "\"Invalid number of iterations: \" + iter"}
{"classname": "regex.TestRegexURLNormalizer", "TemplatePattern": "Missing test data for scope '<P>', using default scope.", "TemplateID": 33, "loggerLevel": "warn", "logline": "\"Missing test data for scope '\" + scope  + \"', using default scope.\""}
{"classname": "metatags.MetaTagsParser", "TemplatePattern": "Found meta tag: <P>\\t<P>", "TemplateID": 34, "loggerLevel": "debug", "logline": "\"Found meta tag: \" + lcMetatag + \"\\t\" + value"}
{"classname": "metatags.MetaTagsParser", "TemplatePattern": "Found meta tag: <P>\\t<P>", "TemplateID": 35, "loggerLevel": "debug", "logline": "\"Found meta tag: \" + lcMetatag + \"\\t\" + value"}
{"classname": "collection.CollectionManager", "TemplatePattern": "initializing CollectionManager", "TemplateID": 36, "loggerLevel": "info", "logline": "\"initializing CollectionManager\""}
{"classname": "collection.CollectionManager", "TemplatePattern": "Error occured:<P>", "TemplateID": 37, "loggerLevel": "warn", "logline": "\"Error occured:\" + e"}
{"classname": "collection.CollectionManager", "TemplatePattern": "file has <P> elements", "TemplateID": 38, "loggerLevel": "info", "logline": "\"file has \" + nodeList.getLength() + \" elements\""}
{"classname": "collection.CollectionManager", "TemplatePattern": "Cannot find collections", "TemplateID": 39, "loggerLevel": "info", "logline": "\"Cannot find collections\""}
{"classname": "collection.CollectionManager", "TemplatePattern": "Instantiating CollectionManager", "TemplateID": 40, "loggerLevel": "info", "logline": "\"Instantiating CollectionManager\""}
{"classname": "collection.CollectionManager", "TemplatePattern": "subcollections:<P>", "TemplateID": 41, "loggerLevel": "trace", "logline": "\"subcollections:\" + Arrays.toString(collections.toArray())"}
{"classname": "reltag.RelTagParser", "TemplatePattern": "Adding tag: <P> to tag set.", "TemplateID": 42, "loggerLevel": "debug", "logline": "\"Adding tag: \" + tag + \" to tag set.\""}
{"classname": "geoip.GeoIPIndexingFilter", "TemplatePattern": "GeoIP usage medium set to: {}<P>", "TemplateID": 43, "loggerLevel": "debug", "logline": "\"GeoIP usage medium set to: {}\", use"}
{"classname": "geoip.GeoIPIndexingFilter", "TemplatePattern": "<P> ", "TemplateID": 44, "loggerLevel": "error", "logline": "org.apache.hadoop.util.StringUtils.stringifyException(e)"}
{"classname": "geoip.GeoIPIndexingFilter", "TemplatePattern": "<P> ", "TemplateID": 45, "loggerLevel": "error", "logline": "org.apache.hadoop.util.StringUtils.stringifyException(e)"}
{"classname": "geoip.GeoIPIndexingFilter", "TemplatePattern": "<P> ", "TemplateID": 46, "loggerLevel": "error", "logline": "org.apache.hadoop.util.StringUtils.stringifyException(e)"}
{"classname": "geoip.GeoIPIndexingFilter", "TemplatePattern": "<P> ", "TemplateID": 47, "loggerLevel": "error", "logline": "org.apache.hadoop.util.StringUtils.stringifyException(e)"}
{"classname": "geoip.GeoIPIndexingFilter", "TemplatePattern": "<P> ", "TemplateID": 48, "loggerLevel": "error", "logline": "org.apache.hadoop.util.StringUtils.stringifyException(e)"}
{"classname": "geoip.GeoIPIndexingFilter", "TemplatePattern": "<P> ", "TemplateID": 49, "loggerLevel": "error", "logline": "e.getMessage()"}
{"classname": "swf.SWFParser", "TemplatePattern": "Error, runtime exception: <P>", "TemplateID": 50, "loggerLevel": "error", "logline": "\"Error, runtime exception: \", e"}
{"classname": "swf.SWFParser", "TemplatePattern": "Parse Text:", "TemplateID": 51, "loggerLevel": "none", "logline": "\"Parse Text:\""}
{"classname": "swf.SWFParser", "TemplatePattern": "<P> ", "TemplateID": 52, "loggerLevel": "none", "logline": "p.getText()"}
{"classname": "swf.SWFParser", "TemplatePattern": "Parse Data:", "TemplateID": 53, "loggerLevel": "none", "logline": "\"Parse Data:\""}
{"classname": "swf.SWFParser", "TemplatePattern": "<P> ", "TemplateID": 54, "loggerLevel": "none", "logline": "p.getData()"}
{"classname": "prefix.PrefixURLFilter", "TemplatePattern": "<P> ", "TemplateID": 55, "loggerLevel": "none", "logline": "out"}
{"classname": "prefix.PrefixURLFilter", "TemplatePattern": "Attribute \\<P> is defined for plugin <P> as <P>", "TemplateID": 56, "loggerLevel": "info", "logline": "\"Attribute \\\"file\\\" is defined for plugin \" + pluginName  + \" as \" + attributeFile"}
{"classname": "prefix.PrefixURLFilter", "TemplatePattern": "<P> ", "TemplateID": 57, "loggerLevel": "error", "logline": "e.getMessage()"}
{"classname": "tld.TLDIndexingFilter", "TemplatePattern": "<P> ", "TemplateID": 58, "loggerLevel": "warn", "logline": "ex.toString()"}
{"classname": "selenium.HttpResponse", "TemplatePattern": "fetching <P>", "TemplateID": 59, "loggerLevel": "trace", "logline": "\"fetching \" + url"}
{"classname": "selenium.HttpResponse", "TemplatePattern": "User-agent is not set!", "TemplateID": 60, "loggerLevel": "error", "logline": "\"User-agent is not set!\""}
{"classname": "selenium.HttpResponse", "TemplatePattern": "Error: <P>", "TemplateID": 61, "loggerLevel": "warn", "logline": "\"Error: \", e"}
{"classname": "host.HostURLNormalizer", "TemplatePattern": "Attribute \\<P> is defined for plugin <P> as <P>", "TemplateID": 62, "loggerLevel": "info", "logline": "\"Attribute \\\"file\\\" is defined for plugin \" + pluginName  + \" as \" + attributeFile"}
{"classname": "host.HostURLNormalizer", "TemplatePattern": "Attribute \\<P> is not defined in plugin.xml for plugin <P>", "TemplateID": 63, "loggerLevel": "warn", "logline": "\"Attribute \\\"file\\\" is not defined in plugin.xml for plugin \"  + pluginName"}
{"classname": "host.HostURLNormalizer", "TemplatePattern": "<P> ", "TemplateID": 64, "loggerLevel": "error", "logline": "org.apache.hadoop.util.StringUtils.stringifyException(e)"}
{"classname": "dummy.DummyIndexWriter", "TemplatePattern": "<P> ", "TemplateID": 65, "loggerLevel": "error", "logline": "message"}
{"classname": "anchor.AnchorIndexingFilter", "TemplatePattern": "Anchor deduplication is: <P> <P>on<P>", "TemplateID": 66, "loggerLevel": "info", "logline": "\"Anchor deduplication is: \" + (deduplicate ? \"on\" : \"off\")"}
{"classname": "anchor.AnchorIndexingFilter", "TemplatePattern": "Anchor deduplication is: <P> <P>off<P>", "TemplateID": 67, "loggerLevel": "info", "logline": "\"Anchor deduplication is: \" + (deduplicate ? \"on\" : \"off\")"}
{"classname": "ext.ExtParser", "TemplatePattern": "Use <P> with timeout=<P>secs", "TemplateID": 68, "loggerLevel": "trace", "logline": "\"Use \" + command + \" with timeout=\" + timeout + \"secs\""}
{"classname": "ext.TestExtParser", "TemplatePattern": "No test is run on OS other than linux.", "TemplateID": 69, "loggerLevel": "none", "logline": "\"No test is run on OS other than linux.\""}
{"classname": "opic.OPICScoringFilter", "TemplatePattern": "Error: <P>", "TemplateID": 70, "loggerLevel": "error", "logline": "\"Error: \", e"}
{"classname": "opic.OPICScoringFilter", "TemplatePattern": "Error: <P>", "TemplateID": 71, "loggerLevel": "error", "logline": "\"Error: \", e"}
{"classname": "api.RegexURLFilterBase", "TemplatePattern": "<P> ", "TemplateID": 72, "loggerLevel": "error", "logline": "e.getMessage()"}
{"classname": "api.RegexURLFilterBase", "TemplatePattern": "<P> ", "TemplateID": 73, "loggerLevel": "error", "logline": "e.getMessage()"}
{"classname": "api.RegexURLFilterBase", "TemplatePattern": "Adding rule [<P>]", "TemplateID": 74, "loggerLevel": "trace", "logline": "\"Adding rule [\" + regex + \"]\""}
{"classname": "api.RegexURLFilterBase", "TemplatePattern": "+", "TemplateID": 75, "loggerLevel": "none", "logline": "\"+\""}
{"classname": "api.RegexURLFilterBase", "TemplatePattern": "<P> ", "TemplateID": 76, "loggerLevel": "none", "logline": "out"}
{"classname": "api.RegexURLFilterBase", "TemplatePattern": "-", "TemplateID": 77, "loggerLevel": "none", "logline": "\"-\""}
{"classname": "api.RegexURLFilterBase", "TemplatePattern": "<P> ", "TemplateID": 78, "loggerLevel": "none", "logline": "line"}
{"classname": "api.RegexURLFilterBaseTest", "TemplatePattern": "bench time (<P>) <P>ms", "TemplateID": 79, "loggerLevel": "info", "logline": "\"bench time (\" + loops + \") \"  + (System.currentTimeMillis() - start) + \"ms\""}
{"classname": "zip.ZipTextExtractor", "TemplatePattern": "fetch okay, but can't parse <P>, reason: <P>", "TemplateID": 80, "loggerLevel": "info", "logline": "\"fetch okay, but can't parse \" + fname + \", reason: \"  + e.getMessage()"}
{"classname": "zip.ZipParser", "TemplatePattern": "ziplen: <P>", "TemplateID": 81, "loggerLevel": "debug", "logline": "\"ziplen: \" + len"}
{"classname": "zip.ZipParser", "TemplatePattern": "Zip file parsed sucessfully !!", "TemplateID": 82, "loggerLevel": "trace", "logline": "\"Zip file parsed sucessfully !!\""}
{"classname": "feed.FeedParser", "TemplatePattern": "Parse failed: url: <P>, exception: <P>", "TemplateID": 83, "loggerLevel": "warn", "logline": "\"Parse failed: url: \" + content.getUrl() + \", exception: \"  + StringUtils.stringifyException(e)"}
{"classname": "feed.FeedParser", "TemplatePattern": "Usage: FeedParser <feed>", "TemplateID": 84, "loggerLevel": "none", "logline": "\"Usage: FeedParser <feed>\""}
{"classname": "feed.FeedParser", "TemplatePattern": "key: <P>", "TemplateID": 85, "loggerLevel": "none", "logline": "\"key: \" + entry.getKey()"}
{"classname": "feed.FeedParser", "TemplatePattern": "data: <P>", "TemplateID": 86, "loggerLevel": "none", "logline": "\"data: \" + parse.getData()"}
{"classname": "feed.FeedParser", "TemplatePattern": "text: <P>\\n", "TemplateID": 87, "loggerLevel": "none", "logline": "\"text: \" + parse.getText() + \"\\n\""}
{"classname": "slash.SlashURLNormalizer", "TemplatePattern": "Attribute \\<P> is defined for plugin <P> as <P>", "TemplateID": 88, "loggerLevel": "info", "logline": "\"Attribute \\\"file\\\" is defined for plugin \" + pluginName  + \" as \" + attributeFile"}
{"classname": "slash.SlashURLNormalizer", "TemplatePattern": "Attribute \\<P> is not defined in plugin.xml for plugin <P>", "TemplateID": 89, "loggerLevel": "warn", "logline": "\"Attribute \\\"file\\\" is not defined in plugin.xml for plugin \"  + pluginName"}
{"classname": "slash.SlashURLNormalizer", "TemplatePattern": "<P> ", "TemplateID": 90, "loggerLevel": "error", "logline": "org.apache.hadoop.util.StringUtils.stringifyException(e)"}
{"classname": "basic.BasicURLNormalizer", "TemplatePattern": "Scope: <P>", "TemplateID": 91, "loggerLevel": "none", "logline": "\"Scope: \" + scope"}
{"classname": "basic.BasicURLNormalizer", "TemplatePattern": "<P> ", "TemplateID": 92, "loggerLevel": "none", "logline": "normUrl"}
{"classname": "basic.BasicURLNormalizer", "TemplatePattern": "failed: <P>", "TemplateID": 93, "loggerLevel": "none", "logline": "\"failed: \" + line"}
{"classname": "api.HttpBase", "TemplatePattern": "Empty list of user agents in http.agent.rotate.file {}<P>", "TemplateID": 94, "loggerLevel": "warn", "logline": "\"Empty list of user agents in http.agent.rotate.file {}\",  agentsFile"}
{"classname": "api.HttpBase", "TemplatePattern": "Failed to read http.agent.rotate.file {}: {}<P>", "TemplateID": 95, "loggerLevel": "warn", "logline": "\"Failed to read http.agent.rotate.file {}: {}\", agentsFile,  StringUtils.stringifyException(e)"}
{"classname": "api.HttpBase", "TemplatePattern": "400 Bad request: <P>", "TemplateID": 96, "loggerLevel": "trace", "logline": "\"400 Bad request: \" + u"}
{"classname": "api.HttpBase", "TemplatePattern": "401 Authentication Required", "TemplateID": 97, "loggerLevel": "trace", "logline": "\"401 Authentication Required\""}
{"classname": "api.HttpBase", "TemplatePattern": "Failed to get protocol output<P>", "TemplateID": 98, "loggerLevel": "error", "logline": "\"Failed to get protocol output\", e"}
{"classname": "api.HttpBase", "TemplatePattern": "No User-Agent string set (http.agent.name)!", "TemplateID": 99, "loggerLevel": "error", "logline": "\"No User-Agent string set (http.agent.name)!\""}
{"classname": "api.HttpBase", "TemplatePattern": "http.proxy.host = <P>", "TemplateID": 100, "loggerLevel": "info", "logline": "\"http.proxy.host = \" + proxyHost"}
{"classname": "api.HttpBase", "TemplatePattern": "http.proxy.port = <P>", "TemplateID": 101, "loggerLevel": "info", "logline": "\"http.proxy.port = \" + proxyPort"}
{"classname": "api.HttpBase", "TemplatePattern": "http.timeout = <P>", "TemplateID": 102, "loggerLevel": "info", "logline": "\"http.timeout = \" + timeout"}
{"classname": "api.HttpBase", "TemplatePattern": "http.content.limit = <P>", "TemplateID": 103, "loggerLevel": "info", "logline": "\"http.content.limit = \" + maxContent"}
{"classname": "api.HttpBase", "TemplatePattern": "http.agent = <P>", "TemplateID": 104, "loggerLevel": "info", "logline": "\"http.agent = \" + userAgent"}
{"classname": "api.HttpBase", "TemplatePattern": "http.accept.language = <P>", "TemplateID": 105, "loggerLevel": "info", "logline": "\"http.accept.language = \" + acceptLanguage"}
{"classname": "api.HttpBase", "TemplatePattern": "http.accept = <P>", "TemplateID": 106, "loggerLevel": "info", "logline": "\"http.accept = \" + accept"}
{"classname": "api.HttpBase", "TemplatePattern": "uncompressing....", "TemplateID": 107, "loggerLevel": "trace", "logline": "\"uncompressing....\""}
{"classname": "api.HttpBase", "TemplatePattern": "fetched <P> bytes of compressed content (expanded to <P> bytes) from <P>", "TemplateID": 108, "loggerLevel": "trace", "logline": "\"fetched \" + compressed.length  /root/nutch-git-source/nutch/src/plugin/lib-http/src/java/org/apache/nutch/protocol/http/api/HttpBase.java-          + \" bytes of compressed content (expanded to \" + content.length  + \" bytes) from \" + url"}
{"classname": "api.HttpBase", "TemplatePattern": "inflating....", "TemplateID": 109, "loggerLevel": "trace", "logline": "\"inflating....\""}
{"classname": "api.HttpBase", "TemplatePattern": "fetched <P> bytes of compressed content (expanded to <P> bytes) from <P>", "TemplateID": 110, "loggerLevel": "trace", "logline": "\"fetched \" + compressed.length  /root/nutch-git-source/nutch/src/plugin/lib-http/src/java/org/apache/nutch/protocol/http/api/HttpBase.java-          + \" bytes of compressed content (expanded to \" + content.length  + \" bytes) from \" + url"}
{"classname": "api.HttpBase", "TemplatePattern": "<P> ", "TemplateID": 111, "loggerLevel": "none", "logline": "usage"}
{"classname": "api.HttpBase", "TemplatePattern": "<P> ", "TemplateID": 112, "loggerLevel": "none", "logline": "usage"}
{"classname": "api.HttpBase", "TemplatePattern": "Status: <P>", "TemplateID": 113, "loggerLevel": "none", "logline": "\"Status: \" + out.getStatus()"}
{"classname": "api.HttpBase", "TemplatePattern": "Content Type: <P>", "TemplateID": 114, "loggerLevel": "none", "logline": "\"Content Type: \" + content.getContentType()"}
{"classname": "api.HttpBase", "TemplatePattern": "Content Length: <P>", "TemplateID": 115, "loggerLevel": "none", "logline": "\"Content Length: \"  + content.getMetadata().get(Response.CONTENT_LENGTH)"}
{"classname": "api.HttpBase", "TemplatePattern": "Content:", "TemplateID": 116, "loggerLevel": "none", "logline": "\"Content:\""}
{"classname": "api.HttpBase", "TemplatePattern": "<P> ", "TemplateID": 117, "loggerLevel": "none", "logline": "text"}
{"classname": "api.HttpRobotRulesParser", "TemplatePattern": "cache miss <P>", "TemplateID": 118, "loggerLevel": "trace", "logline": "\"cache miss \" + url"}
{"classname": "api.HttpRobotRulesParser", "TemplatePattern": "Couldn't get robots.txt for <P>: <P>", "TemplateID": 119, "loggerLevel": "info", "logline": "\"Couldn't get robots.txt for \" + url + \": \" + t.toString()"}
{"classname": "domain.DomainURLFilter", "TemplatePattern": "Attribute \\<P> is defined for plugin <P> as <P>", "TemplateID": 120, "loggerLevel": "info", "logline": "\"Attribute \\\"file\\\" is defined for plugin \" + pluginName  + \" as \" + attributeFile"}
{"classname": "domain.DomainURLFilter", "TemplatePattern": "Attribute \\<P> is not defined in plugin.xml for plugin <P>", "TemplateID": 121, "loggerLevel": "warn", "logline": "\"Attribute \\\"file\\\" is not defined in plugin.xml for plugin \"  + pluginName"}
{"classname": "domain.DomainURLFilter", "TemplatePattern": "<P> ", "TemplateID": 122, "loggerLevel": "error", "logline": "org.apache.hadoop.util.StringUtils.stringifyException(e)"}
{"classname": "domain.DomainURLFilter", "TemplatePattern": "Could not apply filter on url: <P>\\n<P>", "TemplateID": 123, "loggerLevel": "error", "logline": "\"Could not apply filter on url: \" + url + \"\\n\"  + org.apache.hadoop.util.StringUtils.stringifyException(e)"}
{"classname": "js.JSParseFilter", "TemplatePattern": "getJSLinks<P>", "TemplateID": 124, "loggerLevel": "error", "logline": "\"getJSLinks\", e"}
{"classname": "js.JSParseFilter", "TemplatePattern": " - failed URL parse '<P>' and baseURL '<P>'<P>", "TemplateID": 125, "loggerLevel": "trace", "logline": "\" - failed URL parse '\" + url + \"' and baseURL '\"  + baseURL + \"'\", ex"}
{"classname": "js.JSParseFilter", "TemplatePattern": " - outlink from JS: '<P>'", "TemplateID": 126, "loggerLevel": "trace", "logline": "\" - outlink from JS: '\" + url + \"'\""}
{"classname": "js.JSParseFilter", "TemplatePattern": "getJSLinks<P>", "TemplateID": 127, "loggerLevel": "error", "logline": "\"getJSLinks\", ex"}
{"classname": "js.JSParseFilter", "TemplatePattern": "<P>  file.js baseURL", "TemplateID": 128, "loggerLevel": "none", "logline": "JSParseFilter.class.getName() + \" file.js baseURL\""}
{"classname": "js.JSParseFilter", "TemplatePattern": "Outlinks extracted: <P>", "TemplateID": 129, "loggerLevel": "none", "logline": "\"Outlinks extracted: \" + links.length"}
{"classname": "js.JSParseFilter", "TemplatePattern": " - <P>", "TemplateID": 130, "loggerLevel": "none", "logline": "\" - \" + links[i]"}
{"classname": "html.HtmlParser", "TemplatePattern": "Parsing...", "TemplateID": 131, "loggerLevel": "trace", "logline": "\"Parsing...\""}
{"classname": "html.HtmlParser", "TemplatePattern": "Error: <P>", "TemplateID": 132, "loggerLevel": "error", "logline": "\"Error: \", e"}
{"classname": "html.HtmlParser", "TemplatePattern": "Meta tags for <P>: <P>", "TemplateID": 133, "loggerLevel": "trace", "logline": "\"Meta tags for \" + base + \": \" + metaTags.toString()"}
{"classname": "html.HtmlParser", "TemplatePattern": "Getting text...", "TemplateID": 134, "loggerLevel": "trace", "logline": "\"Getting text...\""}
{"classname": "html.HtmlParser", "TemplatePattern": "Getting title...", "TemplateID": 135, "loggerLevel": "trace", "logline": "\"Getting title...\""}
{"classname": "html.HtmlParser", "TemplatePattern": "Getting links...", "TemplateID": 136, "loggerLevel": "trace", "logline": "\"Getting links...\""}
{"classname": "html.HtmlParser", "TemplatePattern": "found <P> outlinks in <P>", "TemplateID": 137, "loggerLevel": "trace", "logline": "\"found \" + outlinks.length + \" outlinks in \"  + content.getUrl()"}
{"classname": "html.HtmlParser", "TemplatePattern": " - new frag, <P> nodes.", "TemplateID": 138, "loggerLevel": "info", "logline": "\" - new frag, \" + frag.getChildNodes().getLength()  + \" nodes.\""}
{"classname": "html.HtmlParser", "TemplatePattern": "Error: <P>", "TemplateID": 139, "loggerLevel": "error", "logline": "\"Error: \", e"}
{"classname": "html.HtmlParser", "TemplatePattern": "data: <P>", "TemplateID": 140, "loggerLevel": "none", "logline": "\"data: \" + parse.getData()"}
{"classname": "html.HtmlParser", "TemplatePattern": "text: <P>", "TemplateID": 141, "loggerLevel": "none", "logline": "\"text: \" + parse.getText()"}
{"classname": "html.TestHtmlParser", "TemplatePattern": "<P> ", "TemplateID": 142, "loggerLevel": "info", "logline": "name"}
{"classname": "html.TestHtmlParser", "TemplatePattern": "title:\\t<P>", "TemplateID": 143, "loggerLevel": "info", "logline": "\"title:\\t\" + title"}
{"classname": "html.TestHtmlParser", "TemplatePattern": "keywords:\\t<P>", "TemplateID": 144, "loggerLevel": "info", "logline": "\"keywords:\\t\" + keywords"}
{"classname": "html.TestHtmlParser", "TemplatePattern": "text:\\t<P>", "TemplateID": 145, "loggerLevel": "info", "logline": "\"text:\\t\" + text"}
{"classname": "file.FileResponse", "TemplatePattern": "fetching <P>", "TemplateID": 146, "loggerLevel": "trace", "logline": "\"fetching \" + url"}
{"classname": "file.FileResponse", "TemplatePattern": "url.getPath() != url.getFile(): <P>", "TemplateID": 147, "loggerLevel": "warn", "logline": "\"url.getPath() != url.getFile(): \" + url"}
{"classname": "file.FileResponse", "TemplatePattern": "not enough bytes read from file: <P>", "TemplateID": 148, "loggerLevel": "warn", "logline": "\"not enough bytes read from file: \" + f.getPath()"}
{"classname": "file.File", "TemplatePattern": "redirect to <P>", "TemplateID": 149, "loggerLevel": "trace", "logline": "\"redirect to \" + u"}
{"classname": "file.File", "TemplatePattern": "Too many redirects: {}<P>", "TemplateID": 150, "loggerLevel": "trace", "logline": "\"Too many redirects: {}\", url"}
{"classname": "file.File", "TemplatePattern": "<P> ", "TemplateID": 151, "loggerLevel": "none", "logline": "usage"}
{"classname": "file.File", "TemplatePattern": "<P> ", "TemplateID": 152, "loggerLevel": "none", "logline": "usage"}
{"classname": "file.File", "TemplatePattern": "URL: <P>", "TemplateID": 153, "loggerLevel": "none", "logline": "\"URL: \" + content.getUrl()"}
{"classname": "file.File", "TemplatePattern": "Status: <P>", "TemplateID": 154, "loggerLevel": "none", "logline": "\"Status: \" + output.getStatus()"}
{"classname": "file.File", "TemplatePattern": "Content-Type: <P>", "TemplateID": 155, "loggerLevel": "none", "logline": "\"Content-Type: \" + content.getContentType()"}
{"classname": "file.File", "TemplatePattern": "Content-Length: <P>", "TemplateID": 156, "loggerLevel": "none", "logline": "\"Content-Length: \"  + content.getMetadata().get(Response.CONTENT_LENGTH)"}
{"classname": "file.File", "TemplatePattern": "Last-Modified: <P>", "TemplateID": 157, "loggerLevel": "none", "logline": "\"Last-Modified: \"  + content.getMetadata().get(Response.LAST_MODIFIED)"}
{"classname": "file.File", "TemplatePattern": "Location: <P>", "TemplateID": 158, "loggerLevel": "none", "logline": "\"Location: \" + redirectLocation"}
{"classname": "file.File", "TemplatePattern": "<P> ", "TemplateID": 159, "loggerLevel": "none", "logline": "new String(content.getContent())"}
{"classname": "http.HttpResponse", "TemplatePattern": "fetching <P>", "TemplateID": 160, "loggerLevel": "trace", "logline": "\"fetching \" + url"}
{"classname": "http.HttpResponse", "TemplatePattern": "User-agent is not set!", "TemplateID": 161, "loggerLevel": "error", "logline": "\"User-agent is not set!\""}
{"classname": "http.HttpResponse", "TemplatePattern": "fetched <P> bytes from <P>", "TemplateID": 162, "loggerLevel": "trace", "logline": "\"fetched \" + content.length + \" bytes from \" + url"}
{"classname": "http.HttpResponse", "TemplatePattern": "Http: starting chunk", "TemplateID": 163, "loggerLevel": "trace", "logline": "\"Http: starting chunk\""}
{"classname": "http.HttpResponse", "TemplatePattern": "Error: <P>", "TemplateID": 164, "loggerLevel": "warn", "logline": "\"Error: \", e"}
{"classname": "elastic.ElasticIndexWriter", "TemplatePattern": "Processing bulk request [docs = <P>, length = <P>, total docs = <P>, last doc in bulk = '<P>']", "TemplateID": 165, "loggerLevel": "info", "logline": "\"Processing bulk request [docs = \" + bulkDocs + \", length = \"  /root/nutch-git-source/nutch/src/plugin/indexer-elastic/src/java/org/apache/nutch/indexwriter/elastic/ElasticIndexWriter.java-          + bulkLength + \", total docs = \" + indexedDocs  + \", last doc in bulk = '\" + id + \"']\""}
{"classname": "elastic.ElasticIndexWriter", "TemplatePattern": "Previous took in ms <P>, including wait <P>", "TemplateID": 166, "loggerLevel": "info", "logline": "\"Previous took in ms \" + actionGet.getTookInMillis()  + \", including wait \" + msWaited"}
{"classname": "elastic.ElasticIndexWriter", "TemplatePattern": "Processing remaining requests [docs = <P>, length = <P>, total docs = <P>]", "TemplateID": 167, "loggerLevel": "info", "logline": "\"Processing remaining requests [docs = \" + bulkDocs  + \", length = \" + bulkLength + \", total docs = \" + indexedDocs + \"]\""}
{"classname": "elastic.ElasticIndexWriter", "TemplatePattern": "Processing to finalize last execute", "TemplateID": 168, "loggerLevel": "info", "logline": "\"Processing to finalize last execute\""}
{"classname": "elastic.ElasticIndexWriter", "TemplatePattern": "<P> ", "TemplateID": 169, "loggerLevel": "error", "logline": "message"}
{"classname": "validator.UrlValidator", "TemplatePattern": "url is valid", "TemplateID": 170, "loggerLevel": "none", "logline": "\"url is valid\""}
{"classname": "validator.UrlValidator", "TemplatePattern": "url is invalid", "TemplateID": 171, "loggerLevel": "none", "logline": "\"url is invalid\""}
{"classname": "lang.HTMLLanguageParser", "TemplatePattern": "<P> ", "TemplateID": 172, "loggerLevel": "error", "logline": "e.toString()"}
{"classname": "lang.HTMLLanguageParser", "TemplatePattern": "No configuration for language extraction policy is provided", "TemplateID": 173, "loggerLevel": "warn", "logline": "\"No configuration for language extraction policy is provided\""}
{"classname": "lang.TestHTMLLanguageParser", "TemplatePattern": "<P> ", "TemplateID": 174, "loggerLevel": "none", "logline": "content.toString()"}
{"classname": "lang.TestHTMLLanguageParser", "TemplatePattern": "<P> ", "TemplateID": 175, "loggerLevel": "none", "logline": "lang"}
{"classname": "lang.TestHTMLLanguageParser", "TemplatePattern": "Total Time=<P>", "TemplateID": 176, "loggerLevel": "none", "logline": "\"Total Time=\" + total"}
{"classname": "more.MoreIndexingFilter", "TemplatePattern": "<P> : can't parse erroneous date: <P>", "TemplateID": 177, "loggerLevel": "warn", "logline": "url + \": can't parse erroneous date: \" + date"}
{"classname": "more.MoreIndexingFilter", "TemplatePattern": "<P> ", "TemplateID": 178, "loggerLevel": "error", "logline": "org.apache.hadoop.util.StringUtils.stringifyException(e)"}
{"classname": "domainblacklist.DomainBlacklistURLFilter", "TemplatePattern": "Attribute \\<P> is defined for plugin <P> as <P>", "TemplateID": 179, "loggerLevel": "info", "logline": "\"Attribute \\\"file\\\" is defined for plugin \" + pluginName  + \" as \" + attributeFile"}
{"classname": "domainblacklist.DomainBlacklistURLFilter", "TemplatePattern": "Attribute \\<P> is not defined in plugin.xml for plugin <P>", "TemplateID": 180, "loggerLevel": "warn", "logline": "\"Attribute \\\"file\\\" is not defined in plugin.xml for plugin \"  + pluginName"}
{"classname": "domainblacklist.DomainBlacklistURLFilter", "TemplatePattern": "<P> ", "TemplateID": 181, "loggerLevel": "error", "logline": "org.apache.hadoop.util.StringUtils.stringifyException(e)"}
{"classname": "domainblacklist.DomainBlacklistURLFilter", "TemplatePattern": "Could not apply filter on url: <P>\\n<P>", "TemplateID": 182, "loggerLevel": "error", "logline": "\"Could not apply filter on url: \" + url + \"\\n\"  + org.apache.hadoop.util.StringUtils.stringifyException(e)"}
{"classname": "httpclient.HttpFormAuthentication", "TemplatePattern": "rspCode: <P>", "TemplateID": 183, "loggerLevel": "debug", "logline": "\"rspCode: \" + rspCode"}
{"classname": "httpclient.HttpFormAuthentication", "TemplatePattern": "\\nSending 'POST' request to URL : <P>", "TemplateID": 184, "loggerLevel": "debug", "logline": "\"\\nSending 'POST' request to URL : \" + url"}
{"classname": "httpclient.HttpFormAuthentication", "TemplatePattern": "Post parameters : <P>", "TemplateID": 185, "loggerLevel": "debug", "logline": "\"Post parameters : \" + params"}
{"classname": "httpclient.HttpFormAuthentication", "TemplatePattern": "Response Code : <P>", "TemplateID": 186, "loggerLevel": "debug", "logline": "\"Response Code : \" + rspCode"}
{"classname": "httpclient.HttpFormAuthentication", "TemplatePattern": "Response headers : <P>", "TemplateID": 187, "loggerLevel": "debug", "logline": "\"Response headers : \" + header"}
{"classname": "httpclient.HttpFormAuthentication", "TemplatePattern": "login post result: <P>", "TemplateID": 188, "loggerLevel": "debug", "logline": "\"login post result: \" + rst"}
{"classname": "httpclient.HttpFormAuthentication", "TemplatePattern": "No form element found with 'id' = {}, trying 'name'.<P>", "TemplateID": 189, "loggerLevel": "debug", "logline": "\"No form element found with 'id' = {}, trying 'name'.\",  authConfigurer.getLoginFormId()"}
{"classname": "httpclient.HttpFormAuthentication", "TemplatePattern": "No form element found with 'name' = {}<P>", "TemplateID": 190, "loggerLevel": "debug", "logline": "\"No form element found with 'name' = {}\",  authConfigurer.getLoginFormId()"}
{"classname": "httpclient.DummySSLProtocolSocketFactory", "TemplatePattern": "<P> ", "TemplateID": 191, "loggerLevel": "error", "logline": "e.getMessage(), e"}
{"classname": "httpclient.Http", "TemplatePattern": "Could not read <P> : <P>", "TemplateID": 192, "loggerLevel": "error", "logline": "\"Could not read \" + authFile + \" : \" + ex.getMessage()"}
{"classname": "httpclient.Http", "TemplatePattern": "Bad auth conf file: root element <<P>> found in <P> - must be <auth-configuration>", "TemplateID": 193, "loggerLevel": "warn", "logline": "\"Bad auth conf file: root element <\"  /root/nutch-git-source/nutch/src/plugin/protocol-httpclient/src/java/org/apache/nutch/protocol/httpclient/Http.java-              + rootElement.getTagName() + \"> found in \" + authFile  + \" - must be <auth-configuration>\""}
{"classname": "httpclient.Http", "TemplatePattern": "Bad auth conf file: Element <<P>> not recognized in <P> - expected <credentials>", "TemplateID": 194, "loggerLevel": "warn", "logline": "\"Bad auth conf file: Element <\" + credElement.getTagName()  /root/nutch-git-source/nutch/src/plugin/protocol-httpclient/src/java/org/apache/nutch/protocol/httpclient/Http.java-                + \"> not recognized in \" + authFile  + \" - expected <credentials>\""}
{"classname": "httpclient.Http", "TemplatePattern": "Credentials - username: <P>; set as default<P> for realm: <P>; scheme: ", "TemplateID": 195, "loggerLevel": "trace", "logline": "\"Credentials - username: \" + username  + \"; set as default\" + \" for realm: \" + realm + \"; scheme: \""}
{"classname": "httpclient.Http", "TemplatePattern": "Credentials - username: <P>; set for AuthScope - <P>host: <P>; port: ", "TemplateID": 196, "loggerLevel": "trace", "logline": "\"Credentials - username: \" + username  + \"; set for AuthScope - \" + \"host: \" + host + \"; port: \""}
{"classname": "httpclient.Http", "TemplatePattern": "Bad auth conf file: Element <<P>> not recognized in <P> - expected <authscope>", "TemplateID": 197, "loggerLevel": "warn", "logline": "\"Bad auth conf file: Element <\"  /root/nutch-git-source/nutch/src/plugin/protocol-httpclient/src/java/org/apache/nutch/protocol/httpclient/Http.java-                  + scopeElement.getTagName() + \"> not recognized in \"  + authFile + \" - expected <authscope>\""}
{"classname": "httpclient.Http", "TemplatePattern": "Pre-configured credentials with scope - host: <P>; port: <P>; found for url: <P>", "TemplateID": 198, "loggerLevel": "trace", "logline": "\"Pre-configured credentials with scope - host: \"  + url.getHost() + \"; port: \" + port + \"; found for url: \" + url"}
{"classname": "httpclient.Http", "TemplatePattern": "Pre-configured credentials with scope -  host: <P>; port: <P>; not found for url: <P>", "TemplateID": 199, "loggerLevel": "trace", "logline": "\"Pre-configured credentials with scope -  host: \"  + url.getHost() + \"; port: \" + port + \"; not found for url: \" + url"}
{"classname": "httpclient.HttpAuthenticationFactory", "TemplatePattern": "Checking challengeString=<P>", "TemplateID": 200, "loggerLevel": "trace", "logline": "\"Checking challengeString=\" + challengeString"}
{"classname": "httpclient.HttpAuthenticationFactory", "TemplatePattern": "Error: <P>", "TemplateID": 201, "loggerLevel": "error", "logline": "\"Error: \", e"}
{"classname": "httpclient.HttpBasicAuthentication", "TemplatePattern": "BasicAuthentication challenge is <P>", "TemplateID": 202, "loggerLevel": "trace", "logline": "\"BasicAuthentication challenge is \" + challenge"}
{"classname": "httpclient.HttpBasicAuthentication", "TemplatePattern": "BasicAuthentication username=<P>", "TemplateID": 203, "loggerLevel": "trace", "logline": "\"BasicAuthentication username=\" + username"}
{"classname": "httpclient.HttpBasicAuthentication", "TemplatePattern": "BasicAuthentication password=<P>", "TemplateID": 204, "loggerLevel": "trace", "logline": "\"BasicAuthentication password=\" + password"}
{"classname": "httpclient.HttpBasicAuthentication", "TemplatePattern": "Basic credentials: <P>", "TemplateID": 205, "loggerLevel": "trace", "logline": "\"Basic credentials: \" + credentials"}
{"classname": "httpclient.HttpBasicAuthentication", "TemplatePattern": "HttpBasicAuthentication failed for <P>", "TemplateID": 206, "loggerLevel": "trace", "logline": "\"HttpBasicAuthentication failed for \" + challenge"}
{"classname": "httpclient.HttpResponse", "TemplatePattern": "<P> ", "TemplateID": 207, "loggerLevel": "trace", "logline": "fetchTrace.toString()"}
{"classname": "filter.MimeTypeIndexingFilter", "TemplatePattern": "<P> [%s] %s<P>", "TemplateID": 208, "loggerLevel": "info", "logline": "String.format(\"[%s] %s\", contentType, url)"}
{"classname": "filter.MimeTypeIndexingFilter", "TemplatePattern": "<P> Missing %s property, ALL mimetypes will be allowed<P>", "TemplateID": 209, "loggerLevel": "warn", "logline": "String  /root/nutch-git-source/nutch/src/plugin/mimetype-filter/src/java/org/apache/nutch/indexer/filter/MimeTypeIndexingFilter.java-            .format(\"Missing %s property, ALL mimetypes will be allowed\",  MIMEFILTER_REGEX_FILE)"}
{"classname": "filter.MimeTypeIndexingFilter", "TemplatePattern": "<P> ", "TemplateID": 210, "loggerLevel": "error", "logline": "e.getMessage()"}
{"classname": "filter.MimeTypeIndexingFilter", "TemplatePattern": "<P> ", "TemplateID": 211, "loggerLevel": "error", "logline": "StringUtils.stringifyException(e)"}
{"classname": "filter.MimeTypeIndexingFilter", "TemplatePattern": "+ ", "TemplateID": 212, "loggerLevel": "none", "logline": "\"+ \""}
{"classname": "filter.MimeTypeIndexingFilter", "TemplatePattern": "<P> ", "TemplateID": 213, "loggerLevel": "none", "logline": "line"}
{"classname": "filter.MimeTypeIndexingFilter", "TemplatePattern": "- ", "TemplateID": 214, "loggerLevel": "none", "logline": "\"- \""}
{"classname": "filter.MimeTypeIndexingFilter", "TemplatePattern": "<P> ", "TemplateID": 215, "loggerLevel": "none", "logline": "line"}
{"classname": "ftp.FtpRobotRulesParser", "TemplatePattern": "cache miss <P>", "TemplateID": 216, "loggerLevel": "trace", "logline": "\"cache miss \" + url"}
{"classname": "ftp.FtpRobotRulesParser", "TemplatePattern": "Couldn't get robots.txt for <P>: <P>", "TemplateID": 217, "loggerLevel": "info", "logline": "\"Couldn't get robots.txt for \" + url + \": \" + t.toString()"}
{"classname": "ftp.Ftp", "TemplatePattern": "redirect to <P>", "TemplateID": 218, "loggerLevel": "trace", "logline": "\"redirect to \" + u"}
{"classname": "ftp.Ftp", "TemplatePattern": "<P> ", "TemplateID": 219, "loggerLevel": "none", "logline": "usage"}
{"classname": "ftp.Ftp", "TemplatePattern": "<P> ", "TemplateID": 220, "loggerLevel": "none", "logline": "usage"}
{"classname": "ftp.Ftp", "TemplatePattern": "Content-Type: <P>", "TemplateID": 221, "loggerLevel": "none", "logline": "\"Content-Type: \" + content.getContentType()"}
{"classname": "ftp.Ftp", "TemplatePattern": "Content-Length: <P>", "TemplateID": 222, "loggerLevel": "none", "logline": "\"Content-Length: \"  + content.getMetadata().get(Response.CONTENT_LENGTH)"}
{"classname": "ftp.Ftp", "TemplatePattern": "Last-Modified: <P>", "TemplateID": 223, "loggerLevel": "none", "logline": "\"Last-Modified: \"  + content.getMetadata().get(Response.LAST_MODIFIED)"}
{"classname": "ftp.Ftp", "TemplatePattern": "<P> ", "TemplateID": 224, "loggerLevel": "none", "logline": "new String(content.getContent())"}
{"classname": "ftp.PrintCommandListener", "TemplatePattern": "PrintCommandListener.protocolCommandSent(): <P>", "TemplateID": 225, "loggerLevel": "info", "logline": "\"PrintCommandListener.protocolCommandSent(): \" + e"}
{"classname": "ftp.PrintCommandListener", "TemplatePattern": "PrintCommandListener.protocolReplyReceived(): <P>", "TemplateID": 226, "loggerLevel": "info", "logline": "\"PrintCommandListener.protocolReplyReceived(): \" + e"}
{"classname": "ftp.PrintCommandListener", "TemplatePattern": "ftp> <P>", "TemplateID": 227, "loggerLevel": "info", "logline": "\"ftp> \" + line"}
{"classname": "ftp.FtpResponse", "TemplatePattern": "url.getPath() != url.getFile(): <P>", "TemplateID": 228, "loggerLevel": "warn", "logline": "\"url.getPath() != url.getFile(): \" + url"}
{"classname": "ftp.FtpResponse", "TemplatePattern": "fetching <P>", "TemplateID": 229, "loggerLevel": "info", "logline": "\"fetching \" + url"}
{"classname": "ftp.FtpResponse", "TemplatePattern": "fetching <P>", "TemplateID": 230, "loggerLevel": "trace", "logline": "\"fetching \" + url"}
{"classname": "ftp.FtpResponse", "TemplatePattern": "delete client because idled too long", "TemplateID": 231, "loggerLevel": "info", "logline": "\"delete client because idled too long\""}
{"classname": "ftp.FtpResponse", "TemplatePattern": "start client", "TemplateID": 232, "loggerLevel": "info", "logline": "\"start client\""}
{"classname": "ftp.FtpResponse", "TemplatePattern": "disconnect from <P> before connect to <P>", "TemplateID": 233, "loggerLevel": "info", "logline": "\"disconnect from \" + remoteAddress  + \" before connect to \" + addr"}
{"classname": "ftp.FtpResponse", "TemplatePattern": "connect to <P>", "TemplateID": 234, "loggerLevel": "info", "logline": "\"connect to \" + addr"}
{"classname": "ftp.FtpResponse", "TemplatePattern": "ftp.client.connect() failed: <P> <P>", "TemplateID": 235, "loggerLevel": "warn", "logline": "\"ftp.client.connect() failed: \" + addr + \" \"  + ftp.client.getReplyString()"}
{"classname": "ftp.FtpResponse", "TemplatePattern": "log into <P>", "TemplateID": 236, "loggerLevel": "info", "logline": "\"log into \" + addr"}
{"classname": "ftp.FtpResponse", "TemplatePattern": "ftp.client.login() failed: <P>", "TemplateID": 237, "loggerLevel": "warn", "logline": "\"ftp.client.login() failed: \" + addr"}
{"classname": "ftp.FtpResponse", "TemplatePattern": "ftp.client.setFileType() failed: <P>", "TemplateID": 238, "loggerLevel": "warn", "logline": "\"ftp.client.setFileType() failed: \" + addr"}
{"classname": "ftp.FtpResponse", "TemplatePattern": "set parser for <P>", "TemplateID": 239, "loggerLevel": "info", "logline": "\"set parser for \" + addr"}
{"classname": "ftp.FtpResponse", "TemplatePattern": "createFileEntryParser() failed. <P> <P>", "TemplateID": 240, "loggerLevel": "warn", "logline": "\"createFileEntryParser() failed. \" + addr + \" \" + e"}
{"classname": "ftp.FtpResponse", "TemplatePattern": "ftp.parser is null: <P>", "TemplateID": 241, "loggerLevel": "warn", "logline": "\"ftp.parser is null: \" + addr"}
{"classname": "ftp.FtpResponse", "TemplatePattern": "use existing connection", "TemplateID": 242, "loggerLevel": "info", "logline": "\"use existing connection\""}
{"classname": "ftp.FtpResponse", "TemplatePattern": "reset renewalTime to <P>", "TemplateID": 243, "loggerLevel": "info", "logline": "\"reset renewalTime to \"  + HttpDateFormat.toString(ftp.renewalTime)"}
{"classname": "ftp.FtpResponse", "TemplatePattern": "disconnect from <P>", "TemplateID": 244, "loggerLevel": "info", "logline": "\"disconnect from \" + addr"}
{"classname": "ftp.FtpResponse", "TemplatePattern": "Error: <P>", "TemplateID": 245, "loggerLevel": "warn", "logline": "\"Error: \", e"}
{"classname": "ftp.FtpResponse", "TemplatePattern": "delete client due to exception", "TemplateID": 246, "loggerLevel": "info", "logline": "\"delete client due to exception\""}
{"classname": "ftp.FtpResponse", "TemplatePattern": "delete client because server cut off control channel: <P>", "TemplateID": 247, "loggerLevel": "info", "logline": "\"delete client because server cut off control channel: \"  + e"}
{"classname": "ftp.FtpResponse", "TemplatePattern": "Unrecognized reply after forced close of data channel. <P>If this is acceptable, please modify Client.java accordingly. <P>", "TemplateID": 248, "loggerLevel": "warn", "logline": "\"Unrecognized reply after forced close of data channel. \"  /root/nutch-git-source/nutch/src/plugin/protocol-ftp/src/java/org/apache/nutch/protocol/ftp/FtpResponse.java-            + \"If this is acceptable, please modify Client.java accordingly. \"  + e"}
{"classname": "ftp.FtpResponse", "TemplatePattern": "delete client because server cut off control channel: <P>", "TemplateID": 249, "loggerLevel": "info", "logline": "\"delete client because server cut off control channel: \"  + e"}
{"classname": "ftp.FtpResponse", "TemplatePattern": "Unrecognized reply after forced close of data channel. <P>If this is acceptable, please modify Client.java accordingly. <P>", "TemplateID": 250, "loggerLevel": "warn", "logline": "\"Unrecognized reply after forced close of data channel. \"  /root/nutch-git-source/nutch/src/plugin/protocol-ftp/src/java/org/apache/nutch/protocol/ftp/FtpResponse.java-            + \"If this is acceptable, please modify Client.java accordingly. \"  + e"}
{"classname": "ftp.FtpResponse", "TemplatePattern": "<P> ", "TemplateID": 251, "loggerLevel": "warn", "logline": "\"\" + e"}
{"classname": "nutch.CCIndexingFilter", "TemplatePattern": "CC: indexing <P> for: <P>", "TemplateID": 252, "loggerLevel": "info", "logline": "\"CC: indexing \" + licenseUrl + \" for: \" + url.toString()"}
{"classname": "nutch.CCIndexingFilter", "TemplatePattern": "CC: failed to parse url: <P> : <P>", "TemplateID": 253, "loggerLevel": "warn", "logline": "\"CC: failed to parse url: \" + urlString + \" : \" + e"}
{"classname": "nutch.CCParseFilter", "TemplatePattern": "CC: found <P> in <P> of <P>", "TemplateID": 254, "loggerLevel": "info", "logline": "\"CC: found \" + licenseUrl + \" in \" + licenseLocation  + \" of \" + base"}
{"classname": "nutch.CCParseFilter", "TemplatePattern": "CC: found <P> in <P>", "TemplateID": 255, "loggerLevel": "info", "logline": "\"CC: found \" + walker.workType + \" in \" + base"}
{"classname": "nutch.CCParseFilter", "TemplatePattern": "CC: Failed to parse RDF in <P>: <P>", "TemplateID": 256, "loggerLevel": "warn", "logline": "\"CC: Failed to parse RDF in \" + base + \": \" + e"}
{"classname": "nutch.CCParseFilter", "TemplatePattern": "CC: No RDF root in <P>", "TemplateID": 257, "loggerLevel": "warn", "logline": "\"CC: No RDF root in \" + base"}
{"classname": "tika.TikaParser", "TemplatePattern": "<P> ", "TemplateID": 258, "loggerLevel": "error", "logline": "message"}
{"classname": "tika.TikaParser", "TemplatePattern": "Using Tika parser <P> for mime-type <P>", "TemplateID": 259, "loggerLevel": "debug", "logline": "\"Using Tika parser \" + parser.getClass().getName()  + \" for mime-type \" + mimeType"}
{"classname": "tika.TikaParser", "TemplatePattern": "Error parsing <P>", "TemplateID": 260, "loggerLevel": "error", "logline": "\"Error parsing \" + content.getUrl(), e"}
{"classname": "tika.TikaParser", "TemplatePattern": "Meta tags for <P>: <P>", "TemplateID": 261, "loggerLevel": "trace", "logline": "\"Meta tags for \" + base + \": \" + metaTags.toString()"}
{"classname": "tika.TikaParser", "TemplatePattern": "Getting text...", "TemplateID": 262, "loggerLevel": "trace", "logline": "\"Getting text...\""}
{"classname": "tika.TikaParser", "TemplatePattern": "Getting title...", "TemplateID": 263, "loggerLevel": "trace", "logline": "\"Getting title...\""}
{"classname": "tika.TikaParser", "TemplatePattern": "Getting links...", "TemplateID": 264, "loggerLevel": "trace", "logline": "\"Getting links...\""}
{"classname": "tika.TikaParser", "TemplatePattern": "found <P> outlinks in <P>", "TemplateID": 265, "loggerLevel": "trace", "logline": "\"found \" + outlinks.length + \" outlinks in \"  + content.getUrl()"}
{"classname": "tika.TikaParser", "TemplatePattern": "<P> ", "TemplateID": 266, "loggerLevel": "error", "logline": "message, e1"}
{"classname": "tika.TikaParser", "TemplatePattern": "<P> ", "TemplateID": 267, "loggerLevel": "error", "logline": "message, e2"}
{"classname": "tika.TikaParser", "TemplatePattern": "Can't generate instance for class <P>", "TemplateID": 268, "loggerLevel": "error", "logline": "\"Can't generate instance for class \" + htmlmapperClassName"}
{"classname": "tika.TestOOParser", "TemplatePattern": "Expected : <P>", "TemplateID": 269, "loggerLevel": "none", "logline": "\"Expected : \" + expectedText"}
{"classname": "tika.TestOOParser", "TemplatePattern": "Found <P>: <P>", "TemplateID": 270, "loggerLevel": "none", "logline": "\"Found \" + sampleFiles[i] + \": \" + text"}
{"classname": "depth.DepthScoringFilter", "TemplatePattern": "Missing depth, removing all outlinks from url <P>", "TemplateID": 271, "loggerLevel": "warn", "logline": "\"Missing depth, removing all outlinks from url \" + fromUrl"}
{"classname": "depth.DepthScoringFilter", "TemplatePattern": "Depth limit (<P>) reached, ignoring outlinks for <P>", "TemplateID": 272, "loggerLevel": "info", "logline": "\"Depth limit (\" + curMaxDepth  + \") reached, ignoring outlinks for \" + fromUrl"}
{"classname": "solr.SolrUtils", "TemplatePattern": "Authenticating as: <P>", "TemplateID": 273, "loggerLevel": "info", "logline": "\"Authenticating as: \" + username"}
{"classname": "solr.SolrIndexWriter", "TemplatePattern": "Indexing <P> documents", "TemplateID": 274, "loggerLevel": "info", "logline": "\"Indexing \" + Integer.toString(inputDocs.size())  + \" documents\""}
{"classname": "solr.SolrIndexWriter", "TemplatePattern": "Deleting <P> documents", "TemplateID": 275, "loggerLevel": "info", "logline": "\"Deleting \" + Integer.toString(numDeletes) + \" documents\""}
{"classname": "solr.SolrIndexWriter", "TemplatePattern": "Indexing <P> documents", "TemplateID": 276, "loggerLevel": "info", "logline": "\"Indexing \" + Integer.toString(inputDocs.size())  + \" documents\""}
{"classname": "solr.SolrIndexWriter", "TemplatePattern": "Deleting <P> documents", "TemplateID": 277, "loggerLevel": "info", "logline": "\"Deleting \" + Integer.toString(numDeletes) + \" documents\""}
{"classname": "solr.SolrIndexWriter", "TemplatePattern": "<P> ", "TemplateID": 278, "loggerLevel": "error", "logline": "message"}
{"classname": "solr.SolrMappingReader", "TemplatePattern": "source: <P>source<P> dest: <P>dest<P>", "TemplateID": 279, "loggerLevel": "info", "logline": "\"source: \" + element.getAttribute(\"source\") + \" dest: \"  + element.getAttribute(\"dest\")"}
{"classname": "solr.SolrMappingReader", "TemplatePattern": "source: <P>source<P> dest: <P>dest<P>", "TemplateID": 280, "loggerLevel": "info", "logline": "\"source: \" + element.getAttribute(\"source\") + \" dest: \"  + element.getAttribute(\"dest\")"}
{"classname": "solr.SolrMappingReader", "TemplatePattern": "More than one unique key definitions found in solr index mapping, using default 'id'", "TemplateID": 281, "loggerLevel": "warn", "logline": "\"More than one unique key definitions found in solr index mapping, using default 'id'\""}
{"classname": "solr.SolrMappingReader", "TemplatePattern": "No unique key definition found in solr index mapping using, default 'id'", "TemplateID": 282, "loggerLevel": "warn", "logline": "\"No unique key definition found in solr index mapping using, default 'id'\""}
{"classname": "solr.SolrMappingReader", "TemplatePattern": "<P> ", "TemplateID": 283, "loggerLevel": "warn", "logline": "e.toString()"}
{"classname": "solr.SolrMappingReader", "TemplatePattern": "<P> ", "TemplateID": 284, "loggerLevel": "warn", "logline": "e.toString()"}
{"classname": "solr.SolrMappingReader", "TemplatePattern": "<P> ", "TemplateID": 285, "loggerLevel": "warn", "logline": "e.toString()"}
{"classname": "solr.SolrMappingReader", "TemplatePattern": "<P> ", "TemplateID": 286, "loggerLevel": "warn", "logline": "e.toString()"}
{"classname": "webgraph.ScoreUpdater", "TemplatePattern": "<P> : setting to score <P>", "TemplateID": 287, "loggerLevel": "debug", "logline": "url + \": setting to score \" + inlinkScore"}
{"classname": "webgraph.ScoreUpdater", "TemplatePattern": "<P> : setting to clear score of <P>", "TemplateID": 288, "loggerLevel": "debug", "logline": "url + \": setting to clear score of \" + clearScore"}
{"classname": "webgraph.ScoreUpdater", "TemplatePattern": "<P> : no datum", "TemplateID": 289, "loggerLevel": "debug", "logline": "url + \": no datum\""}
{"classname": "webgraph.ScoreUpdater", "TemplatePattern": "ScoreUpdater: starting at <P>", "TemplateID": 290, "loggerLevel": "info", "logline": "\"ScoreUpdater: starting at \" + sdf.format(start)"}
{"classname": "webgraph.ScoreUpdater", "TemplatePattern": "Running crawldb update <P>", "TemplateID": 291, "loggerLevel": "info", "logline": "\"Running crawldb update \" + crawlDb"}
{"classname": "webgraph.ScoreUpdater", "TemplatePattern": "<P> ", "TemplateID": 292, "loggerLevel": "error", "logline": "StringUtils.stringifyException(e)"}
{"classname": "webgraph.ScoreUpdater", "TemplatePattern": "ScoreUpdater: installing new crawldb <P>", "TemplateID": 293, "loggerLevel": "info", "logline": "\"ScoreUpdater: installing new crawldb \" + crawlDb"}
{"classname": "webgraph.ScoreUpdater", "TemplatePattern": "ScoreUpdater: finished at <P>, elapsed: <P>", "TemplateID": 294, "loggerLevel": "info", "logline": "\"ScoreUpdater: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)"}
{"classname": "webgraph.ScoreUpdater", "TemplatePattern": "ScoreUpdater: <P>", "TemplateID": 295, "loggerLevel": "error", "logline": "\"ScoreUpdater: \" + StringUtils.stringifyException(e)"}
{"classname": "webgraph.NodeDumper", "TemplatePattern": "NodeDumper: starting at <P>", "TemplateID": 296, "loggerLevel": "info", "logline": "\"NodeDumper: starting at \" + sdf.format(start)"}
{"classname": "webgraph.NodeDumper", "TemplatePattern": "NodeDumper: running", "TemplateID": 297, "loggerLevel": "info", "logline": "\"NodeDumper: running\""}
{"classname": "webgraph.NodeDumper", "TemplatePattern": "<P> ", "TemplateID": 298, "loggerLevel": "error", "logline": "StringUtils.stringifyException(e)"}
{"classname": "webgraph.NodeDumper", "TemplatePattern": "NodeDumper: finished at <P>, elapsed: <P>", "TemplateID": 299, "loggerLevel": "info", "logline": "\"NodeDumper: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)"}
{"classname": "webgraph.NodeDumper", "TemplatePattern": "NodeDumper: <P>", "TemplateID": 300, "loggerLevel": "error", "logline": "\"NodeDumper: \" + StringUtils.stringifyException(e)"}
{"classname": "webgraph.LinkDumper", "TemplatePattern": "LinkDumper$Reader usage: <webgraphdb> <url>", "TemplateID": 301, "loggerLevel": "none", "logline": "\"LinkDumper$Reader usage: <webgraphdb> <url>\""}
{"classname": "webgraph.LinkDumper", "TemplatePattern": "<P> :", "TemplateID": 302, "loggerLevel": "none", "logline": "url + \":\""}
{"classname": "webgraph.LinkDumper", "TemplatePattern": "  <P> - <P>", "TemplateID": 303, "loggerLevel": "none", "logline": "\"  \" + node.getUrl() + \" - \"  + node.getNode().toString()"}
{"classname": "webgraph.LinkDumper", "TemplatePattern": "NodeDumper: starting at <P>", "TemplateID": 304, "loggerLevel": "info", "logline": "\"NodeDumper: starting at \" + sdf.format(start)"}
{"classname": "webgraph.LinkDumper", "TemplatePattern": "LinkDumper: running inverter", "TemplateID": 305, "loggerLevel": "info", "logline": "\"LinkDumper: running inverter\""}
{"classname": "webgraph.LinkDumper", "TemplatePattern": "LinkDumper: finished inverter", "TemplateID": 306, "loggerLevel": "info", "logline": "\"LinkDumper: finished inverter\""}
{"classname": "webgraph.LinkDumper", "TemplatePattern": "<P> ", "TemplateID": 307, "loggerLevel": "error", "logline": "StringUtils.stringifyException(e)"}
{"classname": "webgraph.LinkDumper", "TemplatePattern": "LinkDumper: running merger", "TemplateID": 308, "loggerLevel": "info", "logline": "\"LinkDumper: running merger\""}
{"classname": "webgraph.LinkDumper", "TemplatePattern": "LinkDumper: finished merger", "TemplateID": 309, "loggerLevel": "info", "logline": "\"LinkDumper: finished merger\""}
{"classname": "webgraph.LinkDumper", "TemplatePattern": "<P> ", "TemplateID": 310, "loggerLevel": "error", "logline": "StringUtils.stringifyException(e)"}
{"classname": "webgraph.LinkDumper", "TemplatePattern": "LinkDumper: finished at <P>, elapsed: <P>", "TemplateID": 311, "loggerLevel": "info", "logline": "\"LinkDumper: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)"}
{"classname": "webgraph.LinkDumper", "TemplatePattern": "LinkDumper: <P>", "TemplateID": 312, "loggerLevel": "error", "logline": "\"LinkDumper: \" + StringUtils.stringifyException(e)"}
{"classname": "webgraph.LoopReader", "TemplatePattern": "<P> :", "TemplateID": 313, "loggerLevel": "none", "logline": "url + \":\""}
{"classname": "webgraph.LoopReader", "TemplatePattern": "  <P>", "TemplateID": 314, "loggerLevel": "none", "logline": "\"  \" + loopUrl"}
{"classname": "webgraph.LinkRank", "TemplatePattern": "Starting link counter job", "TemplateID": 315, "loggerLevel": "info", "logline": "\"Starting link counter job\""}
{"classname": "webgraph.LinkRank", "TemplatePattern": "<P> ", "TemplateID": 316, "loggerLevel": "error", "logline": "StringUtils.stringifyException(e)"}
{"classname": "webgraph.LinkRank", "TemplatePattern": "Finished link counter job", "TemplateID": 317, "loggerLevel": "info", "logline": "\"Finished link counter job\""}
{"classname": "webgraph.LinkRank", "TemplatePattern": "Reading numlinks temp file", "TemplateID": 318, "loggerLevel": "info", "logline": "\"Reading numlinks temp file\""}
{"classname": "webgraph.LinkRank", "TemplatePattern": "Deleting numlinks temp file", "TemplateID": 319, "loggerLevel": "info", "logline": "\"Deleting numlinks temp file\""}
{"classname": "webgraph.LinkRank", "TemplatePattern": "Starting initialization job", "TemplateID": 320, "loggerLevel": "info", "logline": "\"Starting initialization job\""}
{"classname": "webgraph.LinkRank", "TemplatePattern": "<P> ", "TemplateID": 321, "loggerLevel": "error", "logline": "StringUtils.stringifyException(e)"}
{"classname": "webgraph.LinkRank", "TemplatePattern": "Finished initialization job.", "TemplateID": 322, "loggerLevel": "info", "logline": "\"Finished initialization job.\""}
{"classname": "webgraph.LinkRank", "TemplatePattern": "Starting inverter job", "TemplateID": 323, "loggerLevel": "info", "logline": "\"Starting inverter job\""}
{"classname": "webgraph.LinkRank", "TemplatePattern": "<P> ", "TemplateID": 324, "loggerLevel": "error", "logline": "StringUtils.stringifyException(e)"}
{"classname": "webgraph.LinkRank", "TemplatePattern": "Finished inverter job.", "TemplateID": 325, "loggerLevel": "info", "logline": "\"Finished inverter job.\""}
{"classname": "webgraph.LinkRank", "TemplatePattern": "Starting analysis job", "TemplateID": 326, "loggerLevel": "info", "logline": "\"Starting analysis job\""}
{"classname": "webgraph.LinkRank", "TemplatePattern": "<P> ", "TemplateID": 327, "loggerLevel": "error", "logline": "StringUtils.stringifyException(e)"}
{"classname": "webgraph.LinkRank", "TemplatePattern": "Finished analysis job.", "TemplateID": 328, "loggerLevel": "info", "logline": "\"Finished analysis job.\""}
{"classname": "webgraph.LinkRank", "TemplatePattern": "LoopSet without Node object received for <P> . You should either not use Loops as input of the LinkRank program or rerun the Loops program over the WebGraph.", "TemplateID": 329, "loggerLevel": "warn", "logline": "\"LoopSet without Node object received for \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/scoring/webgraph/LinkRank.java-            + key.toString()  + \" . You should either not use Loops as input of the LinkRank program or rerun the Loops program over the WebGraph.\""}
{"classname": "webgraph.LinkRank", "TemplatePattern": "<P> : num outlinks <P>", "TemplateID": 330, "loggerLevel": "debug", "logline": "fromUrl + \": num outlinks \" + numOutlinks"}
{"classname": "webgraph.LinkRank", "TemplatePattern": "<P> : Skipping inverting inlink from loop <P>", "TemplateID": 331, "loggerLevel": "debug", "logline": "fromUrl + \": Skipping inverting inlink from loop \"  + toUrl"}
{"classname": "webgraph.LinkRank", "TemplatePattern": "<P> : inverting inlink from <P> origscore: <P> numOutlinks: <P> inlinkscore: <P>", "TemplateID": 332, "loggerLevel": "debug", "logline": "toUrl + \": inverting inlink from \" + fromUrl  /root/nutch-git-source/nutch/src/java/org/apache/nutch/scoring/webgraph/LinkRank.java-              + \" origscore: \" + inlinkScore + \" numOutlinks: \" + numOutlinks  + \" inlinkscore: \" + outlinkScore"}
{"classname": "webgraph.LinkRank", "TemplatePattern": "<P> ", "TemplateID": 333, "loggerLevel": "error", "logline": "StringUtils.stringifyException(e)"}
{"classname": "webgraph.LinkRank", "TemplatePattern": "<P> : ignoring <P> from <P>, duplicate page or domain", "TemplateID": 334, "loggerLevel": "debug", "logline": "url + \": ignoring \" + scoreFromInlink + \" from \"  + inlinkUrl + \", duplicate page or domain\""}
{"classname": "webgraph.LinkRank", "TemplatePattern": "<P> : adding <P> from <P>, total: <P>", "TemplateID": 335, "loggerLevel": "debug", "logline": "url + \": adding \" + scoreFromInlink + \" from \" + inlinkUrl  + \", total: \" + totalInlinkScore"}
{"classname": "webgraph.LinkRank", "TemplatePattern": "<P> : score: <P> num inlinks: <P> iteration: <P>", "TemplateID": 336, "loggerLevel": "debug", "logline": "url + \": score: \" + linkRankScore + \" num inlinks: \"  + numInlinks + \" iteration: \" + itNum"}
{"classname": "webgraph.LinkRank", "TemplatePattern": "Analysis: starting at <P>", "TemplateID": 337, "loggerLevel": "info", "logline": "\"Analysis: starting at \" + sdf.format(start)"}
{"classname": "webgraph.LinkRank", "TemplatePattern": "Analysis: Number of links: <P>", "TemplateID": 338, "loggerLevel": "info", "logline": "\"Analysis: Number of links: \" + numLinks"}
{"classname": "webgraph.LinkRank", "TemplatePattern": "Analysis: Rank One: <P>", "TemplateID": 339, "loggerLevel": "info", "logline": "\"Analysis: Rank One: \" + rankOneScore"}
{"classname": "webgraph.LinkRank", "TemplatePattern": "Analysis: Starting iteration <P> of <P>", "TemplateID": 340, "loggerLevel": "info", "logline": "\"Analysis: Starting iteration \" + (i + 1) + \" of \"  + numIterations"}
{"classname": "webgraph.LinkRank", "TemplatePattern": "Analysis: Installing new link scores", "TemplateID": 341, "loggerLevel": "info", "logline": "\"Analysis: Installing new link scores\""}
{"classname": "webgraph.LinkRank", "TemplatePattern": "Analysis: finished iteration <P> of <P>", "TemplateID": 342, "loggerLevel": "info", "logline": "\"Analysis: finished iteration \" + (i + 1) + \" of \"  + numIterations"}
{"classname": "webgraph.LinkRank", "TemplatePattern": "Analysis: Installing web graph nodes", "TemplateID": 343, "loggerLevel": "info", "logline": "\"Analysis: Installing web graph nodes\""}
{"classname": "webgraph.LinkRank", "TemplatePattern": "Analysis: finished at <P>, elapsed: <P>", "TemplateID": 344, "loggerLevel": "info", "logline": "\"Analysis: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)"}
{"classname": "webgraph.LinkRank", "TemplatePattern": "LinkAnalysis: <P>", "TemplateID": 345, "loggerLevel": "error", "logline": "\"LinkAnalysis: \" + StringUtils.stringifyException(e)"}
{"classname": "webgraph.WebGraph", "TemplatePattern": "Skipping <P>:<P>", "TemplateID": 346, "loggerLevel": "warn", "logline": "\"Skipping \" + url + \":\" + e"}
{"classname": "webgraph.WebGraph", "TemplatePattern": "WebGraphDb: starting at <P>", "TemplateID": 347, "loggerLevel": "info", "logline": "\"WebGraphDb: starting at \" + sdf.format(start)"}
{"classname": "webgraph.WebGraph", "TemplatePattern": "WebGraphDb: webgraphdb: <P>", "TemplateID": 348, "loggerLevel": "info", "logline": "\"WebGraphDb: webgraphdb: \" + webGraphDb"}
{"classname": "webgraph.WebGraph", "TemplatePattern": "WebGraphDb: URL normalize: <P>", "TemplateID": 349, "loggerLevel": "info", "logline": "\"WebGraphDb: URL normalize: \" + normalize"}
{"classname": "webgraph.WebGraph", "TemplatePattern": "WebGraphDb: URL filter: <P>", "TemplateID": 350, "loggerLevel": "info", "logline": "\"WebGraphDb: URL filter: \" + filter"}
{"classname": "webgraph.WebGraph", "TemplatePattern": "OutlinkDb: deleting gone links", "TemplateID": 351, "loggerLevel": "info", "logline": "\"OutlinkDb: deleting gone links\""}
{"classname": "webgraph.WebGraph", "TemplatePattern": "OutlinkDb: adding input: <P>", "TemplateID": 352, "loggerLevel": "info", "logline": "\"OutlinkDb: adding input: \" + parseData"}
{"classname": "webgraph.WebGraph", "TemplatePattern": "OutlinkDb: adding input: <P>", "TemplateID": 353, "loggerLevel": "info", "logline": "\"OutlinkDb: adding input: \" + crawlFetch"}
{"classname": "webgraph.WebGraph", "TemplatePattern": "OutlinkDb: adding input: <P>", "TemplateID": 354, "loggerLevel": "info", "logline": "\"OutlinkDb: adding input: \" + outlinkDb"}
{"classname": "webgraph.WebGraph", "TemplatePattern": "OutlinkDb: running", "TemplateID": 355, "loggerLevel": "info", "logline": "\"OutlinkDb: running\""}
{"classname": "webgraph.WebGraph", "TemplatePattern": "OutlinkDb: installing <P>", "TemplateID": 356, "loggerLevel": "info", "logline": "\"OutlinkDb: installing \" + outlinkDb"}
{"classname": "webgraph.WebGraph", "TemplatePattern": "OutlinkDb: finished", "TemplateID": 357, "loggerLevel": "info", "logline": "\"OutlinkDb: finished\""}
{"classname": "webgraph.WebGraph", "TemplatePattern": "<P> ", "TemplateID": 358, "loggerLevel": "error", "logline": "StringUtils.stringifyException(e)"}
{"classname": "webgraph.WebGraph", "TemplatePattern": "InlinkDb: adding input: <P>", "TemplateID": 359, "loggerLevel": "info", "logline": "\"InlinkDb: adding input: \" + outlinkDb"}
{"classname": "webgraph.WebGraph", "TemplatePattern": "InlinkDb: running", "TemplateID": 360, "loggerLevel": "info", "logline": "\"InlinkDb: running\""}
{"classname": "webgraph.WebGraph", "TemplatePattern": "InlinkDb: installing <P>", "TemplateID": 361, "loggerLevel": "info", "logline": "\"InlinkDb: installing \" + inlinkDb"}
{"classname": "webgraph.WebGraph", "TemplatePattern": "InlinkDb: finished", "TemplateID": 362, "loggerLevel": "info", "logline": "\"InlinkDb: finished\""}
{"classname": "webgraph.WebGraph", "TemplatePattern": "<P> ", "TemplateID": 363, "loggerLevel": "error", "logline": "StringUtils.stringifyException(e)"}
{"classname": "webgraph.WebGraph", "TemplatePattern": "NodeDb: adding input: <P>", "TemplateID": 364, "loggerLevel": "info", "logline": "\"NodeDb: adding input: \" + outlinkDb"}
{"classname": "webgraph.WebGraph", "TemplatePattern": "NodeDb: adding input: <P>", "TemplateID": 365, "loggerLevel": "info", "logline": "\"NodeDb: adding input: \" + inlinkDb"}
{"classname": "webgraph.WebGraph", "TemplatePattern": "NodeDb: running", "TemplateID": 366, "loggerLevel": "info", "logline": "\"NodeDb: running\""}
{"classname": "webgraph.WebGraph", "TemplatePattern": "NodeDb: installing <P>", "TemplateID": 367, "loggerLevel": "info", "logline": "\"NodeDb: installing \" + nodeDb"}
{"classname": "webgraph.WebGraph", "TemplatePattern": "NodeDb: finished", "TemplateID": 368, "loggerLevel": "info", "logline": "\"NodeDb: finished\""}
{"classname": "webgraph.WebGraph", "TemplatePattern": "<P> ", "TemplateID": 369, "loggerLevel": "error", "logline": "StringUtils.stringifyException(e)"}
{"classname": "webgraph.WebGraph", "TemplatePattern": "WebGraphDb: finished at <P>, elapsed: <P>", "TemplateID": 370, "loggerLevel": "info", "logline": "\"WebGraphDb: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)"}
{"classname": "webgraph.WebGraph", "TemplatePattern": "WebGraph: <P>", "TemplateID": 371, "loggerLevel": "error", "logline": "\"WebGraph: \" + StringUtils.stringifyException(e)"}
{"classname": "webgraph.NodeReader", "TemplatePattern": "<P> :", "TemplateID": 372, "loggerLevel": "none", "logline": "url + \":\""}
{"classname": "webgraph.NodeReader", "TemplatePattern": "  inlink score: <P>", "TemplateID": 373, "loggerLevel": "none", "logline": "\"  inlink score: \" + node.getInlinkScore()"}
{"classname": "webgraph.NodeReader", "TemplatePattern": "  outlink score: <P>", "TemplateID": 374, "loggerLevel": "none", "logline": "\"  outlink score: \" + node.getOutlinkScore()"}
{"classname": "webgraph.NodeReader", "TemplatePattern": "  num inlinks: <P>", "TemplateID": 375, "loggerLevel": "none", "logline": "\"  num inlinks: \" + node.getNumInlinks()"}
{"classname": "webgraph.NodeReader", "TemplatePattern": "  num outlinks: <P>", "TemplateID": 376, "loggerLevel": "none", "logline": "\"  num outlinks: \" + node.getNumOutlinks()"}
{"classname": "webgraph.Loops", "TemplatePattern": "Loops: starting at <P>", "TemplateID": 377, "loggerLevel": "info", "logline": "\"Loops: starting at \" + sdf.format(start)"}
{"classname": "webgraph.Loops", "TemplatePattern": "Loops: webgraphdb: <P>", "TemplateID": 378, "loggerLevel": "info", "logline": "\"Loops: webgraphdb: \" + webGraphDb"}
{"classname": "webgraph.Loops", "TemplatePattern": "Loops: starting initializer", "TemplateID": 379, "loggerLevel": "info", "logline": "\"Loops: starting initializer\""}
{"classname": "webgraph.Loops", "TemplatePattern": "Loops: installing initializer <P>", "TemplateID": 380, "loggerLevel": "info", "logline": "\"Loops: installing initializer \" + routes"}
{"classname": "webgraph.Loops", "TemplatePattern": "Loops: finished initializer", "TemplateID": 381, "loggerLevel": "info", "logline": "\"Loops: finished initializer\""}
{"classname": "webgraph.Loops", "TemplatePattern": "<P> ", "TemplateID": 382, "loggerLevel": "error", "logline": "StringUtils.stringifyException(e)"}
{"classname": "webgraph.Loops", "TemplatePattern": "Loops: starting looper", "TemplateID": 383, "loggerLevel": "info", "logline": "\"Loops: starting looper\""}
{"classname": "webgraph.Loops", "TemplatePattern": "Loops: installing looper <P>", "TemplateID": 384, "loggerLevel": "info", "logline": "\"Loops: installing looper \" + routes"}
{"classname": "webgraph.Loops", "TemplatePattern": "Loops: finished looper", "TemplateID": 385, "loggerLevel": "info", "logline": "\"Loops: finished looper\""}
{"classname": "webgraph.Loops", "TemplatePattern": "<P> ", "TemplateID": 386, "loggerLevel": "error", "logline": "StringUtils.stringifyException(e)"}
{"classname": "webgraph.Loops", "TemplatePattern": "Loops: starting finalizer", "TemplateID": 387, "loggerLevel": "info", "logline": "\"Loops: starting finalizer\""}
{"classname": "webgraph.Loops", "TemplatePattern": "Loops: finished finalizer", "TemplateID": 388, "loggerLevel": "info", "logline": "\"Loops: finished finalizer\""}
{"classname": "webgraph.Loops", "TemplatePattern": "<P> ", "TemplateID": 389, "loggerLevel": "error", "logline": "StringUtils.stringifyException(e)"}
{"classname": "webgraph.Loops", "TemplatePattern": "Loops: finished at <P>, elapsed: <P>", "TemplateID": 390, "loggerLevel": "info", "logline": "\"Loops: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)"}
{"classname": "webgraph.Loops", "TemplatePattern": "Loops: <P>", "TemplateID": 391, "loggerLevel": "error", "logline": "\"Loops: \" + StringUtils.stringifyException(e)"}
{"classname": "plugin.PluginRepository", "TemplatePattern": "No plugins found on paths of property plugin.folders=\\<P>plugin.folders<P>", "TemplateID": 392, "loggerLevel": "warn", "logline": "\"No plugins found on paths of property plugin.folders=\\\"{}\\\"\",  conf.get(\"plugin.folders\")"}
{"classname": "plugin.PluginRepository", "TemplatePattern": "<P> ", "TemplateID": 393, "loggerLevel": "error", "logline": "e.toString()"}
{"classname": "plugin.PluginRepository", "TemplatePattern": "Adding extension point <P>", "TemplateID": 394, "loggerLevel": "debug", "logline": "\"Adding extension point \" + xpId"}
{"classname": "plugin.PluginRepository", "TemplatePattern": "<P> ", "TemplateID": 395, "loggerLevel": "warn", "logline": "mde.getMessage()"}
{"classname": "plugin.PluginRepository", "TemplatePattern": "<P> ", "TemplateID": 396, "loggerLevel": "warn", "logline": "cde.getMessage()"}
{"classname": "plugin.PluginRepository", "TemplatePattern": "Plugin Auto-activation mode: [<P>]", "TemplateID": 397, "loggerLevel": "info", "logline": "\"Plugin Auto-activation mode: [\" + this.auto + \"]\""}
{"classname": "plugin.PluginRepository", "TemplatePattern": "Registered Plugins:", "TemplateID": 398, "loggerLevel": "info", "logline": "\"Registered Plugins:\""}
{"classname": "plugin.PluginRepository", "TemplatePattern": "\\tNONE", "TemplateID": 399, "loggerLevel": "info", "logline": "\"\\tNONE\""}
{"classname": "plugin.PluginRepository", "TemplatePattern": "\\t<P> (<P>)", "TemplateID": 400, "loggerLevel": "info", "logline": "\"\\t\" + plugin.getName() + \" (\" + plugin.getPluginId() + \")\""}
{"classname": "plugin.PluginRepository", "TemplatePattern": "Registered Extension-Points:", "TemplateID": 401, "loggerLevel": "info", "logline": "\"Registered Extension-Points:\""}
{"classname": "plugin.PluginRepository", "TemplatePattern": "\\tNONE", "TemplateID": 402, "loggerLevel": "info", "logline": "\"\\tNONE\""}
{"classname": "plugin.PluginRepository", "TemplatePattern": "\\t<P> (<P>)", "TemplateID": 403, "loggerLevel": "info", "logline": "\"\\t\" + ep.getName() + \" (\" + ep.getId() + \")\""}
{"classname": "plugin.PluginRepository", "TemplatePattern": "not including: <P>", "TemplateID": 404, "loggerLevel": "debug", "logline": "\"not including: \" + id"}
{"classname": "plugin.PluginRepository", "TemplatePattern": "excluding: <P>", "TemplateID": 405, "loggerLevel": "debug", "logline": "\"excluding: \" + id"}
{"classname": "plugin.PluginRepository", "TemplatePattern": "<P>  : <P> declared in configuration property <P> but not found in an active plugin - ignoring.", "TemplateID": 406, "loggerLevel": "error", "logline": "clazz.getSimpleName() + \" : \" + orderedFilter  /root/nutch-git-source/nutch/src/java/org/apache/nutch/plugin/PluginRepository.java-                + \" declared in configuration property \" + orderProperty  + \" but not found in an active plugin - ignoring.\""}
{"classname": "plugin.PluginRepository", "TemplatePattern": "<P>  : filters[<P>] = <P>", "TemplateID": 407, "loggerLevel": "trace", "logline": "clazz.getSimpleName() + \" : filters[\" + i + \"] = \"  + filter[i].getClass()"}
{"classname": "plugin.PluginRepository", "TemplatePattern": "Plugin '<P>' not present or inactive.", "TemplateID": 408, "loggerLevel": "none", "logline": "\"Plugin '\" + args[0] + \"' not present or inactive.\""}
{"classname": "plugin.PluginRepository", "TemplatePattern": "Could not load the class '<P>: <P>", "TemplateID": 409, "loggerLevel": "none", "logline": "\"Could not load the class '\" + args[1] + \": \"  + e.getMessage()"}
{"classname": "plugin.PluginRepository", "TemplatePattern": "Could not find the 'main(String[])' method in class <P>: <P>", "TemplateID": 410, "loggerLevel": "none", "logline": "\"Could not find the 'main(String[])' method in class \"  + args[1] + \": \" + e.getMessage()"}
{"classname": "plugin.PluginManifestParser", "TemplatePattern": "Plugins: looking in: <P>", "TemplateID": 411, "loggerLevel": "info", "logline": "\"Plugins: looking in: \" + directory.getAbsolutePath()"}
{"classname": "plugin.PluginManifestParser", "TemplatePattern": "parsing: <P>", "TemplateID": 412, "loggerLevel": "debug", "logline": "\"parsing: \" + manifestPath"}
{"classname": "plugin.PluginManifestParser", "TemplatePattern": "Error while loading plugin `<P>` <P>", "TemplateID": 413, "loggerLevel": "warn", "logline": "\"Error while loading plugin `\" + manifestPath + \"` \"  + e.toString()"}
{"classname": "plugin.PluginManifestParser", "TemplatePattern": "Plugins: directory not found: <P>", "TemplateID": 414, "loggerLevel": "warn", "logline": "\"Plugins: directory not found: \" + name"}
{"classname": "plugin.PluginManifestParser", "TemplatePattern": "Plugins: not a file: url. Can't load plugins from: <P>", "TemplateID": 415, "loggerLevel": "warn", "logline": "\"Plugins: not a file: url. Can't load plugins from: \" + url"}
{"classname": "plugin.PluginManifestParser", "TemplatePattern": "Plugins: directory not found: <P>", "TemplateID": 416, "loggerLevel": "warn", "logline": "\"Plugins: directory not found: \" + name"}
{"classname": "plugin.PluginManifestParser", "TemplatePattern": "plugin: id=<P> name=<P> version=<P> provider=<P>class=<P>", "TemplateID": 417, "loggerLevel": "debug", "logline": "\"plugin: id=\" + id + \" name=\" + name + \" version=\" + version  + \" provider=\" + providerName + \"class=\" + pluginClazz"}
{"classname": "plugin.PluginManifestParser", "TemplatePattern": "impl: point=<P> class=<P>", "TemplateID": 418, "loggerLevel": "debug", "logline": "\"impl: point=\" + pointId + \" class=\" + extensionClass"}
{"classname": "plugin.PluginDescriptor", "TemplatePattern": "<P>  <P>", "TemplateID": 419, "loggerLevel": "debug", "logline": "getPluginId() + \" \" + e.toString()"}
{"classname": "net.URLFilterChecker", "TemplatePattern": "Checking URLFilter <P>", "TemplateID": 420, "loggerLevel": "none", "logline": "\"Checking URLFilter \" + filterName"}
{"classname": "net.URLFilterChecker", "TemplatePattern": "+", "TemplateID": 421, "loggerLevel": "none", "logline": "\"+\""}
{"classname": "net.URLFilterChecker", "TemplatePattern": "<P> ", "TemplateID": 422, "loggerLevel": "none", "logline": "out"}
{"classname": "net.URLFilterChecker", "TemplatePattern": "-", "TemplateID": 423, "loggerLevel": "none", "logline": "\"-\""}
{"classname": "net.URLFilterChecker", "TemplatePattern": "<P> ", "TemplateID": 424, "loggerLevel": "none", "logline": "line"}
{"classname": "net.URLFilterChecker", "TemplatePattern": "Checking combination of all URLFilters available", "TemplateID": 425, "loggerLevel": "none", "logline": "\"Checking combination of all URLFilters available\""}
{"classname": "net.URLFilterChecker", "TemplatePattern": "+", "TemplateID": 426, "loggerLevel": "none", "logline": "\"+\""}
{"classname": "net.URLFilterChecker", "TemplatePattern": "<P> ", "TemplateID": 427, "loggerLevel": "none", "logline": "out"}
{"classname": "net.URLFilterChecker", "TemplatePattern": "-", "TemplateID": 428, "loggerLevel": "none", "logline": "\"-\""}
{"classname": "net.URLFilterChecker", "TemplatePattern": "<P> ", "TemplateID": 429, "loggerLevel": "none", "logline": "line"}
{"classname": "net.URLFilterChecker", "TemplatePattern": "<P> ", "TemplateID": 430, "loggerLevel": "none", "logline": "usage"}
{"classname": "net.URLFilterChecker", "TemplatePattern": "<P> ", "TemplateID": 431, "loggerLevel": "none", "logline": "usage"}
{"classname": "net.URLNormalizerChecker", "TemplatePattern": "Checking URLNormalizer <P>", "TemplateID": 432, "loggerLevel": "none", "logline": "\"Checking URLNormalizer \" + normalizerName"}
{"classname": "net.URLNormalizerChecker", "TemplatePattern": "<P> ", "TemplateID": 433, "loggerLevel": "none", "logline": "out"}
{"classname": "net.URLNormalizerChecker", "TemplatePattern": "Checking combination of all URLNormalizers available", "TemplateID": 434, "loggerLevel": "none", "logline": "\"Checking combination of all URLNormalizers available\""}
{"classname": "net.URLNormalizerChecker", "TemplatePattern": "<P> ", "TemplateID": 435, "loggerLevel": "none", "logline": "out"}
{"classname": "net.URLNormalizerChecker", "TemplatePattern": "<P> ", "TemplateID": 436, "loggerLevel": "none", "logline": "usage"}
{"classname": "net.URLNormalizers", "TemplatePattern": "URLNormalizers:PluginRuntimeException when <P>initializing url normalizer plugin <P> instance in getURLNormalizers <P>function: attempting to continue instantiating plugins", "TemplateID": 437, "loggerLevel": "warn", "logline": "\"URLNormalizers:PluginRuntimeException when \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/net/URLNormalizers.java-            + \"initializing url normalizer plugin \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/net/URLNormalizers.java-            + ext.getDescriptor().getPluginId()  /root/nutch-git-source/nutch/src/java/org/apache/nutch/net/URLNormalizers.java-            + \" instance in getURLNormalizers \"  + \"function: attempting to continue instantiating plugins\""}
{"classname": "protocols.HttpDateFormat", "TemplatePattern": "<P> ", "TemplateID": 438, "loggerLevel": "none", "logline": "string"}
{"classname": "protocols.HttpDateFormat", "TemplatePattern": "<P> ", "TemplateID": 439, "loggerLevel": "none", "logline": "HttpDateFormat.toString(time)"}
{"classname": "tools.AbstractCommonCrawlFormat", "TemplatePattern": "Error in processing file <P>: <P>", "TemplateID": 440, "loggerLevel": "warn", "logline": "\"Error in processing file \" + url + \": \" + ioe.getMessage()"}
{"classname": "tools.AbstractCommonCrawlFormat", "TemplatePattern": "<P> ", "TemplateID": 441, "loggerLevel": "warn", "logline": "pe.getMessage()"}
{"classname": "tools.AbstractCommonCrawlFormat", "TemplatePattern": "<P> ", "TemplateID": 442, "loggerLevel": "warn", "logline": "pe.getMessage()"}
{"classname": "tools.AbstractCommonCrawlFormat", "TemplatePattern": "<P> ", "TemplateID": 443, "loggerLevel": "warn", "logline": "pe.getMessage()"}
{"classname": "tools.ResolveUrls", "TemplatePattern": "Resolved: <P>", "TemplateID": 444, "loggerLevel": "info", "logline": "\"Resolved: \" + host"}
{"classname": "tools.ResolveUrls", "TemplatePattern": "Error Resolving: <P>", "TemplateID": 445, "loggerLevel": "info", "logline": "\"Error Resolving: \" + host"}
{"classname": "tools.ResolveUrls", "TemplatePattern": ", <P> millis", "TemplateID": 446, "loggerLevel": "info", "logline": "\", \" + total + \" millis\""}
{"classname": "tools.ResolveUrls", "TemplatePattern": "Starting: <P>", "TemplateID": 447, "loggerLevel": "info", "logline": "\"Starting: \" + urlStr"}
{"classname": "tools.ResolveUrls", "TemplatePattern": "<P> ", "TemplateID": 448, "loggerLevel": "info", "logline": "StringUtils.stringifyException(e)"}
{"classname": "tools.ResolveUrls", "TemplatePattern": "Total: <P>, Resovled: <P>, Errored: <P>, Average Time: <P>", "TemplateID": 449, "loggerLevel": "info", "logline": "\"Total: \" + numTotal.get() + \", Resovled: \" + numResolved.get()  /root/nutch-git-source/nutch/src/java/org/apache/nutch/tools/ResolveUrls.java-        + \", Errored: \" + numErrored.get() + \", Average Time: \"  + totalTime.get() / numTotal.get()"}
{"classname": "tools.ResolveUrls", "TemplatePattern": "ResolveUrls: <P>", "TemplateID": 450, "loggerLevel": "error", "logline": "\"ResolveUrls: \" + StringUtils.stringifyException(e)"}
{"classname": "arc.ArcSegmentCreator", "TemplatePattern": "Couldn't pass score, url <P> (<P>)", "TemplateID": 451, "loggerLevel": "warn", "logline": "\"Couldn't pass score, url \" + key + \" (\" + e + \")\""}
{"classname": "arc.ArcSegmentCreator", "TemplatePattern": "Error parsing: <P>: <P>", "TemplateID": 452, "loggerLevel": "warn", "logline": "\"Error parsing: \" + key + \": \"  + StringUtils.stringifyException(e)"}
{"classname": "arc.ArcSegmentCreator", "TemplatePattern": "Error parsing: <P>: <P>", "TemplateID": 453, "loggerLevel": "warn", "logline": "\"Error parsing: \" + key + \": \" + parseStatus"}
{"classname": "arc.ArcSegmentCreator", "TemplatePattern": "Couldn't pass score, url <P> (<P>)", "TemplateID": 454, "loggerLevel": "warn", "logline": "\"Couldn't pass score, url \" + key + \" (\" + e + \")\""}
{"classname": "arc.ArcSegmentCreator", "TemplatePattern": "ArcSegmentCreator caught:<P>", "TemplateID": 455, "loggerLevel": "error", "logline": "\"ArcSegmentCreator caught:\"  + StringUtils.stringifyException(e)"}
{"classname": "arc.ArcSegmentCreator", "TemplatePattern": "Conversion of <P> failed with: <P>", "TemplateID": 456, "loggerLevel": "info", "logline": "\"Conversion of \" + url + \" failed with: \"  + StringUtils.stringifyException(t)"}
{"classname": "arc.ArcSegmentCreator", "TemplatePattern": "Ignoring file header: <P>", "TemplateID": 457, "loggerLevel": "info", "logline": "\"Ignoring file header: \" + urlStr"}
{"classname": "arc.ArcSegmentCreator", "TemplatePattern": "Processing: <P>", "TemplateID": 458, "loggerLevel": "info", "logline": "\"Processing: \" + urlStr"}
{"classname": "arc.ArcSegmentCreator", "TemplatePattern": "Skipping <P>:<P>", "TemplateID": 459, "loggerLevel": "warn", "logline": "\"Skipping \" + url + \":\" + e"}
{"classname": "arc.ArcSegmentCreator", "TemplatePattern": "ArcSegmentCreator: starting at <P>", "TemplateID": 460, "loggerLevel": "info", "logline": "\"ArcSegmentCreator: starting at \" + sdf.format(start)"}
{"classname": "arc.ArcSegmentCreator", "TemplatePattern": "ArcSegmentCreator: arc files dir: <P>", "TemplateID": 461, "loggerLevel": "info", "logline": "\"ArcSegmentCreator: arc files dir: \" + arcFiles"}
{"classname": "arc.ArcSegmentCreator", "TemplatePattern": "ArcSegmentCreator: finished at <P>, elapsed: <P>", "TemplateID": 462, "loggerLevel": "info", "logline": "\"ArcSegmentCreator: finished at \" + sdf.format(end)  + \", elapsed: \" + TimingUtil.elapsedTime(start, end)"}
{"classname": "arc.ArcSegmentCreator", "TemplatePattern": "<P> ", "TemplateID": 463, "loggerLevel": "none", "logline": "usage"}
{"classname": "arc.ArcSegmentCreator", "TemplatePattern": "ArcSegmentCreator: <P>", "TemplateID": 464, "loggerLevel": "error", "logline": "\"ArcSegmentCreator: \" + StringUtils.stringifyException(e)"}
{"classname": "arc.ArcRecordReader", "TemplatePattern": "Ignoring position: <P>", "TemplateID": 465, "loggerLevel": "none", "logline": "\"Ignoring position: \" + (startRead)"}
{"classname": "tools.Benchmark", "TemplatePattern": "\\t-depth NN\\tperform NN crawl cycles (default: 10)", "TemplateID": 466, "loggerLevel": "none", "logline": "\"\\t-depth NN\\tperform NN crawl cycles (default: 10)\""}
{"classname": "tools.Benchmark", "TemplatePattern": "\\t-plugins <regex>\\toverride 'plugin.includes'.", "TemplateID": 467, "loggerLevel": "none", "logline": "\"\\t-plugins <regex>\\toverride 'plugin.includes'.\""}
{"classname": "tools.Benchmark", "TemplatePattern": "\\tNOTE: if not specified, this is reset to: <P>", "TemplateID": 468, "loggerLevel": "none", "logline": "\"\\tNOTE: if not specified, this is reset to: \"  + plugins"}
{"classname": "tools.Benchmark", "TemplatePattern": "Invalid argument: '<P>'", "TemplateID": 469, "loggerLevel": "fatal", "logline": "\"Invalid argument: '\" + args[i] + \"'\""}
{"classname": "tools.Benchmark", "TemplatePattern": "<P> ", "TemplateID": 470, "loggerLevel": "none", "logline": "res"}
{"classname": "tools.Benchmark", "TemplatePattern": "crawl started in: <P>", "TemplateID": 471, "loggerLevel": "info", "logline": "\"crawl started in: \" + dir"}
{"classname": "tools.Benchmark", "TemplatePattern": "rootUrlDir = <P>", "TemplateID": 472, "loggerLevel": "info", "logline": "\"rootUrlDir = \" + rootUrlDir"}
{"classname": "tools.Benchmark", "TemplatePattern": "threads = <P>", "TemplateID": 473, "loggerLevel": "info", "logline": "\"threads = \" + threads"}
{"classname": "tools.Benchmark", "TemplatePattern": "depth = <P>", "TemplateID": 474, "loggerLevel": "info", "logline": "\"depth = \" + depth"}
{"classname": "tools.Benchmark", "TemplatePattern": "Stopping at depth=<P> - no more URLs to fetch.", "TemplateID": 475, "loggerLevel": "info", "logline": "\"Stopping at depth=\" + i + \" - no more URLs to fetch.\""}
{"classname": "tools.Benchmark", "TemplatePattern": "No URLs to fetch - check your seed list and URL filters.", "TemplateID": 476, "loggerLevel": "warn", "logline": "\"No URLs to fetch - check your seed list and URL filters.\""}
{"classname": "tools.Benchmark", "TemplatePattern": "crawl finished: <P>", "TemplateID": 477, "loggerLevel": "info", "logline": "\"crawl finished: \" + dir"}
{"classname": "tools.CommonCrawlDataDumper", "TemplatePattern": "Output directory: [<P>]: does not exist, creating it.", "TemplateID": 478, "loggerLevel": "warn", "logline": "\"Output directory: [\" + outputDir.getAbsolutePath() + \"]: does not exist, creating it.\""}
{"classname": "tools.CommonCrawlDataDumper", "TemplatePattern": "<P> : <P>", "TemplateID": 479, "loggerLevel": "error", "logline": "CommonCrawlDataDumper.class.getName() + \": \" + StringUtils.stringifyException(e)"}
{"classname": "tools.CommonCrawlDataDumper", "TemplatePattern": "Gzipping CBOR data has been skipped", "TemplateID": 480, "loggerLevel": "info", "logline": "\"Gzipping CBOR data has been skipped\""}
{"classname": "tools.CommonCrawlDataDumper", "TemplatePattern": "No segment directories found in [<P>]", "TemplateID": 481, "loggerLevel": "error", "logline": "\"No segment directories found in [\" + segmentRootDir.getAbsolutePath() + \"]\""}
{"classname": "tools.CommonCrawlDataDumper", "TemplatePattern": "Processing segment: [<P>]", "TemplateID": 482, "loggerLevel": "info", "logline": "\"Processing segment: [\" + segment.getAbsolutePath() + \"]\""}
{"classname": "tools.CommonCrawlDataDumper", "TemplatePattern": "Skipping segment: [<P>]: no data directory present", "TemplateID": 483, "loggerLevel": "warn", "logline": "\"Skipping segment: [\" + segmentContentPath\t+ \"]: no data directory present\""}
{"classname": "tools.CommonCrawlDataDumper", "TemplatePattern": "Skipping segment: [<P>]: no data directory present", "TemplateID": 484, "loggerLevel": "warn", "logline": "\"Skipping segment: [\" + segmentContentPath\t+ \"]: no data directory present\""}
{"classname": "tools.CommonCrawlDataDumper", "TemplatePattern": "<P> ", "TemplateID": 485, "loggerLevel": "warn", "logline": "pe.getMessage()"}
{"classname": "tools.CommonCrawlDataDumper", "TemplatePattern": "Fatal error in creating JSON data: <P>", "TemplateID": 486, "loggerLevel": "error", "logline": "\"Fatal error in creating JSON data: \" + ioe.getMessage()"}
{"classname": "tools.CommonCrawlDataDumper", "TemplatePattern": "Skipping writing: [<P>]: file already exists", "TemplateID": 487, "loggerLevel": "info", "logline": "\"Skipping writing: [\" + outputFullPath\t+ \"]: file already exists\""}
{"classname": "tools.CommonCrawlDataDumper", "TemplatePattern": "Writing: [<P>]", "TemplateID": 488, "loggerLevel": "info", "logline": "\"Writing: [\" + outputFullPath + \"]\""}
{"classname": "tools.CommonCrawlDataDumper", "TemplatePattern": "Skipping compressing: [<P>]: file already exists", "TemplateID": 489, "loggerLevel": "info", "logline": "\"Skipping compressing: [\" + outputFullPath + \"]: file already exists\""}
{"classname": "tools.CommonCrawlDataDumper", "TemplatePattern": "Compressing: [<P>]", "TemplateID": 490, "loggerLevel": "info", "logline": "\"Compressing: [\" + outputFullPath + \"]\""}
{"classname": "tools.CommonCrawlDataDumper", "TemplatePattern": "CommonsCrawlDataDumper File Stats: <P>", "TemplateID": 491, "loggerLevel": "info", "logline": "\"CommonsCrawlDataDumper File Stats: \" + DumpFileUtil.displayFileTypes(typeCounts, filteredCounts)"}
{"classname": "tools.CommonCrawlDataDumper", "TemplatePattern": "Error in closing stream: <P>", "TemplateID": 492, "loggerLevel": "warn", "logline": "\"Error in closing stream: \" + ioe.getMessage()"}
{"classname": "tools.CommonCrawlDataDumper", "TemplatePattern": "Creating a new gzip archive: <P>", "TemplateID": 493, "loggerLevel": "info", "logline": "\"Creating a new gzip archive: \" + archiveName"}
{"classname": "tools.CommonCrawlDataDumper", "TemplatePattern": "CBOR encoding failed: <P>", "TemplateID": 494, "loggerLevel": "warn", "logline": "\"CBOR encoding failed: \" + e.getMessage()"}
{"classname": "tools.CommonCrawlDataDumper", "TemplatePattern": "Failed to parse URL: {}<P>", "TemplateID": 495, "loggerLevel": "error", "logline": "\"Failed to parse URL: {}\", urlString"}
{"classname": "tools.FileDumper", "TemplatePattern": "Accepting all mimetypes.", "TemplateID": 496, "loggerLevel": "info", "logline": "\"Accepting all mimetypes.\""}
{"classname": "tools.FileDumper", "TemplatePattern": "No segment directories found in [<P>]", "TemplateID": 497, "loggerLevel": "none", "logline": "\"No segment directories found in [\"  + segmentRootDir.getAbsolutePath() + \"]\""}
{"classname": "tools.FileDumper", "TemplatePattern": "Processing segment: [<P>]", "TemplateID": 498, "loggerLevel": "info", "logline": "\"Processing segment: [\" + segment.getAbsolutePath() + \"]\""}
{"classname": "tools.FileDumper", "TemplatePattern": "Skipping segment: [<P>]: no data directory present", "TemplateID": 499, "loggerLevel": "warn", "logline": "\"Skipping segment: [\" + segmentPath  + \"]: no data directory present\""}
{"classname": "tools.FileDumper", "TemplatePattern": "Tika is unable to detect type for: [<P>]", "TemplateID": 500, "loggerLevel": "warn", "logline": "\"Tika is unable to detect type for: [\" + url + \"]\""}
{"classname": "tools.FileDumper", "TemplatePattern": "Writing: [<P>]", "TemplateID": 501, "loggerLevel": "info", "logline": "\"Writing: [\" + outputFullPath + \"]\""}
{"classname": "tools.FileDumper", "TemplatePattern": "Skipping writing: [<P>]: file already exists", "TemplateID": 502, "loggerLevel": "info", "logline": "\"Skipping writing: [\" + outputFullPath  + \"]: file already exists\""}
{"classname": "tools.FileDumper", "TemplatePattern": "Dumper File Stats: <P>", "TemplateID": 503, "loggerLevel": "info", "logline": "\"Dumper File Stats: \"  + DumpFileUtil.displayFileTypes(typeCounts, filteredCounts)"}
{"classname": "tools.FileDumper", "TemplatePattern": "Output directory: [<P>]: does not exist, creating it.", "TemplateID": 504, "loggerLevel": "warn", "logline": "\"Output directory: [\" + outputDir.getAbsolutePath()  + \"]: does not exist, creating it.\""}
{"classname": "tools.FileDumper", "TemplatePattern": "FileDumper: <P>", "TemplateID": 505, "loggerLevel": "error", "logline": "\"FileDumper: \" + StringUtils.stringifyException(e)"}
{"classname": "tools.FreeGenerator", "TemplatePattern": "Error adding url '<P>', skipping: <P>", "TemplateID": 506, "loggerLevel": "warn", "logline": "\"Error adding url '\" + value.toString() + \"', skipping: \"  + StringUtils.stringifyException(e)"}
{"classname": "tools.FreeGenerator", "TemplatePattern": "- skipping <P>", "TemplateID": 507, "loggerLevel": "debug", "logline": "\"- skipping \" + value.toString()"}
{"classname": "tools.FreeGenerator", "TemplatePattern": "\\t-filter\\trun current URLFilters on input URLs", "TemplateID": 508, "loggerLevel": "none", "logline": "\"\\t-filter\\trun current URLFilters on input URLs\""}
{"classname": "tools.FreeGenerator", "TemplatePattern": "Unknown argument: <P>, exiting ...", "TemplateID": 509, "loggerLevel": "error", "logline": "\"Unknown argument: \" + args[i] + \", exiting ...\""}
{"classname": "tools.FreeGenerator", "TemplatePattern": "FreeGenerator: starting at <P>", "TemplateID": 510, "loggerLevel": "info", "logline": "\"FreeGenerator: starting at \" + sdf.format(start)"}
{"classname": "tools.FreeGenerator", "TemplatePattern": "FAILED: <P>", "TemplateID": 511, "loggerLevel": "error", "logline": "\"FAILED: \" + StringUtils.stringifyException(e)"}
{"classname": "tools.FreeGenerator", "TemplatePattern": "FreeGenerator: finished at <P>, elapsed: <P>", "TemplateID": 512, "loggerLevel": "info", "logline": "\"FreeGenerator: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)"}
{"classname": "tools.DmozParser", "TemplatePattern": "<P> ", "TemplateID": 513, "loggerLevel": "none", "logline": "curURL"}
{"classname": "tools.DmozParser", "TemplatePattern": "Begin parse", "TemplateID": 514, "loggerLevel": "info", "logline": "\"Begin parse\""}
{"classname": "tools.DmozParser", "TemplatePattern": "Completed parse.  Found <P> pages.", "TemplateID": 515, "loggerLevel": "info", "logline": "\"Completed parse.  Found \" + pages + \" pages.\""}
{"classname": "tools.DmozParser", "TemplatePattern": "Error: <P>: <P>", "TemplateID": 516, "loggerLevel": "error", "logline": "\"Error: \" + spe.toString() + \": \" + spe.getMessage()"}
{"classname": "tools.DmozParser", "TemplatePattern": "Fatal err: <P>: <P>", "TemplateID": 517, "loggerLevel": "error", "logline": "\"Fatal err: \" + spe.toString() + \": \" + spe.getMessage()"}
{"classname": "tools.DmozParser", "TemplatePattern": "Last known line is <P>, column <P>", "TemplateID": 518, "loggerLevel": "error", "logline": "\"Last known line is \" + location.getLineNumber()  + \", column \" + location.getColumnNumber()"}
{"classname": "tools.DmozParser", "TemplatePattern": "Warning: <P>: <P>", "TemplateID": 519, "loggerLevel": "warn", "logline": "\"Warning: \" + spe.toString() + \": \" + spe.getMessage()"}
{"classname": "tools.DmozParser", "TemplatePattern": "skew = <P>", "TemplateID": 520, "loggerLevel": "info", "logline": "\"skew = \" + rp.hashSkew"}
{"classname": "tools.DmozParser", "TemplatePattern": "<P> ", "TemplateID": 521, "loggerLevel": "error", "logline": "e.toString()"}
{"classname": "tools.DmozParser", "TemplatePattern": "<P> ", "TemplateID": 522, "loggerLevel": "error", "logline": "e.toString()"}
{"classname": "tools.DmozParser", "TemplatePattern": "Topic selection pattern = <P>", "TemplateID": 523, "loggerLevel": "info", "logline": "\"Topic selection pattern = \" + regExp"}
{"classname": "util.PrefixStringMatcher", "TemplatePattern": "testing: <P>", "TemplateID": 524, "loggerLevel": "none", "logline": "\"testing: \" + tests[i]"}
{"classname": "util.PrefixStringMatcher", "TemplatePattern": "   matches: <P>", "TemplateID": 525, "loggerLevel": "none", "logline": "\"   matches: \" + matcher.matches(tests[i])"}
{"classname": "util.PrefixStringMatcher", "TemplatePattern": "  shortest: <P>", "TemplateID": 526, "loggerLevel": "none", "logline": "\"  shortest: \" + matcher.shortestMatch(tests[i])"}
{"classname": "util.PrefixStringMatcher", "TemplatePattern": "   longest: <P>", "TemplateID": 527, "loggerLevel": "none", "logline": "\"   longest: \" + matcher.longestMatch(tests[i])"}
{"classname": "util.CommandRunner", "TemplatePattern": "<P> ", "TemplateID": 528, "loggerLevel": "none", "logline": "usage"}
{"classname": "util.CommandRunner", "TemplatePattern": "<P> ", "TemplateID": 529, "loggerLevel": "none", "logline": "usage"}
{"classname": "util.CommandRunner", "TemplatePattern": "output value: <P>", "TemplateID": 530, "loggerLevel": "none", "logline": "\"output value: \" + cr.getExitValue()"}
{"classname": "util.DumpFileUtil", "TemplatePattern": "Failed to create dir: {}<P>", "TemplateID": 531, "loggerLevel": "error", "logline": "\"Failed to create dir: {}\", fullDirPath"}
{"classname": "util.DumpFileUtil", "TemplatePattern": "File name is too long. Truncated to {} characters.<P>", "TemplateID": 532, "loggerLevel": "info", "logline": "\"File name is too long. Truncated to {} characters.\", MAX_LENGTH_OF_FILENAME"}
{"classname": "util.DumpFileUtil", "TemplatePattern": "File extension is too long. Truncated to {} characters.<P>", "TemplateID": 533, "loggerLevel": "info", "logline": "\"File extension is too long. Truncated to {} characters.\", MAX_LENGTH_OF_EXTENSION"}
{"classname": "util.DumpFileUtil", "TemplatePattern": "Failed to create dir: {}<P>", "TemplateID": 534, "loggerLevel": "error", "logline": "\"Failed to create dir: {}\", fullDirPath"}
{"classname": "util.DumpFileUtil", "TemplatePattern": "File extension is too long. Truncated to {} characters.<P>", "TemplateID": 535, "loggerLevel": "info", "logline": "\"File extension is too long. Truncated to {} characters.\", MAX_LENGTH_OF_EXTENSION"}
{"classname": "util.URLUtil", "TemplatePattern": "Usage : URLUtil <url>", "TemplateID": 536, "loggerLevel": "none", "logline": "\"Usage : URLUtil <url>\""}
{"classname": "util.URLUtil", "TemplatePattern": "<P> ", "TemplateID": 537, "loggerLevel": "none", "logline": "URLUtil.getDomainName(new URL(url))"}
{"classname": "util.SuffixStringMatcher", "TemplatePattern": "testing: <P>", "TemplateID": 538, "loggerLevel": "none", "logline": "\"testing: \" + tests[i]"}
{"classname": "util.SuffixStringMatcher", "TemplatePattern": "   matches: <P>", "TemplateID": 539, "loggerLevel": "none", "logline": "\"   matches: \" + matcher.matches(tests[i])"}
{"classname": "util.SuffixStringMatcher", "TemplatePattern": "  shortest: <P>", "TemplateID": 540, "loggerLevel": "none", "logline": "\"  shortest: \" + matcher.shortestMatch(tests[i])"}
{"classname": "util.SuffixStringMatcher", "TemplatePattern": "   longest: <P>", "TemplateID": 541, "loggerLevel": "none", "logline": "\"   longest: \" + matcher.longestMatch(tests[i])"}
{"classname": "util.GZIPUtils", "TemplatePattern": "Error writing outStream: <P>", "TemplateID": 542, "loggerLevel": "error", "logline": "\"Error writing outStream: \", e"}
{"classname": "util.GZIPUtils", "TemplatePattern": "Error closing outStream: <P>", "TemplateID": 543, "loggerLevel": "error", "logline": "\"Error closing outStream: \", e"}
{"classname": "util.GZIPUtils", "TemplatePattern": "Error: <P>", "TemplateID": 544, "loggerLevel": "error", "logline": "\"Error: \", e"}
{"classname": "util.EncodingDetector", "TemplatePattern": "Exception from ICU4J (ignoring): <P>", "TemplateID": 545, "loggerLevel": "debug", "logline": "\"Exception from ICU4J (ignoring): \", e"}
{"classname": "util.EncodingDetector", "TemplatePattern": "<P> : charset <P>", "TemplateID": 546, "loggerLevel": "trace", "logline": "base + \": charset \" + clue"}
{"classname": "util.EncodingDetector", "TemplatePattern": "<P> : Choosing encoding: <P> with confidence <P>", "TemplateID": 547, "loggerLevel": "trace", "logline": "base + \": Choosing encoding: \" + charset  + \" with confidence \" + clue.confidence"}
{"classname": "util.EncodingDetector", "TemplatePattern": "<P> : Choosing encoding: <P>", "TemplateID": 548, "loggerLevel": "trace", "logline": "base + \": Choosing encoding: \" + bestClue"}
{"classname": "util.EncodingDetector", "TemplatePattern": "<P> ", "TemplateID": 549, "loggerLevel": "trace", "logline": "sb.toString()"}
{"classname": "util.EncodingDetector", "TemplatePattern": "Invalid encoding <P> detected, using default.", "TemplateID": 550, "loggerLevel": "warn", "logline": "\"Invalid encoding \" + encoding + \" detected, using default.\""}
{"classname": "util.EncodingDetector", "TemplatePattern": "Usage: EncodingDetector <file>", "TemplateID": 551, "loggerLevel": "none", "logline": "\"Usage: EncodingDetector <file>\""}
{"classname": "util.EncodingDetector", "TemplatePattern": "Guessed encoding: <P>", "TemplateID": 552, "loggerLevel": "none", "logline": "\"Guessed encoding: \" + encoding"}
{"classname": "util.MimeUtil", "TemplatePattern": ">><P>", "TemplateID": 553, "loggerLevel": "warn", "logline": "\">>\"+customMimeTypeFile"}
{"classname": "util.MimeUtil", "TemplatePattern": "<P> ", "TemplateID": 554, "loggerLevel": "warn", "logline": "customMimeTypeFile"}
{"classname": "util.MimeUtil", "TemplatePattern": "Can't load mime.types.file : <P> using Tika's default", "TemplateID": 555, "loggerLevel": "error", "logline": "\"Can't load mime.types.file : \" + customMimeTypeFile  + \" using Tika's default\""}
{"classname": "util.MimeUtil", "TemplatePattern": "Exception in MimeUtil <P>", "TemplateID": 556, "loggerLevel": "error", "logline": "\"Exception in MimeUtil \" + e.getMessage()"}
{"classname": "util.MimeUtil", "TemplatePattern": "<P> ", "TemplateID": 557, "loggerLevel": "error", "logline": "message, e"}
{"classname": "util.MimeUtil", "TemplatePattern": "Exception getting mime type by name: [<P>]: Message: <P>", "TemplateID": 558, "loggerLevel": "error", "logline": "\"Exception getting mime type by name: [\" + name  + \"]: Message: \" + e.getMessage()"}
{"classname": "util.MimeUtil", "TemplatePattern": "Exception getting mime type for file: [<P>]: Message: <P>", "TemplateID": 559, "loggerLevel": "error", "logline": "\"Exception getting mime type for file: [\" + f.getPath()  + \"]: Message: \" + e.getMessage()"}
{"classname": "util.ObjectCache", "TemplatePattern": "No object cache found for conf=<P>, instantiating a new object cache", "TemplateID": 560, "loggerLevel": "debug", "logline": "\"No object cache found for conf=\" + conf  + \", instantiating a new object cache\""}
{"classname": "util.DomUtil", "TemplatePattern": "Error: <P>", "TemplateID": 561, "loggerLevel": "error", "logline": "\"Error: \", e"}
{"classname": "util.DomUtil", "TemplatePattern": "Error: <P>", "TemplateID": 562, "loggerLevel": "error", "logline": "\"Error: \", e"}
{"classname": "util.DomUtil", "TemplatePattern": "Error: <P>", "TemplateID": 563, "loggerLevel": "error", "logline": "\"Error: \", e"}
{"classname": "util.DomUtil", "TemplatePattern": "Error: <P>", "TemplateID": 564, "loggerLevel": "error", "logline": "\"Error: \", e1"}
{"classname": "util.DomUtil", "TemplatePattern": "Error: <P>", "TemplateID": 565, "loggerLevel": "error", "logline": "\"Error: \", e1"}
{"classname": "util.DomUtil", "TemplatePattern": "Error: <P>", "TemplateID": 566, "loggerLevel": "error", "logline": "\"Error: \", e2"}
{"classname": "util.DomUtil", "TemplatePattern": "Error: <P>", "TemplateID": 567, "loggerLevel": "error", "logline": "\"Error: \", ex"}
{"classname": "util.StringUtil", "TemplatePattern": "Usage: StringUtil <encoding name>", "TemplateID": 568, "loggerLevel": "none", "logline": "\"Usage: StringUtil <encoding name>\""}
{"classname": "util.StringUtil", "TemplatePattern": "<P>  is resolved to <P>", "TemplateID": 569, "loggerLevel": "none", "logline": "args[0] + \" is resolved to \"  + EncodingDetector.resolveEncodingAlias(args[0])"}
{"classname": "domain.DomainStatistics", "TemplatePattern": "DomainStatistics: starting at <P>", "TemplateID": 570, "loggerLevel": "info", "logline": "\"DomainStatistics: starting at \" + sdf.format(start)"}
{"classname": "domain.DomainStatistics", "TemplatePattern": "DomainStatistics: finished at <P>, elapsed: <P>", "TemplateID": 571, "loggerLevel": "info", "logline": "\"DomainStatistics: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)"}
{"classname": "domain.DomainStatistics", "TemplatePattern": "url : <P>", "TemplateID": 572, "loggerLevel": "info", "logline": "\"url : \" + url"}
{"classname": "domain.DomainSuffixesReader", "TemplatePattern": "<P> ", "TemplateID": 573, "loggerLevel": "warn", "logline": "StringUtils.stringifyException(ex)"}
{"classname": "domain.DomainSuffixesReader", "TemplatePattern": "<P> ", "TemplateID": 574, "loggerLevel": "warn", "logline": "StringUtils.stringifyException(ex)"}
{"classname": "domain.DomainSuffixes", "TemplatePattern": "<P> ", "TemplateID": 575, "loggerLevel": "warn", "logline": "StringUtils.stringifyException(ex)"}
{"classname": "util.DeflateUtils", "TemplatePattern": "Caught Exception in inflateBestEffort<P>", "TemplateID": 576, "loggerLevel": "info", "logline": "\"Caught Exception in inflateBestEffort\", e"}
{"classname": "util.DeflateUtils", "TemplatePattern": "Error compressing: <P>", "TemplateID": 577, "loggerLevel": "error", "logline": "\"Error compressing: \", e"}
{"classname": "util.DeflateUtils", "TemplatePattern": "Error closing: <P>", "TemplateID": 578, "loggerLevel": "error", "logline": "\"Error closing: \", e"}
{"classname": "parse.ParseData", "TemplatePattern": "usage:<P>", "TemplateID": 579, "loggerLevel": "none", "logline": "\"usage:\" + usage"}
{"classname": "parse.ParseData", "TemplatePattern": "Reading from file: <P>", "TemplateID": 580, "loggerLevel": "none", "logline": "\"Reading from file: \" + file"}
{"classname": "parse.ParseData", "TemplatePattern": "Retrieved <P> from file <P>", "TemplateID": 581, "loggerLevel": "none", "logline": "\"Retrieved \" + recno + \" from file \" + file"}
{"classname": "parse.ParseData", "TemplatePattern": "<P> ", "TemplateID": 582, "loggerLevel": "none", "logline": "parseDatum"}
{"classname": "parse.ParseText", "TemplatePattern": "usage:<P>", "TemplateID": 583, "loggerLevel": "none", "logline": "\"usage:\" + usage"}
{"classname": "parse.ParseText", "TemplatePattern": "Retrieved <P> from file <P>", "TemplateID": 584, "loggerLevel": "none", "logline": "\"Retrieved \" + recno + \" from file \" + filename"}
{"classname": "parse.ParseText", "TemplatePattern": "<P> ", "TemplateID": 585, "loggerLevel": "none", "logline": "parseText"}
{"classname": "parse.ParseSegment", "TemplatePattern": "Skipping <P> as content is not fetched successfully", "TemplateID": 586, "loggerLevel": "debug", "logline": "\"Skipping \" + key + \" as content is not fetched successfully\""}
{"classname": "parse.ParseSegment", "TemplatePattern": "Error parsing: <P>: <P>", "TemplateID": 587, "loggerLevel": "warn", "logline": "\"Error parsing: \" + key + \": \"  + StringUtils.stringifyException(e)"}
{"classname": "parse.ParseSegment", "TemplatePattern": "Error parsing: <P>: <P>", "TemplateID": 588, "loggerLevel": "warn", "logline": "\"Error parsing: \" + key + \": \" + parseStatus"}
{"classname": "parse.ParseSegment", "TemplatePattern": "Error passing score: <P>: <P>", "TemplateID": 589, "loggerLevel": "warn", "logline": "\"Error passing score: \" + url + \": \" + e.getMessage()"}
{"classname": "parse.ParseSegment", "TemplatePattern": "Parsed (<P>ms):<P>", "TemplateID": 590, "loggerLevel": "info", "logline": "\"Parsed (\" + Long.toString(end - start) + \"ms):\" + url"}
{"classname": "parse.ParseSegment", "TemplatePattern": "Wrong contentlength format for <P>", "TemplateID": 591, "loggerLevel": "warn", "logline": "\"Wrong contentlength format for \" + url, e"}
{"classname": "parse.ParseSegment", "TemplatePattern": "<P>  skipped. Content of size <P> was truncated to <P>", "TemplateID": 592, "loggerLevel": "info", "logline": "url + \" skipped. Content of size \" + inHeaderSize  + \" was truncated to \" + actualSize"}
{"classname": "parse.ParseSegment", "TemplatePattern": "<P>  actualSize=<P> inHeaderSize=<P>", "TemplateID": 593, "loggerLevel": "debug", "logline": "url + \" actualSize=\" + actualSize + \" inHeaderSize=\"  + inHeaderSize"}
{"classname": "parse.ParseSegment", "TemplatePattern": "ParseSegment: starting at <P>", "TemplateID": 594, "loggerLevel": "info", "logline": "\"ParseSegment: starting at \" + sdf.format(start)"}
{"classname": "parse.ParseSegment", "TemplatePattern": "ParseSegment: segment: <P>", "TemplateID": 595, "loggerLevel": "info", "logline": "\"ParseSegment: segment: \" + segment"}
{"classname": "parse.ParseSegment", "TemplatePattern": "ParseSegment: finished at <P>, elapsed: <P>", "TemplateID": 596, "loggerLevel": "info", "logline": "\"ParseSegment: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)"}
{"classname": "parse.ParseSegment", "TemplatePattern": "<P> ", "TemplateID": 597, "loggerLevel": "none", "logline": "usage"}
{"classname": "parse.OutlinkExtractor", "TemplatePattern": "Time limit exceeded for getOutLinks", "TemplateID": 598, "loggerLevel": "warn", "logline": "\"Time limit exceeded for getOutLinks\""}
{"classname": "parse.OutlinkExtractor", "TemplatePattern": "Invalid url: '<P>', skipping.", "TemplateID": 599, "loggerLevel": "warn", "logline": "\"Invalid url: '\" + url + \"', skipping.\""}
{"classname": "parse.OutlinkExtractor", "TemplatePattern": "getOutlinks<P>", "TemplateID": 600, "loggerLevel": "error", "logline": "\"getOutlinks\", ex"}
{"classname": "parse.ParseResult", "TemplatePattern": "<P>  is not parsed successfully, filtering", "TemplateID": 601, "loggerLevel": "warn", "logline": "entry.getKey() + \" is not parsed successfully, filtering\""}
{"classname": "parse.ParserChecker", "TemplatePattern": "<P> ", "TemplateID": 602, "loggerLevel": "error", "logline": "usage"}
{"classname": "parse.ParserChecker", "TemplatePattern": "<P> ", "TemplateID": 603, "loggerLevel": "error", "logline": "usage"}
{"classname": "parse.ParserChecker", "TemplatePattern": "fetching: <P>", "TemplateID": 604, "loggerLevel": "info", "logline": "\"fetching: \" + url"}
{"classname": "parse.ParserChecker", "TemplatePattern": "Handling redirect to <P>", "TemplateID": 605, "loggerLevel": "info", "logline": "\"Handling redirect to \" + newURL"}
{"classname": "parse.ParserChecker", "TemplatePattern": "Fetch failed with protocol status: <P>", "TemplateID": 606, "loggerLevel": "none", "logline": "\"Fetch failed with protocol status: \"  + output.getStatus()"}
{"classname": "parse.ParserChecker", "TemplatePattern": "Redirect(s) not handled due to configuration.", "TemplateID": 607, "loggerLevel": "none", "logline": "\"Redirect(s) not handled due to configuration.\""}
{"classname": "parse.ParserChecker", "TemplatePattern": "Max Redirects to handle per config: <P>", "TemplateID": 608, "loggerLevel": "none", "logline": "\"Max Redirects to handle per config: \" + maxRedirects"}
{"classname": "parse.ParserChecker", "TemplatePattern": "Number of Redirects handled: <P>", "TemplateID": 609, "loggerLevel": "none", "logline": "\"Number of Redirects handled: \" + numRedirects"}
{"classname": "parse.ParserChecker", "TemplatePattern": "No content for <P>", "TemplateID": 610, "loggerLevel": "error", "logline": "\"No content for \" + url"}
{"classname": "parse.ParserChecker", "TemplatePattern": "Failed to determine content type!", "TemplateID": 611, "loggerLevel": "error", "logline": "\"Failed to determine content type!\""}
{"classname": "parse.ParserChecker", "TemplatePattern": "Content is truncated, parse may fail!", "TemplateID": 612, "loggerLevel": "warn", "logline": "\"Content is truncated, parse may fail!\""}
{"classname": "parse.ParserChecker", "TemplatePattern": "Couldn't pass score before parsing, url <P> (<P>)", "TemplateID": 613, "loggerLevel": "warn", "logline": "\"Couldn't pass score before parsing, url \" + turl + \" (\" + e  + \")\""}
{"classname": "parse.ParserChecker", "TemplatePattern": "<P> ", "TemplateID": 614, "loggerLevel": "warn", "logline": "StringUtils.stringifyException(e)"}
{"classname": "parse.ParserChecker", "TemplatePattern": "Parsing content failed!", "TemplateID": 615, "loggerLevel": "error", "logline": "\"Parsing content failed!\""}
{"classname": "parse.ParserChecker", "TemplatePattern": "parsing: <P>", "TemplateID": 616, "loggerLevel": "info", "logline": "\"parsing: \" + url"}
{"classname": "parse.ParserChecker", "TemplatePattern": "contentType: <P>", "TemplateID": 617, "loggerLevel": "info", "logline": "\"contentType: \" + contentType"}
{"classname": "parse.ParserChecker", "TemplatePattern": "signature: <P>", "TemplateID": 618, "loggerLevel": "info", "logline": "\"signature: \" + StringUtil.toHexString(signature)"}
{"classname": "parse.ParserChecker", "TemplatePattern": "Failed to get parse from parse result", "TemplateID": 619, "loggerLevel": "error", "logline": "\"Failed to get parse from parse result\""}
{"classname": "parse.ParserChecker", "TemplatePattern": "Available parses in parse result (by URL key):", "TemplateID": 620, "loggerLevel": "error", "logline": "\"Available parses in parse result (by URL key):\""}
{"classname": "parse.ParserChecker", "TemplatePattern": "  <P>", "TemplateID": 621, "loggerLevel": "error", "logline": "\"  \" + entry.getKey()"}
{"classname": "parse.ParserChecker", "TemplatePattern": "Parse result does not contain a parse for URL to be checked:", "TemplateID": 622, "loggerLevel": "error", "logline": "\"Parse result does not contain a parse for URL to be checked:\""}
{"classname": "parse.ParserChecker", "TemplatePattern": "  <P>", "TemplateID": 623, "loggerLevel": "error", "logline": "\"  \" + turl"}
{"classname": "parse.ParserChecker", "TemplatePattern": "Couldn't pass score after parsing, url <P> (<P>)", "TemplateID": 624, "loggerLevel": "warn", "logline": "\"Couldn't pass score after parsing, url \" + turl + \" (\" + e  + \")\""}
{"classname": "parse.ParserChecker", "TemplatePattern": "<P> ", "TemplateID": 625, "loggerLevel": "warn", "logline": "StringUtils.stringifyException(e)"}
{"classname": "parse.ParserChecker", "TemplatePattern": "---------\\nUrl\\n---------------\\n", "TemplateID": 626, "loggerLevel": "info", "logline": "\"---------\\nUrl\\n---------------\\n\""}
{"classname": "parse.ParserChecker", "TemplatePattern": "<P> ", "TemplateID": 627, "loggerLevel": "none", "logline": "entry.getKey()"}
{"classname": "parse.ParserChecker", "TemplatePattern": "\\n---------\\nParseData\\n---------\\n", "TemplateID": 628, "loggerLevel": "info", "logline": "\"\\n---------\\nParseData\\n---------\\n\""}
{"classname": "parse.ParserChecker", "TemplatePattern": "<P> ", "TemplateID": 629, "loggerLevel": "none", "logline": "parse.getData().toString()"}
{"classname": "parse.ParserChecker", "TemplatePattern": "---------\\nParseText\\n---------\\n", "TemplateID": 630, "loggerLevel": "info", "logline": "\"---------\\nParseText\\n---------\\n\""}
{"classname": "parse.ParserChecker", "TemplatePattern": "<P> ", "TemplateID": 631, "loggerLevel": "none", "logline": "parse.getText()"}
{"classname": "parse.ParseOutputFormat", "TemplatePattern": "Cannot filter init score for url <P>, using default: <P>", "TemplateID": 632, "loggerLevel": "warn", "logline": "\"Cannot filter init score for url \" + key  + \", using default: \" + e.getMessage()"}
{"classname": "parse.ParseOutputFormat", "TemplatePattern": "Cannot distribute score from <P>: <P>", "TemplateID": 633, "loggerLevel": "warn", "logline": "\"Cannot distribute score from \" + key + \": \"  + e.getMessage()"}
{"classname": "parse.ParseOutputFormat", "TemplatePattern": "Can't read fetch time for: <P>", "TemplateID": 634, "loggerLevel": "warn", "logline": "\"Can't read fetch time for: \" + key"}
{"classname": "parse.ParserFactory", "TemplatePattern": "ParserFactory:PluginRuntimeException when <P>initializing parser plugin <P> instance in getParsers <P>function: attempting to continue instantiating parsers", "TemplateID": 635, "loggerLevel": "warn", "logline": "\"ParserFactory:PluginRuntimeException when \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/parse/ParserFactory.java-              + \"initializing parser plugin \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/parse/ParserFactory.java-              + ext.getDescriptor().getPluginId() + \" instance in getParsers \"  + \"function: attempting to continue instantiating parsers\""}
{"classname": "parse.ParserFactory", "TemplatePattern": "Canno initialize parser <P> (cause: <P>", "TemplateID": 636, "loggerLevel": "warn", "logline": "\"Canno initialize parser \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/parse/ParserFactory.java-              + parserExt.getDescriptor().getPluginId() + \" (cause: \"  + e.toString()"}
{"classname": "parse.ParserFactory", "TemplatePattern": "ParserFactory:Plugin: <P> mapped to contentType <P> via parse-plugins.xml, but <P>its plugin.xml <P>file does not claim to support contentType: <P>", "TemplateID": 637, "loggerLevel": "warn", "logline": "\"ParserFactory:Plugin: \" + parsePluginId  /root/nutch-git-source/nutch/src/java/org/apache/nutch/parse/ParserFactory.java-                  + \" mapped to contentType \" + contentType  /root/nutch-git-source/nutch/src/java/org/apache/nutch/parse/ParserFactory.java-                  + \" via parse-plugins.xml, but \" + \"its plugin.xml \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/parse/ParserFactory.java-                  + \"file does not claim to support contentType: \"  + contentType"}
{"classname": "parse.ParserFactory", "TemplatePattern": "ParserFactory: Plugin: <P> mapped to contentType <P> via parse-plugins.xml, but not enabled via <P>plugin.includes in nutch-default.xml", "TemplateID": 638, "loggerLevel": "warn", "logline": "\"ParserFactory: Plugin: \" + parsePluginId  /root/nutch-git-source/nutch/src/java/org/apache/nutch/parse/ParserFactory.java-                  + \" mapped to contentType \" + contentType  /root/nutch-git-source/nutch/src/java/org/apache/nutch/parse/ParserFactory.java-                  + \" via parse-plugins.xml, but not enabled via \"  + \"plugin.includes in nutch-default.xml\""}
{"classname": "parse.ParserFactory", "TemplatePattern": "The parsing plugins: <P> are enabled via the plugin.includes system <P>property, and all claim to support the content type <P>, but they are not mapped to it  in the <P>parse-plugins.xml file", "TemplateID": 639, "loggerLevel": "info", "logline": "\"The parsing plugins: \" + extensionsIDs.toString()  /root/nutch-git-source/nutch/src/java/org/apache/nutch/parse/ParserFactory.java-              + \" are enabled via the plugin.includes system \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/parse/ParserFactory.java-              + \"property, and all claim to support the content type \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/parse/ParserFactory.java-              + contentType + \", but they are not mapped to it  in the \"  + \"parse-plugins.xml file\""}
{"classname": "parse.ParsePluginsReader", "TemplatePattern": "Unable to load parse plugins file from URL <P>[<P>]. Reason is [<P>]", "TemplateID": 640, "loggerLevel": "warn", "logline": "\"Unable to load parse plugins file from URL \" + \"[\"  + fParsePluginsFile + \"]. Reason is [\" + e + \"]\""}
{"classname": "parse.ParsePluginsReader", "TemplatePattern": "Unable to parse [<P>].<P>Reason is [<P>]", "TemplateID": 641, "loggerLevel": "warn", "logline": "\"Unable to parse [\" + fParsePluginsFile + \"].\" + \"Reason is [\"  + e + \"]\""}
{"classname": "parse.ParsePluginsReader", "TemplatePattern": "ParsePluginsReader:ERROR:no plugins defined for mime type: <P>, continuing parse", "TemplateID": 642, "loggerLevel": "warn", "logline": "\"ParsePluginsReader:ERROR:no plugins defined for mime type: \"  + mimeTypeStr + \", continuing parse\""}
{"classname": "parse.ParsePluginsReader", "TemplatePattern": "<P> ", "TemplateID": 643, "loggerLevel": "none", "logline": "usage"}
{"classname": "parse.ParsePluginsReader", "TemplatePattern": "MIMETYPE: <P>", "TemplateID": 644, "loggerLevel": "none", "logline": "\"MIMETYPE: \" + mimeType"}
{"classname": "parse.ParsePluginsReader", "TemplatePattern": "EXTENSION IDs:", "TemplateID": 645, "loggerLevel": "none", "logline": "\"EXTENSION IDs:\""}
{"classname": "parse.ParsePluginsReader", "TemplatePattern": "<P> ", "TemplateID": 646, "loggerLevel": "none", "logline": "j"}
{"classname": "parse.ParsePluginsReader", "TemplatePattern": "No aliases defined in parse-plugins.xml!", "TemplateID": 647, "loggerLevel": "warn", "logline": "\"No aliases defined in parse-plugins.xml!\""}
{"classname": "parse.ParsePluginsReader", "TemplatePattern": "There should only be one \\<P> tag in parse-plugins.xml", "TemplateID": 648, "loggerLevel": "warn", "logline": "\"There should only be one \\\"aliases\\\" tag in parse-plugins.xml\""}
{"classname": "parse.ParsePluginsReader", "TemplatePattern": "Found alias: plugin-id: <P>, extension-id: <P>", "TemplateID": 649, "loggerLevel": "trace", "logline": "\"Found alias: plugin-id: \" + parsePluginId  + \", extension-id: \" + extensionId"}
{"classname": "parse.ParseUtil", "TemplatePattern": "No suitable parser found when trying to parse content <P> of type <P>", "TemplateID": 650, "loggerLevel": "warn", "logline": "\"No suitable parser found when trying to parse content \"  + content.getUrl() + \" of type \" + content.getContentType()"}
{"classname": "parse.ParseUtil", "TemplatePattern": "Parsing [<P>] with [<P>]", "TemplateID": 651, "loggerLevel": "debug", "logline": "\"Parsing [\" + content.getUrl() + \"] with [\" + parsers[i]  + \"]\""}
{"classname": "parse.ParseUtil", "TemplatePattern": "Unable to successfully parse content <P> of type <P>", "TemplateID": 652, "loggerLevel": "warn", "logline": "\"Unable to successfully parse content \" + content.getUrl()  + \" of type \" + content.getContentType()"}
{"classname": "parse.ParseUtil", "TemplatePattern": "No suitable parser found when trying to parse content <P> of type <P>", "TemplateID": 653, "loggerLevel": "warn", "logline": "\"No suitable parser found when trying to parse content \"  + content.getUrl() + \" of type \" + content.getContentType()"}
{"classname": "parse.ParseUtil", "TemplatePattern": "Unable to successfully parse content <P> of type <P>", "TemplateID": 654, "loggerLevel": "warn", "logline": "\"Unable to successfully parse content \" + content.getUrl()  + \" of type \" + content.getContentType()"}
{"classname": "parse.ParseUtil", "TemplatePattern": "Error parsing <P> with <P>", "TemplateID": 655, "loggerLevel": "warn", "logline": "\"Error parsing \" + content.getUrl() + \" with \" + p, e"}
{"classname": "protocol.Content", "TemplatePattern": "usage:<P>", "TemplateID": 656, "loggerLevel": "none", "logline": "\"usage:\" + usage"}
{"classname": "protocol.Content", "TemplatePattern": "Reading from file: <P>", "TemplateID": 657, "loggerLevel": "none", "logline": "\"Reading from file: \" + file"}
{"classname": "protocol.Content", "TemplatePattern": "Retrieved <P> from file <P>", "TemplateID": 658, "loggerLevel": "none", "logline": "\"Retrieved \" + recno + \" from file \" + file"}
{"classname": "protocol.Content", "TemplatePattern": "<P> ", "TemplateID": 659, "loggerLevel": "none", "logline": "content"}
{"classname": "protocol.RobotRulesParser", "TemplatePattern": "\\tcomma as a delimiter without any spaces.", "TemplateID": 660, "loggerLevel": "none", "logline": "\"\\tcomma as a delimiter without any spaces.\""}
{"classname": "protocol.RobotRulesParser", "TemplatePattern": "<P>  <P>allowed<P>", "TemplateID": 661, "loggerLevel": "none", "logline": "(rules.isAllowed(testPath) ? \"allowed\"  : \"not allowed\") + \":\\t\" + testPath"}
{"classname": "protocol.RobotRulesParser", "TemplatePattern": "<P>  <P>not allowed<P>:\\t<P>", "TemplateID": 662, "loggerLevel": "none", "logline": "(rules.isAllowed(testPath) ? \"allowed\"  : \"not allowed\") + \":\\t\" + testPath"}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "CrawlDb statistics start: <P>", "TemplateID": 663, "loggerLevel": "info", "logline": "\"CrawlDb statistics start: \" + crawlDb"}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "Statistics for CrawlDb: <P>", "TemplateID": 664, "loggerLevel": "info", "logline": "\"Statistics for CrawlDb: \" + crawlDb"}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "TOTAL urls:\\t<P>", "TemplateID": 665, "loggerLevel": "info", "logline": "\"TOTAL urls:\\t\" + totalCnt.get()"}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "min score:\\t<P>", "TemplateID": 666, "loggerLevel": "info", "logline": "\"min score:\\t\" + (val.get() / 1000.0f)"}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "max score:\\t<P>", "TemplateID": 667, "loggerLevel": "info", "logline": "\"max score:\\t\" + (val.get() / 1000.0f)"}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "avg score:\\t<P>", "TemplateID": 668, "loggerLevel": "info", "logline": "\"avg score:\\t\"  + (float) ((((double) val.get()) / totalCnt.get()) / 1000.0)"}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "   <P> :\\t<P>", "TemplateID": 669, "loggerLevel": "info", "logline": "\"   \" + st[2] + \" :\\t\" + val"}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "<P>  <P> (<P>):\\t<P>", "TemplateID": 670, "loggerLevel": "info", "logline": "st[0] + \" \" + code + \" (\"  + CrawlDatum.getStatusName((byte) code) + \"):\\t\" + val"}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "<P> :\\t<P>", "TemplateID": 671, "loggerLevel": "info", "logline": "k + \":\\t\" + val"}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "CrawlDb statistics: done", "TemplateID": 672, "loggerLevel": "info", "logline": "\"CrawlDb statistics: done\""}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "URL: <P>", "TemplateID": 673, "loggerLevel": "none", "logline": "\"URL: \" + url"}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "<P> ", "TemplateID": 674, "loggerLevel": "none", "logline": "res"}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "not found", "TemplateID": 675, "loggerLevel": "none", "logline": "\"not found\""}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "CrawlDb dump: starting", "TemplateID": 676, "loggerLevel": "info", "logline": "\"CrawlDb dump: starting\""}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "CrawlDb db: <P>", "TemplateID": 677, "loggerLevel": "info", "logline": "\"CrawlDb db: \" + crawlDb"}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "CrawlDb dump: done", "TemplateID": 678, "loggerLevel": "info", "logline": "\"CrawlDb dump: done\""}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "CrawlDb topN: starting (topN=<P>, min=<P>)", "TemplateID": 679, "loggerLevel": "info", "logline": "\"CrawlDb topN: starting (topN=\" + topN + \", min=\" + min + \")\""}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "CrawlDb db: <P>", "TemplateID": 680, "loggerLevel": "info", "logline": "\"CrawlDb db: \" + crawlDb"}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "CrawlDb topN: collecting topN scores.", "TemplateID": 681, "loggerLevel": "info", "logline": "\"CrawlDb topN: collecting topN scores.\""}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "CrawlDb topN: done", "TemplateID": 682, "loggerLevel": "info", "logline": "\"CrawlDb topN: done\""}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "\\t\\t[-sort]\\tlist status sorted by host", "TemplateID": 683, "loggerLevel": "none", "logline": "\"\\t\\t[-sort]\\tlist status sorted by host\""}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "\\t\\t[-format csv]\\tdump in Csv format", "TemplateID": 684, "loggerLevel": "none", "logline": "\"\\t\\t[-format csv]\\tdump in Csv format\""}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "\\t\\t[-format crawldb]\\tdump as CrawlDB", "TemplateID": 685, "loggerLevel": "none", "logline": "\"\\t\\t[-format crawldb]\\tdump as CrawlDB\""}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "\\t\\t[-regex <expr>]\\tfilter records with expression", "TemplateID": 686, "loggerLevel": "none", "logline": "\"\\t\\t[-regex <expr>]\\tfilter records with expression\""}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "\\t\\t[-retry <num>]\\tminimum retry count", "TemplateID": 687, "loggerLevel": "none", "logline": "\"\\t\\t[-retry <num>]\\tminimum retry count\""}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "\\t\\t\\tThis can significantly improve performance.", "TemplateID": 688, "loggerLevel": "none", "logline": "\"\\t\\t\\tThis can significantly improve performance.\""}
{"classname": "crawl.CrawlDbReader", "TemplatePattern": "\\nError: wrong argument <P>", "TemplateID": 689, "loggerLevel": "none", "logline": "\"\\nError: wrong argument \" + args[i]"}
{"classname": "crawl.Injector", "TemplatePattern": "Skipping <P>:<P>", "TemplateID": 690, "loggerLevel": "warn", "logline": "\"Skipping \" + url + \":\" + e"}
{"classname": "crawl.Injector", "TemplatePattern": "Cannot filter injected score for url <P>, using default (<P>)", "TemplateID": 691, "loggerLevel": "warn", "logline": "\"Cannot filter injected score for url \" + url  + \", using default (\" + e.getMessage() + \")\""}
{"classname": "crawl.Injector", "TemplatePattern": "Injector: overwrite: <P>", "TemplateID": 692, "loggerLevel": "info", "logline": "\"Injector: overwrite: \" + overwrite"}
{"classname": "crawl.Injector", "TemplatePattern": "Injector: update: <P>", "TemplateID": 693, "loggerLevel": "info", "logline": "\"Injector: update: \" + update"}
{"classname": "crawl.Injector", "TemplatePattern": "Injector: starting at <P>", "TemplateID": 694, "loggerLevel": "info", "logline": "\"Injector: starting at \" + sdf.format(start)"}
{"classname": "crawl.Injector", "TemplatePattern": "Injector: crawlDb: <P>", "TemplateID": 695, "loggerLevel": "info", "logline": "\"Injector: crawlDb: \" + crawlDb"}
{"classname": "crawl.Injector", "TemplatePattern": "Injector: urlDir: <P>", "TemplateID": 696, "loggerLevel": "info", "logline": "\"Injector: urlDir: \" + urlDir"}
{"classname": "crawl.Injector", "TemplatePattern": "Injector: Converting injected urls to crawl db entries.", "TemplateID": 697, "loggerLevel": "info", "logline": "\"Injector: Converting injected urls to crawl db entries.\""}
{"classname": "crawl.Injector", "TemplatePattern": "Injector: Total number of urls rejected by filters: <P>", "TemplateID": 698, "loggerLevel": "info", "logline": "\"Injector: Total number of urls rejected by filters: \"  + urlsFiltered"}
{"classname": "crawl.Injector", "TemplatePattern": "Injector: Total number of urls after normalization: <P>", "TemplateID": 699, "loggerLevel": "info", "logline": "\"Injector: Total number of urls after normalization: \"  + urlsInjected"}
{"classname": "crawl.Injector", "TemplatePattern": "Injector: Merging injected urls into crawl db.", "TemplateID": 700, "loggerLevel": "info", "logline": "\"Injector: Merging injected urls into crawl db.\""}
{"classname": "crawl.Injector", "TemplatePattern": "Injector: URLs merged: <P>", "TemplateID": 701, "loggerLevel": "info", "logline": "\"Injector: URLs merged: \" + urlsMerged"}
{"classname": "crawl.Injector", "TemplatePattern": "Injector: Total new urls injected: <P>", "TemplateID": 702, "loggerLevel": "info", "logline": "\"Injector: Total new urls injected: \"  + (urlsInjected - urlsMerged)"}
{"classname": "crawl.Injector", "TemplatePattern": "Injector: finished at <P>, elapsed: <P>", "TemplateID": 703, "loggerLevel": "info", "logline": "\"Injector: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)"}
{"classname": "crawl.Injector", "TemplatePattern": "Usage: Injector <crawldb> <url_dir>", "TemplateID": 704, "loggerLevel": "none", "logline": "\"Usage: Injector <crawldb> <url_dir>\""}
{"classname": "crawl.Injector", "TemplatePattern": "Injector: <P>", "TemplateID": 705, "loggerLevel": "error", "logline": "\"Injector: \" + StringUtils.stringifyException(e)"}
{"classname": "crawl.CrawlDbFilter", "TemplatePattern": "Skipping <P>:<P>", "TemplateID": 706, "loggerLevel": "warn", "logline": "\"Skipping \" + url + \":\" + e"}
{"classname": "crawl.CrawlDbFilter", "TemplatePattern": "Skipping <P>:<P>", "TemplateID": 707, "loggerLevel": "warn", "logline": "\"Skipping \" + url + \":\" + e"}
{"classname": "crawl.AbstractFetchSchedule", "TemplatePattern": "defaultInterval=<P>", "TemplateID": 708, "loggerLevel": "info", "logline": "\"defaultInterval=\" + defaultInterval"}
{"classname": "crawl.AbstractFetchSchedule", "TemplatePattern": "maxInterval=<P>", "TemplateID": 709, "loggerLevel": "info", "logline": "\"maxInterval=\" + maxInterval"}
{"classname": "crawl.FetchScheduleFactory", "TemplatePattern": "Using FetchSchedule impl: <P>", "TemplateID": 710, "loggerLevel": "info", "logline": "\"Using FetchSchedule impl: \" + clazz"}
{"classname": "crawl.CrawlDbReducer", "TemplatePattern": "Unknown status, key: <P>, datum: <P>", "TemplateID": 711, "loggerLevel": "warn", "logline": "\"Unknown status, key: \" + key + \", datum: \" + datum"}
{"classname": "crawl.CrawlDbReducer", "TemplatePattern": "Missing fetch and old value, signature=<P>", "TemplateID": 712, "loggerLevel": "warn", "logline": "\"Missing fetch and old value, signature=\" + signature"}
{"classname": "crawl.CrawlDbReducer", "TemplatePattern": "Cannot filter init score for url <P>, using default: <P>", "TemplateID": 713, "loggerLevel": "warn", "logline": "\"Cannot filter init score for url \" + key  + \", using default: \" + e.getMessage()"}
{"classname": "crawl.CrawlDbReducer", "TemplatePattern": "Unexpected status: <P> resetting to old status.", "TemplateID": 714, "loggerLevel": "warn", "logline": "\"Unexpected status: \" + fetch.getStatus()  + \" resetting to old status.\""}
{"classname": "crawl.CrawlDbReducer", "TemplatePattern": "Lone CrawlDatum.STATUS_SIGNATURE: <P>", "TemplateID": 715, "loggerLevel": "warn", "logline": "\"Lone CrawlDatum.STATUS_SIGNATURE: \" + key"}
{"classname": "crawl.CrawlDbReducer", "TemplatePattern": "Couldn't update score, key=<P>: <P>", "TemplateID": 716, "loggerLevel": "warn", "logline": "\"Couldn't update score, key=\" + key + \": \" + e"}
{"classname": "crawl.Generator", "TemplatePattern": "Couldn't filter url: <P> (<P>)", "TemplateID": 717, "loggerLevel": "warn", "logline": "\"Couldn't filter url: \" + url + \" (\" + e.getMessage()  + \")\""}
{"classname": "crawl.Generator", "TemplatePattern": "-shouldFetch rejected '<P>', fetchTime=<P>, curTime=<P>", "TemplateID": 718, "loggerLevel": "debug", "logline": "\"-shouldFetch rejected '\" + url + \"', fetchTime=\"  + crawlDatum.getFetchTime() + \", curTime=\" + curTime"}
{"classname": "crawl.Generator", "TemplatePattern": "Couldn't filter generatorSortValue for <P>: <P>", "TemplateID": 719, "loggerLevel": "warn", "logline": "\"Couldn't filter generatorSortValue for \" + key + \": \" + sfe"}
{"classname": "crawl.Generator", "TemplatePattern": "Malformed URL: '<P>', skipping (<P>)", "TemplateID": 720, "loggerLevel": "warn", "logline": "\"Malformed URL: '\" + urlString + \"', skipping (\"  + StringUtils.stringifyException(e) + \")\""}
{"classname": "crawl.Generator", "TemplatePattern": "Generator: starting at <P>", "TemplateID": 721, "loggerLevel": "info", "logline": "\"Generator: starting at \" + sdf.format(start)"}
{"classname": "crawl.Generator", "TemplatePattern": "Generator: Selecting best-scoring urls due for fetch.", "TemplateID": 722, "loggerLevel": "info", "logline": "\"Generator: Selecting best-scoring urls due for fetch.\""}
{"classname": "crawl.Generator", "TemplatePattern": "Generator: filtering: <P>", "TemplateID": 723, "loggerLevel": "info", "logline": "\"Generator: filtering: \" + filter"}
{"classname": "crawl.Generator", "TemplatePattern": "Generator: normalizing: <P>", "TemplateID": 724, "loggerLevel": "info", "logline": "\"Generator: normalizing: \" + norm"}
{"classname": "crawl.Generator", "TemplatePattern": "Generator: topN: <P>", "TemplateID": 725, "loggerLevel": "info", "logline": "\"Generator: topN: \" + topN"}
{"classname": "crawl.Generator", "TemplatePattern": "Generator: jobtracker is 'local', generating exactly one partition.", "TemplateID": 726, "loggerLevel": "info", "logline": "\"Generator: jobtracker is 'local', generating exactly one partition.\""}
{"classname": "crawl.Generator", "TemplatePattern": "Generator: exception while partitioning segments, exiting ...", "TemplateID": 727, "loggerLevel": "warn", "logline": "\"Generator: exception while partitioning segments, exiting ...\""}
{"classname": "crawl.Generator", "TemplatePattern": "Generator: 0 records selected for fetching, exiting ...", "TemplateID": 728, "loggerLevel": "warn", "logline": "\"Generator: 0 records selected for fetching, exiting ...\""}
{"classname": "crawl.Generator", "TemplatePattern": "Generator: finished at <P>, elapsed: <P>", "TemplateID": 729, "loggerLevel": "info", "logline": "\"Generator: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)"}
{"classname": "crawl.Generator", "TemplatePattern": "Generator: Partitioning selected urls for politeness.", "TemplateID": 730, "loggerLevel": "info", "logline": "\"Generator: Partitioning selected urls for politeness.\""}
{"classname": "crawl.Generator", "TemplatePattern": "Generator: segment: <P>", "TemplateID": 731, "loggerLevel": "info", "logline": "\"Generator: segment: \" + segment"}
{"classname": "crawl.Generator", "TemplatePattern": "Generator: <P>", "TemplateID": 732, "loggerLevel": "error", "logline": "\"Generator: \" + StringUtils.stringifyException(e)"}
{"classname": "crawl.Generator", "TemplatePattern": "Generator: <P>", "TemplateID": 733, "loggerLevel": "error", "logline": "\"Generator: \" + StringUtils.stringifyException(e)"}
{"classname": "crawl.AdaptiveFetchSchedule", "TemplatePattern": "<P> ", "TemplateID": 734, "loggerLevel": "info", "logline": "p.toString()"}
{"classname": "crawl.AdaptiveFetchSchedule", "TemplatePattern": "<P> . <P>\\twill fetch at <P>\\tinterval <P> days<P>\\t missed <P>", "TemplateID": 735, "loggerLevel": "info", "logline": "i + \". \" + changed + \"\\twill fetch at \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/crawl/AdaptiveFetchSchedule.java-          + (p.getFetchTime() / delta) + \"\\tinterval \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/crawl/AdaptiveFetchSchedule.java-          + (p.getFetchInterval() / SECONDS_PER_DAY) + \" days\" + \"\\t missed \"  + miss"}
{"classname": "crawl.AdaptiveFetchSchedule", "TemplatePattern": "\\tfetched & adjusted: <P>\\twill fetch at <P>\\tinterval <P> days", "TemplateID": 736, "loggerLevel": "info", "logline": "\"\\tfetched & adjusted: \" + \"\\twill fetch at \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/crawl/AdaptiveFetchSchedule.java-            + (p.getFetchTime() / delta) + \"\\tinterval \"  + (p.getFetchInterval() / SECONDS_PER_DAY) + \" days\""}
{"classname": "crawl.AdaptiveFetchSchedule", "TemplatePattern": "Total missed: <P>, max miss: <P>", "TemplateID": 737, "loggerLevel": "info", "logline": "\"Total missed: \" + totalMiss + \", max miss: \" + maxMiss"}
{"classname": "crawl.AdaptiveFetchSchedule", "TemplatePattern": "Page changed <P> times, fetched <P> times.", "TemplateID": 738, "loggerLevel": "info", "logline": "\"Page changed \" + changeCnt + \" times, fetched \" + fetchCnt  + \" times.\""}
{"classname": "crawl.CrawlDbMerger", "TemplatePattern": "CrawlDb merge: starting at <P>", "TemplateID": 739, "loggerLevel": "info", "logline": "\"CrawlDb merge: starting at \" + sdf.format(start)"}
{"classname": "crawl.CrawlDbMerger", "TemplatePattern": "Adding <P>", "TemplateID": 740, "loggerLevel": "info", "logline": "\"Adding \" + dbs[i]"}
{"classname": "crawl.CrawlDbMerger", "TemplatePattern": "CrawlDb merge: finished at <P>, elapsed: <P>", "TemplateID": 741, "loggerLevel": "info", "logline": "\"CrawlDb merge: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)"}
{"classname": "crawl.CrawlDbMerger", "TemplatePattern": "\\toutput_crawldb\\toutput CrawlDb", "TemplateID": 742, "loggerLevel": "none", "logline": "\"\\toutput_crawldb\\toutput CrawlDb\""}
{"classname": "crawl.CrawlDbMerger", "TemplatePattern": "\\t-filter\\tuse URLFilters on urls in the crawldb(s)", "TemplateID": 743, "loggerLevel": "none", "logline": "\"\\t-filter\\tuse URLFilters on urls in the crawldb(s)\""}
{"classname": "crawl.CrawlDbMerger", "TemplatePattern": "CrawlDb merge: <P>", "TemplateID": 744, "loggerLevel": "error", "logline": "\"CrawlDb merge: \" + StringUtils.stringifyException(e)"}
{"classname": "crawl.TextProfileSignature", "TemplatePattern": "<P> \\t<P>", "TemplateID": 745, "loggerLevel": "none", "logline": "name + \"\\t\" + StringUtil.toHexString(signature)"}
{"classname": "crawl.LinkDb", "TemplatePattern": "Skipping <P>:<P>", "TemplateID": 746, "loggerLevel": "warn", "logline": "\"Skipping \" + fromUrl + \":\" + e"}
{"classname": "crawl.LinkDb", "TemplatePattern": "Skipping <P>:<P>", "TemplateID": 747, "loggerLevel": "warn", "logline": "\"Skipping \" + fromUrl + \":\" + e"}
{"classname": "crawl.LinkDb", "TemplatePattern": "Skipping <P>:<P>", "TemplateID": 748, "loggerLevel": "warn", "logline": "\"Skipping \" + toUrl + \":\" + e"}
{"classname": "crawl.LinkDb", "TemplatePattern": "Skipping <P>:<P>", "TemplateID": 749, "loggerLevel": "warn", "logline": "\"Skipping \" + toUrl + \":\" + e"}
{"classname": "crawl.LinkDb", "TemplatePattern": "LinkDb: starting at <P>", "TemplateID": 750, "loggerLevel": "info", "logline": "\"LinkDb: starting at \" + sdf.format(start)"}
{"classname": "crawl.LinkDb", "TemplatePattern": "LinkDb: linkdb: <P>", "TemplateID": 751, "loggerLevel": "info", "logline": "\"LinkDb: linkdb: \" + linkDb"}
{"classname": "crawl.LinkDb", "TemplatePattern": "LinkDb: URL normalize: <P>", "TemplateID": 752, "loggerLevel": "info", "logline": "\"LinkDb: URL normalize: \" + normalize"}
{"classname": "crawl.LinkDb", "TemplatePattern": "LinkDb: URL filter: <P>", "TemplateID": 753, "loggerLevel": "info", "logline": "\"LinkDb: URL filter: \" + filter"}
{"classname": "crawl.LinkDb", "TemplatePattern": "LinkDb: internal links will be ignored.", "TemplateID": 754, "loggerLevel": "info", "logline": "\"LinkDb: internal links will be ignored.\""}
{"classname": "crawl.LinkDb", "TemplatePattern": "LinkDb: external links will be ignored.", "TemplateID": 755, "loggerLevel": "info", "logline": "\"LinkDb: external links will be ignored.\""}
{"classname": "crawl.LinkDb", "TemplatePattern": "LinkDb: internal and external links are ignored! <P>Nothing to do, actually. Exiting.", "TemplateID": 756, "loggerLevel": "warn", "logline": "\"LinkDb: internal and external links are ignored! \"  + \"Nothing to do, actually. Exiting.\""}
{"classname": "crawl.LinkDb", "TemplatePattern": "LinkDb: adding segment: <P>", "TemplateID": 757, "loggerLevel": "info", "logline": "\"LinkDb: adding segment: \" + segments[i]"}
{"classname": "crawl.LinkDb", "TemplatePattern": "LinkDb: merging with existing linkdb: <P>", "TemplateID": 758, "loggerLevel": "info", "logline": "\"LinkDb: merging with existing linkdb: \" + linkDb"}
{"classname": "crawl.LinkDb", "TemplatePattern": "LinkDb: finished at <P>, elapsed: <P>", "TemplateID": 759, "loggerLevel": "info", "logline": "\"LinkDb: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)"}
{"classname": "crawl.LinkDb", "TemplatePattern": "LinkDb createJob: <P>", "TemplateID": 760, "loggerLevel": "warn", "logline": "\"LinkDb createJob: \" + e"}
{"classname": "crawl.LinkDb", "TemplatePattern": "\\tlinkdb\\toutput LinkDb to create or update", "TemplateID": 761, "loggerLevel": "none", "logline": "\"\\tlinkdb\\toutput LinkDb to create or update\""}
{"classname": "crawl.LinkDb", "TemplatePattern": "\\tseg1 seg2 ...\\t list of segment directories", "TemplateID": 762, "loggerLevel": "none", "logline": "\"\\tseg1 seg2 ...\\t list of segment directories\""}
{"classname": "crawl.LinkDb", "TemplatePattern": "\\t-noNormalize\\tdon't normalize link URLs", "TemplateID": 763, "loggerLevel": "none", "logline": "\"\\t-noNormalize\\tdon't normalize link URLs\""}
{"classname": "crawl.LinkDb", "TemplatePattern": "\\t-noFilter\\tdon't apply URLFilters to link URLs", "TemplateID": 764, "loggerLevel": "none", "logline": "\"\\t-noFilter\\tdon't apply URLFilters to link URLs\""}
{"classname": "crawl.LinkDb", "TemplatePattern": "LinkDb: <P>", "TemplateID": 765, "loggerLevel": "error", "logline": "\"LinkDb: \" + StringUtils.stringifyException(e)"}
{"classname": "crawl.LinkDb", "TemplatePattern": "LinkDb: <P>", "TemplateID": 766, "loggerLevel": "error", "logline": "\"LinkDb: \" + StringUtils.stringifyException(e)"}
{"classname": "crawl.URLPartitioner", "TemplatePattern": "Unknown partition mode : <P> - forcing to byHost", "TemplateID": 767, "loggerLevel": "error", "logline": "\"Unknown partition mode : \" + mode + \" - forcing to byHost\""}
{"classname": "crawl.URLPartitioner", "TemplatePattern": "Malformed URL: '<P>'", "TemplateID": 768, "loggerLevel": "warn", "logline": "\"Malformed URL: '\" + urlString + \"'\""}
{"classname": "crawl.URLPartitioner", "TemplatePattern": "Couldn't find IP for host: <P>", "TemplateID": 769, "loggerLevel": "info", "logline": "\"Couldn't find IP for host: \" + url.getHost()"}
{"classname": "crawl.SignatureFactory", "TemplatePattern": "Using Signature impl: <P>", "TemplateID": 770, "loggerLevel": "info", "logline": "\"Using Signature impl: \" + clazz"}
{"classname": "crawl.LinkDbMerger", "TemplatePattern": "LinkDb merge: starting at <P>", "TemplateID": 771, "loggerLevel": "info", "logline": "\"LinkDb merge: starting at \" + sdf.format(start)"}
{"classname": "crawl.LinkDbMerger", "TemplatePattern": "LinkDb merge: finished at <P>, elapsed: <P>", "TemplateID": 772, "loggerLevel": "info", "logline": "\"LinkDb merge: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)"}
{"classname": "crawl.LinkDbMerger", "TemplatePattern": "\\toutput_linkdb\\toutput LinkDb", "TemplateID": 773, "loggerLevel": "none", "logline": "\"\\toutput_linkdb\\toutput LinkDb\""}
{"classname": "crawl.LinkDbMerger", "TemplatePattern": "LinkDbMerger: <P>", "TemplateID": 774, "loggerLevel": "error", "logline": "\"LinkDbMerger: \" + StringUtils.stringifyException(e)"}
{"classname": "crawl.MapWritable", "TemplatePattern": "Unable to load internal map entry<P>", "TemplateID": 775, "loggerLevel": "warn", "logline": "\"Unable to load internal map entry\" + e.toString()"}
{"classname": "crawl.MapWritable", "TemplatePattern": "Unable to load meta data entry, ignoring.. : <P>", "TemplateID": 776, "loggerLevel": "warn", "logline": "\"Unable to load meta data entry, ignoring.. : \"  + e.toString()"}
{"classname": "crawl.MimeAdaptiveFetchSchedule", "TemplatePattern": "<P> ", "TemplateID": 777, "loggerLevel": "error", "logline": "org.apache.hadoop.util.StringUtils.stringifyException(e)"}
{"classname": "crawl.MimeAdaptiveFetchSchedule", "TemplatePattern": "Invalid configuration line in: <P>", "TemplateID": 778, "loggerLevel": "warn", "logline": "\"Invalid configuration line in: \" + line"}
{"classname": "crawl.MimeAdaptiveFetchSchedule", "TemplatePattern": "<P> ", "TemplateID": 779, "loggerLevel": "info", "logline": "p.toString()"}
{"classname": "crawl.MimeAdaptiveFetchSchedule", "TemplatePattern": "<P> . <P>\\twill fetch at <P>\\tinterval <P> days<P>\\t missed <P>", "TemplateID": 780, "loggerLevel": "info", "logline": "i + \". \" + changed + \"\\twill fetch at \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/crawl/MimeAdaptiveFetchSchedule.java-          + (p.getFetchTime() / delta) + \"\\tinterval \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/crawl/MimeAdaptiveFetchSchedule.java-          + (p.getFetchInterval() / SECONDS_PER_DAY) + \" days\" + \"\\t missed \"  + miss"}
{"classname": "crawl.MimeAdaptiveFetchSchedule", "TemplatePattern": "\\tfetched & adjusted: <P>\\twill fetch at <P>\\tinterval <P> days", "TemplateID": 781, "loggerLevel": "info", "logline": "\"\\tfetched & adjusted: \" + \"\\twill fetch at \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/crawl/MimeAdaptiveFetchSchedule.java-            + (p.getFetchTime() / delta) + \"\\tinterval \"  + (p.getFetchInterval() / SECONDS_PER_DAY) + \" days\""}
{"classname": "crawl.MimeAdaptiveFetchSchedule", "TemplatePattern": "Total missed: <P>, max miss: <P>", "TemplateID": 782, "loggerLevel": "info", "logline": "\"Total missed: \" + totalMiss + \", max miss: \" + maxMiss"}
{"classname": "crawl.MimeAdaptiveFetchSchedule", "TemplatePattern": "Page changed <P> times, fetched <P> times.", "TemplateID": 783, "loggerLevel": "info", "logline": "\"Page changed \" + changeCnt + \" times, fetched \" + fetchCnt  + \" times.\""}
{"classname": "crawl.LinkDbReader", "TemplatePattern": "LinkDb dump: starting at <P>", "TemplateID": 784, "loggerLevel": "info", "logline": "\"LinkDb dump: starting at \" + sdf.format(start)"}
{"classname": "crawl.LinkDbReader", "TemplatePattern": "LinkDb dump: db: <P>", "TemplateID": 785, "loggerLevel": "info", "logline": "\"LinkDb dump: db: \" + linkdb"}
{"classname": "crawl.LinkDbReader", "TemplatePattern": "LinkDb dump: finished at <P>, elapsed: <P>", "TemplateID": 786, "loggerLevel": "info", "logline": "\"LinkDb dump: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)"}
{"classname": "crawl.LinkDbReader", "TemplatePattern": " - no link information.", "TemplateID": 787, "loggerLevel": "none", "logline": "\" - no link information.\""}
{"classname": "crawl.LinkDbReader", "TemplatePattern": "<P> ", "TemplateID": 788, "loggerLevel": "none", "logline": "it.next().toString()"}
{"classname": "crawl.LinkDbReader", "TemplatePattern": "Error: wrong argument <P>", "TemplateID": 789, "loggerLevel": "none", "logline": "\"Error: wrong argument \" + args[1]"}
{"classname": "crawl.LinkDbReader", "TemplatePattern": "LinkDbReader: <P>", "TemplateID": 790, "loggerLevel": "error", "logline": "\"LinkDbReader: \" + StringUtils.stringifyException(e)"}
{"classname": "crawl.LinkDbFilter", "TemplatePattern": "Skipping <P>:<P>", "TemplateID": 791, "loggerLevel": "warn", "logline": "\"Skipping \" + url + \":\" + e"}
{"classname": "crawl.LinkDbFilter", "TemplatePattern": "Skipping <P>:<P>", "TemplateID": 792, "loggerLevel": "warn", "logline": "\"Skipping \" + url + \":\" + e"}
{"classname": "crawl.LinkDbFilter", "TemplatePattern": "Skipping <P>:<P>", "TemplateID": 793, "loggerLevel": "warn", "logline": "\"Skipping \" + fromUrl + \":\" + e"}
{"classname": "crawl.LinkDbFilter", "TemplatePattern": "Skipping <P>:<P>", "TemplateID": 794, "loggerLevel": "warn", "logline": "\"Skipping \" + fromUrl + \":\" + e"}
{"classname": "crawl.CrawlDb", "TemplatePattern": "CrawlDb update: starting at <P>", "TemplateID": 795, "loggerLevel": "info", "logline": "\"CrawlDb update: starting at \" + sdf.format(start)"}
{"classname": "crawl.CrawlDb", "TemplatePattern": "CrawlDb update: db: <P>", "TemplateID": 796, "loggerLevel": "info", "logline": "\"CrawlDb update: db: \" + crawlDb"}
{"classname": "crawl.CrawlDb", "TemplatePattern": "CrawlDb update: segments: <P>", "TemplateID": 797, "loggerLevel": "info", "logline": "\"CrawlDb update: segments: \" + Arrays.asList(segments)"}
{"classname": "crawl.CrawlDb", "TemplatePattern": "CrawlDb update: additions allowed: <P>", "TemplateID": 798, "loggerLevel": "info", "logline": "\"CrawlDb update: additions allowed: \" + additionsAllowed"}
{"classname": "crawl.CrawlDb", "TemplatePattern": "CrawlDb update: URL normalizing: <P>", "TemplateID": 799, "loggerLevel": "info", "logline": "\"CrawlDb update: URL normalizing: \" + normalize"}
{"classname": "crawl.CrawlDb", "TemplatePattern": "CrawlDb update: URL filtering: <P>", "TemplateID": 800, "loggerLevel": "info", "logline": "\"CrawlDb update: URL filtering: \" + filter"}
{"classname": "crawl.CrawlDb", "TemplatePattern": "CrawlDb update: 404 purging: <P>", "TemplateID": 801, "loggerLevel": "info", "logline": "\"CrawlDb update: 404 purging: \" + url404Purging"}
{"classname": "crawl.CrawlDb", "TemplatePattern": " - skipping invalid segment <P>", "TemplateID": 802, "loggerLevel": "info", "logline": "\" - skipping invalid segment \" + segments[i]"}
{"classname": "crawl.CrawlDb", "TemplatePattern": "CrawlDb update: Merging segment data into db.", "TemplateID": 803, "loggerLevel": "info", "logline": "\"CrawlDb update: Merging segment data into db.\""}
{"classname": "crawl.CrawlDb", "TemplatePattern": "CrawlDb update: finished at <P>, elapsed: <P>", "TemplateID": 804, "loggerLevel": "info", "logline": "\"CrawlDb update: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)"}
{"classname": "crawl.CrawlDb", "TemplatePattern": "\\tcrawldb\\tCrawlDb to update", "TemplateID": 805, "loggerLevel": "none", "logline": "\"\\tcrawldb\\tCrawlDb to update\""}
{"classname": "crawl.CrawlDb", "TemplatePattern": "CrawlDb update: <P>", "TemplateID": 806, "loggerLevel": "error", "logline": "\"CrawlDb update: \" + StringUtils.stringifyException(e)"}
{"classname": "crawl.CrawlDb", "TemplatePattern": "CrawlDb update: <P>", "TemplateID": 807, "loggerLevel": "error", "logline": "\"CrawlDb update: \" + StringUtils.stringifyException(e)"}
{"classname": "crawl.DeduplicationJob", "TemplatePattern": "Usage: DeduplicationJob <crawldb>", "TemplateID": 808, "loggerLevel": "none", "logline": "\"Usage: DeduplicationJob <crawldb>\""}
{"classname": "crawl.DeduplicationJob", "TemplatePattern": "DeduplicationJob: starting at <P>", "TemplateID": 809, "loggerLevel": "info", "logline": "\"DeduplicationJob: starting at \" + sdf.format(start)"}
{"classname": "crawl.DeduplicationJob", "TemplatePattern": "Deduplication: <P> documents marked as duplicates", "TemplateID": 810, "loggerLevel": "info", "logline": "\"Deduplication: \" + (int) dups  + \" documents marked as duplicates\""}
{"classname": "crawl.DeduplicationJob", "TemplatePattern": "DeduplicationJob: <P>", "TemplateID": 811, "loggerLevel": "error", "logline": "\"DeduplicationJob: \" + StringUtils.stringifyException(e)"}
{"classname": "crawl.DeduplicationJob", "TemplatePattern": "Deduplication: Updating status of duplicate urls into crawl db.", "TemplateID": 812, "loggerLevel": "info", "logline": "\"Deduplication: Updating status of duplicate urls into crawl db.\""}
{"classname": "crawl.DeduplicationJob", "TemplatePattern": "DeduplicationMergeJob: <P>", "TemplateID": 813, "loggerLevel": "error", "logline": "\"DeduplicationMergeJob: \" + StringUtils.stringifyException(e)"}
{"classname": "crawl.DeduplicationJob", "TemplatePattern": "Deduplication finished at <P>, elapsed: <P>", "TemplateID": 814, "loggerLevel": "info", "logline": "\"Deduplication finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)"}
{"classname": "fetcher.FetchItemQueue", "TemplatePattern": "<P> Cannot remove FetchItem from queue or cannot add it to inProgress queue<P>", "TemplateID": 815, "loggerLevel": "error", "logline": "  /root/nutch-git-source/nutch/src/java/org/apache/nutch/fetcher/FetchItemQueue.java-          \"Cannot remove FetchItem from queue or cannot add it to inProgress queue\",  e"}
{"classname": "fetcher.FetchItemQueue", "TemplatePattern": "  maxThreads    = <P>", "TemplateID": 816, "loggerLevel": "info", "logline": "\"  maxThreads    = \" + maxThreads"}
{"classname": "fetcher.FetchItemQueue", "TemplatePattern": "  inProgress    = <P>", "TemplateID": 817, "loggerLevel": "info", "logline": "\"  inProgress    = \" + inProgress.get()"}
{"classname": "fetcher.FetchItemQueue", "TemplatePattern": "  crawlDelay    = <P>", "TemplateID": 818, "loggerLevel": "info", "logline": "\"  crawlDelay    = \" + crawlDelay"}
{"classname": "fetcher.FetchItemQueue", "TemplatePattern": "  minCrawlDelay = <P>", "TemplateID": 819, "loggerLevel": "info", "logline": "\"  minCrawlDelay = \" + minCrawlDelay"}
{"classname": "fetcher.FetchItemQueue", "TemplatePattern": "  nextFetchTime = <P>", "TemplateID": 820, "loggerLevel": "info", "logline": "\"  nextFetchTime = \" + nextFetchTime.get()"}
{"classname": "fetcher.FetchItemQueue", "TemplatePattern": "  now           = <P>", "TemplateID": 821, "loggerLevel": "info", "logline": "\"  now           = \" + System.currentTimeMillis()"}
{"classname": "fetcher.FetchItemQueue", "TemplatePattern": "  <P>. <P>", "TemplateID": 822, "loggerLevel": "info", "logline": "\"  \" + i + \". \" + it.url"}
{"classname": "fetcher.FetchItemQueues", "TemplatePattern": "Unknown partition mode : <P> - forcing to byHost", "TemplateID": 823, "loggerLevel": "error", "logline": "\"Unknown partition mode : \" + queueMode  + \" - forcing to byHost\""}
{"classname": "fetcher.FetchItemQueues", "TemplatePattern": "Using queue mode : <P>", "TemplateID": 824, "loggerLevel": "info", "logline": "\"Using queue mode : \" + queueMode"}
{"classname": "fetcher.FetchItemQueues", "TemplatePattern": "Attempting to finish item from unknown queue: <P>", "TemplateID": 825, "loggerLevel": "warn", "logline": "\"Attempting to finish item from unknown queue: \" + it"}
{"classname": "fetcher.FetchItemQueues", "TemplatePattern": "* queue: <P> >> dropping! ", "TemplateID": 826, "loggerLevel": "info", "logline": "\"* queue: \" + id + \" >> dropping! \""}
{"classname": "fetcher.FetchItemQueues", "TemplatePattern": "* queue: <P> >> removed <P> URLs from queue because <P> exceptions occurred", "TemplateID": 827, "loggerLevel": "info", "logline": "\"* queue: \" + queueid + \" >> removed \" + deleted  + \" URLs from queue because \" + excCount + \" exceptions occurred\""}
{"classname": "fetcher.FetchItemQueues", "TemplatePattern": "* queue: <P>", "TemplateID": 828, "loggerLevel": "info", "logline": "\"* queue: \" + id"}
{"classname": "fetcher.OldFetcher", "TemplatePattern": "fetcher caught:<P>", "TemplateID": 829, "loggerLevel": "error", "logline": "\"fetcher caught:\" + e.toString()"}
{"classname": "fetcher.OldFetcher", "TemplatePattern": "fetching <P>", "TemplateID": 830, "loggerLevel": "info", "logline": "\"fetching \" + url"}
{"classname": "fetcher.OldFetcher", "TemplatePattern": "redirectCount=<P>", "TemplateID": 831, "loggerLevel": "debug", "logline": "\"redirectCount=\" + redirectCount"}
{"classname": "fetcher.OldFetcher", "TemplatePattern": "Unknown ProtocolStatus: <P>", "TemplateID": 832, "loggerLevel": "warn", "logline": "\"Unknown ProtocolStatus: \" + status.getCode()"}
{"classname": "fetcher.OldFetcher", "TemplatePattern": " - redirect count exceeded <P>", "TemplateID": 833, "loggerLevel": "info", "logline": "\" - redirect count exceeded \" + url"}
{"classname": "fetcher.OldFetcher", "TemplatePattern": "fetcher caught:<P>", "TemplateID": 834, "loggerLevel": "error", "logline": "\"fetcher caught:\" + e.toString()"}
{"classname": "fetcher.OldFetcher", "TemplatePattern": " - <P> redirect to <P> (fetching now)", "TemplateID": 835, "loggerLevel": "debug", "logline": "\" - \" + redirType + \" redirect to \" + url  + \" (fetching now)\""}
{"classname": "fetcher.OldFetcher", "TemplatePattern": " - <P> redirect to <P> (fetching later)", "TemplateID": 836, "loggerLevel": "debug", "logline": "\" - \" + redirType + \" redirect to \" + url  + \" (fetching later)\""}
{"classname": "fetcher.OldFetcher", "TemplatePattern": " - <P> redirect skipped: <P> <P>to same url<P>", "TemplateID": 837, "loggerLevel": "debug", "logline": "\" - \" + redirType + \" redirect skipped: \"  + (newUrl != null ? \"to same url\" : \"filtered\")"}
{"classname": "fetcher.OldFetcher", "TemplatePattern": " - <P> redirect skipped: <P> <P>filtered<P>", "TemplateID": 838, "loggerLevel": "debug", "logline": "\" - \" + redirType + \" redirect skipped: \"  + (newUrl != null ? \"to same url\" : \"filtered\")"}
{"classname": "fetcher.OldFetcher", "TemplatePattern": "fetch of <P> failed with: <P>", "TemplateID": 839, "loggerLevel": "info", "logline": "\"fetch of \" + url + \" failed with: \" + message"}
{"classname": "fetcher.OldFetcher", "TemplatePattern": "Couldn't pass score, url <P> (<P>)", "TemplateID": 840, "loggerLevel": "warn", "logline": "\"Couldn't pass score, url \" + key + \" (\" + e + \")\""}
{"classname": "fetcher.OldFetcher", "TemplatePattern": "Error parsing: <P>: <P>", "TemplateID": 841, "loggerLevel": "warn", "logline": "\"Error parsing: \" + key + \": \"  + StringUtils.stringifyException(e)"}
{"classname": "fetcher.OldFetcher", "TemplatePattern": "Error parsing: <P>: <P>", "TemplateID": 842, "loggerLevel": "warn", "logline": "\"Error parsing: \" + key + \": \" + parseStatus"}
{"classname": "fetcher.OldFetcher", "TemplatePattern": "Couldn't pass score, url <P> (<P>)", "TemplateID": 843, "loggerLevel": "warn", "logline": "\"Couldn't pass score, url \" + key + \" (\" + e + \")\""}
{"classname": "fetcher.OldFetcher", "TemplatePattern": "fetcher caught:<P>", "TemplateID": 844, "loggerLevel": "error", "logline": "\"fetcher caught:\" + e.toString()"}
{"classname": "fetcher.OldFetcher", "TemplatePattern": "OldFetcher: threads: <P>", "TemplateID": 845, "loggerLevel": "info", "logline": "\"OldFetcher: threads: \" + threadCount"}
{"classname": "fetcher.OldFetcher", "TemplatePattern": "Aborting with <P> hung threads.", "TemplateID": 846, "loggerLevel": "warn", "logline": "\"Aborting with \" + activeThreads + \" hung threads.\""}
{"classname": "fetcher.OldFetcher", "TemplatePattern": "OldFetcher: starting at <P>", "TemplateID": 847, "loggerLevel": "info", "logline": "\"OldFetcher: starting at \" + sdf.format(start)"}
{"classname": "fetcher.OldFetcher", "TemplatePattern": "OldFetcher: segment: <P>", "TemplateID": 848, "loggerLevel": "info", "logline": "\"OldFetcher: segment: \" + segment"}
{"classname": "fetcher.OldFetcher", "TemplatePattern": "OldFetcher: finished at <P>, elapsed: <P>", "TemplateID": 849, "loggerLevel": "info", "logline": "\"OldFetcher: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)"}
{"classname": "fetcher.OldFetcher", "TemplatePattern": "<P> ", "TemplateID": 850, "loggerLevel": "none", "logline": "usage"}
{"classname": "fetcher.OldFetcher", "TemplatePattern": "OldFetcher: <P>", "TemplateID": 851, "loggerLevel": "error", "logline": "\"OldFetcher: \" + StringUtils.stringifyException(e)"}
{"classname": "fetcher.FetcherThread", "TemplatePattern": "Unknown partition mode : <P> - forcing to byHost", "TemplateID": 852, "loggerLevel": "error", "logline": "\"Unknown partition mode : \" + queueMode  + \" - forcing to byHost\""}
{"classname": "fetcher.FetcherThread", "TemplatePattern": "Using queue mode : <P>", "TemplateID": 853, "loggerLevel": "info", "logline": "\"Using queue mode : \" + queueMode"}
{"classname": "fetcher.FetcherThread", "TemplatePattern": "<P>  set to halted", "TemplateID": 854, "loggerLevel": "debug", "logline": "getName() + \" set to halted\""}
{"classname": "fetcher.FetcherThread", "TemplatePattern": "<P>  spin-waiting ...", "TemplateID": 855, "loggerLevel": "debug", "logline": "getName() + \" spin-waiting ...\""}
{"classname": "fetcher.FetcherThread", "TemplatePattern": "Thread <P> has no more work available", "TemplateID": 856, "loggerLevel": "info", "logline": "\"Thread \" + getName() + \" has no more work available\""}
{"classname": "fetcher.FetcherThread", "TemplatePattern": "fetching <P> (queue crawl delay=<P>ms)", "TemplateID": 857, "loggerLevel": "info", "logline": "\"fetching \" + fit.url + \" (queue crawl delay=\"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/fetcher/FetcherThread.java-                  + ((FetchItemQueues) fetchQueues).getFetchItemQueue(fit.queueID).crawlDelay  + \"ms)\""}
{"classname": "fetcher.FetcherThread", "TemplatePattern": "redirectCount=<P>", "TemplateID": 858, "loggerLevel": "debug", "logline": "\"redirectCount=\" + redirectCount"}
{"classname": "fetcher.FetcherThread", "TemplatePattern": "Denied by robots.txt: <P>", "TemplateID": 859, "loggerLevel": "debug", "logline": "\"Denied by robots.txt: \" + fit.url"}
{"classname": "fetcher.FetcherThread", "TemplatePattern": "Crawl-Delay for <P> too long (<P>), skipping", "TemplateID": 860, "loggerLevel": "debug", "logline": "\"Crawl-Delay for \" + fit.url + \" too long (\"  + rules.getCrawlDelay() + \"), skipping\""}
{"classname": "fetcher.FetcherThread", "TemplatePattern": "Crawl delay for queue: <P> is set to <P> as per robots.txt. url: <P>", "TemplateID": 861, "loggerLevel": "info", "logline": "\"Crawl delay for queue: \" + fit.queueID  /root/nutch-git-source/nutch/src/java/org/apache/nutch/fetcher/FetcherThread.java-                      + \" is set to \" + fiq.crawlDelay  + \" as per robots.txt. url: \" + fit.url"}
{"classname": "fetcher.FetcherThread", "TemplatePattern": "Unknown ProtocolStatus: <P>", "TemplateID": 862, "loggerLevel": "warn", "logline": "\"Unknown ProtocolStatus: \" + status.getCode()"}
{"classname": "fetcher.FetcherThread", "TemplatePattern": " - redirect count exceeded <P>", "TemplateID": 863, "loggerLevel": "info", "logline": "\" - redirect count exceeded \" + fit.url"}
{"classname": "fetcher.FetcherThread", "TemplatePattern": "fetcher caught:<P>", "TemplateID": 864, "loggerLevel": "error", "logline": "\"fetcher caught:\" + e.toString()"}
{"classname": "fetcher.FetcherThread", "TemplatePattern": "-finishing thread <P>, activeThreads=<P>", "TemplateID": 865, "loggerLevel": "info", "logline": "\"-finishing thread \" + getName() + \", activeThreads=\"  + activeThreads"}
{"classname": "fetcher.FetcherThread", "TemplatePattern": " - ignoring redirect <P> from <P> to <P> because external links are ignored", "TemplateID": 866, "loggerLevel": "debug", "logline": "\" - ignoring redirect \" + redirType + \" from \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/fetcher/FetcherThread.java-                + urlString + \" to \" + newUrl  + \" because external links are ignored\""}
{"classname": "fetcher.FetcherThread", "TemplatePattern": " - <P> redirect to <P> (fetching now)", "TemplateID": 867, "loggerLevel": "debug", "logline": "\" - \" + redirType + \" redirect to \" + url  + \" (fetching now)\""}
{"classname": "fetcher.FetcherThread", "TemplatePattern": " - <P> redirect to <P> (fetching later)", "TemplateID": 868, "loggerLevel": "debug", "logline": "\" - \" + redirType + \" redirect to \" + url  + \" (fetching later)\""}
{"classname": "fetcher.FetcherThread", "TemplatePattern": " - <P> redirect skipped: <P> <P>to same url<P>", "TemplateID": 869, "loggerLevel": "debug", "logline": "\" - \" + redirType + \" redirect skipped: \"  + (newUrl != null ? \"to same url\" : \"filtered\")"}
{"classname": "fetcher.FetcherThread", "TemplatePattern": " - <P> redirect skipped: <P> <P>filtered<P>", "TemplateID": 870, "loggerLevel": "debug", "logline": "\" - \" + redirType + \" redirect skipped: \"  + (newUrl != null ? \"to same url\" : \"filtered\")"}
{"classname": "fetcher.FetcherThread", "TemplatePattern": "fetch of <P> failed with: <P>", "TemplateID": 871, "loggerLevel": "info", "logline": "\"fetch of \" + url + \" failed with: \" + message"}
{"classname": "fetcher.FetcherThread", "TemplatePattern": "Couldn't pass score, url <P> (<P>)", "TemplateID": 872, "loggerLevel": "warn", "logline": "\"Couldn't pass score, url \" + key + \" (\" + e + \")\""}
{"classname": "fetcher.FetcherThread", "TemplatePattern": "Error parsing: <P>: <P>", "TemplateID": 873, "loggerLevel": "warn", "logline": "\"Error parsing: \" + key + \": \"  + StringUtils.stringifyException(e)"}
{"classname": "fetcher.FetcherThread", "TemplatePattern": "Error parsing: <P>: <P>", "TemplateID": 874, "loggerLevel": "warn", "logline": "\"Error parsing: \" + key + \": \" + parseStatus"}
{"classname": "fetcher.FetcherThread", "TemplatePattern": "Couldn't pass score, url <P> (<P>)", "TemplateID": 875, "loggerLevel": "warn", "logline": "\"Couldn't pass score, url \" + key + \" (\" + e + \")\""}
{"classname": "fetcher.FetcherThread", "TemplatePattern": "fetcher caught:<P>", "TemplateID": 876, "loggerLevel": "error", "logline": "\"fetcher caught:\" + e.toString()"}
{"classname": "fetcher.Fetcher", "TemplatePattern": "Fetcher: threads: <P>", "TemplateID": 877, "loggerLevel": "info", "logline": "\"Fetcher: threads: \" + threadCount"}
{"classname": "fetcher.Fetcher", "TemplatePattern": "Fetcher: time-out divisor: <P>", "TemplateID": 878, "loggerLevel": "info", "logline": "\"Fetcher: time-out divisor: \" + timeoutDivisor"}
{"classname": "fetcher.Fetcher", "TemplatePattern": "Fetcher: throughput threshold: <P>", "TemplateID": 879, "loggerLevel": "info", "logline": "\"Fetcher: throughput threshold: \" + throughputThresholdPages"}
{"classname": "fetcher.Fetcher", "TemplatePattern": "Fetcher: throughput threshold retries: <P>", "TemplateID": 880, "loggerLevel": "info", "logline": "\"Fetcher: throughput threshold retries: \"  + throughputThresholdMaxRetries"}
{"classname": "fetcher.Fetcher", "TemplatePattern": "fetcher.maxNum.threads can't be < than <P> : using <P> instead", "TemplateID": 881, "loggerLevel": "info", "logline": "\"fetcher.maxNum.threads can't be < than \" + threadCount  + \" : using \" + threadCount + \" instead\""}
{"classname": "fetcher.Fetcher", "TemplatePattern": "fetcher.bandwidth.target.check.everyNSecs can't be < to 1 : using 1 instead", "TemplateID": 882, "loggerLevel": "info", "logline": "\"fetcher.bandwidth.target.check.everyNSecs can't be < to 1 : using 1 instead\""}
{"classname": "fetcher.Fetcher", "TemplatePattern": "-activeThreads=<P>, spinWaiting=<P>, fetchQueues.totalSize=<P>, fetchQueues.getQueueCount=<P>", "TemplateID": 883, "loggerLevel": "info", "logline": "\"-activeThreads=\" + activeThreads + \", spinWaiting=\"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/fetcher/Fetcher.java-          + spinWaiting.get() + \", fetchQueues.totalSize=\"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/fetcher/Fetcher.java-          + fetchQueues.getTotalSize() + \", fetchQueues.getQueueCount=\"  + fetchQueues.getQueueCount()"}
{"classname": "fetcher.Fetcher", "TemplatePattern": "<P> : dropping below configured threshold of <P> pages per second", "TemplateID": 884, "loggerLevel": "warn", "logline": "Integer.toString(throughputThresholdNumRetries)  /root/nutch-git-source/nutch/src/java/org/apache/nutch/fetcher/Fetcher.java-              + \": dropping below configured threshold of \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/fetcher/Fetcher.java-              + Integer.toString(throughputThresholdPages)  + \" pages per second\""}
{"classname": "fetcher.Fetcher", "TemplatePattern": "Dropped below threshold too many times, killing!", "TemplateID": 885, "loggerLevel": "warn", "logline": "\"Dropped below threshold too many times, killing!\""}
{"classname": "fetcher.Fetcher", "TemplatePattern": "averageBdwPerThread : <P> kbps", "TemplateID": 886, "loggerLevel": "info", "logline": "\"averageBdwPerThread : \" + (averageBdwPerThread / 1000)  + \" kbps\""}
{"classname": "fetcher.Fetcher", "TemplatePattern": "Has space for more threads (<P> vs <P> kbps) \\t=> adding <P> new threads", "TemplateID": 887, "loggerLevel": "info", "logline": "\"Has space for more threads (\"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/fetcher/Fetcher.java-                  + (bpsSinceLastCheck / 1000) + \" vs \"  /root/nutch-git-source/nutch/src/java/org/apache/nutch/fetcher/Fetcher.java-                  + (targetBandwidth / 1000) + \" kbps) \\t=> adding \"  + additionalThreads + \" new threads\""}
{"classname": "fetcher.Fetcher", "TemplatePattern": "Exceeding target bandwidth (<P> vs <P> kbps). \\t=> excessThreads = <P>", "TemplateID": 888, "loggerLevel": "info", "logline": "\"Exceeding target bandwidth (\" + bpsSinceLastCheck / 1000  /root/nutch-git-source/nutch/src/java/org/apache/nutch/fetcher/Fetcher.java-                + \" vs \" + (targetBandwidth / 1000)  + \" kbps). \\t=> excessThreads = \" + excessThreads"}
{"classname": "fetcher.Fetcher", "TemplatePattern": "Aborting with <P> hung threads.", "TemplateID": 889, "loggerLevel": "warn", "logline": "\"Aborting with \" + activeThreads + \" hung threads.\""}
{"classname": "fetcher.Fetcher", "TemplatePattern": "Thread #<P> hung while processing <P>", "TemplateID": 890, "loggerLevel": "warn", "logline": "\"Thread #\" + i + \" hung while processing \"  + thread.getReprUrl()"}
{"classname": "fetcher.Fetcher", "TemplatePattern": "<P> ", "TemplateID": 891, "loggerLevel": "debug", "logline": "sb.toString()"}
{"classname": "fetcher.Fetcher", "TemplatePattern": "-activeThreads=<P>", "TemplateID": 892, "loggerLevel": "info", "logline": "\"-activeThreads=\" + activeThreads"}
{"classname": "fetcher.Fetcher", "TemplatePattern": "Fetcher: starting at <P>", "TemplateID": 893, "loggerLevel": "info", "logline": "\"Fetcher: starting at \" + sdf.format(start)"}
{"classname": "fetcher.Fetcher", "TemplatePattern": "Fetcher: segment: <P>", "TemplateID": 894, "loggerLevel": "info", "logline": "\"Fetcher: segment: \" + segment"}
{"classname": "fetcher.Fetcher", "TemplatePattern": "Fetcher Timelimit set for : <P>", "TemplateID": 895, "loggerLevel": "info", "logline": "\"Fetcher Timelimit set for : \" + timelimit"}
{"classname": "fetcher.Fetcher", "TemplatePattern": "Fetcher: following outlinks up to depth: <P>", "TemplateID": 896, "loggerLevel": "info", "logline": "\"Fetcher: following outlinks up to depth: \"  + Integer.toString(maxOutlinkDepth)"}
{"classname": "fetcher.Fetcher", "TemplatePattern": "Fetcher: maximum outlinks to follow: <P>", "TemplateID": 897, "loggerLevel": "info", "logline": "\"Fetcher: maximum outlinks to follow: \"  + Integer.toString(totalOutlinksToFollow)"}
{"classname": "fetcher.Fetcher", "TemplatePattern": "Fetcher: finished at <P>, elapsed: <P>", "TemplateID": 898, "loggerLevel": "info", "logline": "\"Fetcher: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)"}
{"classname": "fetcher.Fetcher", "TemplatePattern": "<P> ", "TemplateID": 899, "loggerLevel": "none", "logline": "usage"}
{"classname": "fetcher.Fetcher", "TemplatePattern": "Fetcher: <P>", "TemplateID": 900, "loggerLevel": "error", "logline": "\"Fetcher: \" + StringUtils.stringifyException(e)"}
{"classname": "fetcher.Fetcher", "TemplatePattern": "<P> ", "TemplateID": 901, "loggerLevel": "error", "logline": "message"}
{"classname": "fetcher.Fetcher", "TemplatePattern": "Fetcher: <P>", "TemplateID": 902, "loggerLevel": "error", "logline": "\"Fetcher: \" + StringUtils.stringifyException(e)"}
{"classname": "fetcher.FetchItem", "TemplatePattern": "Cannot parse url: <P>", "TemplateID": 903, "loggerLevel": "warn", "logline": "\"Cannot parse url: \" + url, e"}
{"classname": "fetcher.FetchItem", "TemplatePattern": "Unable to resolve: <P>, skipping.", "TemplateID": 904, "loggerLevel": "warn", "logline": "\"Unable to resolve: \" + u.getHost() + \", skipping.\""}
{"classname": "fetcher.FetchItem", "TemplatePattern": "Unknown domain for url: <P>, using URL string as key", "TemplateID": 905, "loggerLevel": "warn", "logline": "\"Unknown domain for url: \" + url  + \", using URL string as key\""}
{"classname": "fetcher.FetchItem", "TemplatePattern": "Unknown host for url: <P>, using URL string as key", "TemplateID": 906, "loggerLevel": "warn", "logline": "\"Unknown host for url: \" + url + \", using URL string as key\""}
{"classname": "fetcher.QueueFeeder", "TemplatePattern": "QueueFeeder error reading input, record <P>", "TemplateID": 907, "loggerLevel": "error", "logline": "\"QueueFeeder error reading input, record \" + cnt, e"}
{"classname": "fetcher.QueueFeeder", "TemplatePattern": "-feeding <P> input urls ...", "TemplateID": 908, "loggerLevel": "debug", "logline": "\"-feeding \" + feed + \" input urls ...\""}
{"classname": "fetcher.QueueFeeder", "TemplatePattern": "QueueFeeder error reading input, record <P>", "TemplateID": 909, "loggerLevel": "error", "logline": "\"QueueFeeder error reading input, record \" + cnt, e"}
{"classname": "fetcher.QueueFeeder", "TemplatePattern": "QueueFeeder finished: total <P> records + hit by time limit :<P>", "TemplateID": 910, "loggerLevel": "info", "logline": "\"QueueFeeder finished: total \" + cnt  + \" records + hit by time limit :\" + timelimitcount"}
{"classname": "indexer.IndexingFiltersChecker", "TemplatePattern": "<P> ", "TemplateID": 911, "loggerLevel": "none", "logline": "usage"}
{"classname": "indexer.IndexingFiltersChecker", "TemplatePattern": "<P> ", "TemplateID": 912, "loggerLevel": "none", "logline": "usage"}
{"classname": "indexer.IndexingFiltersChecker", "TemplatePattern": "fetching: <P>", "TemplateID": 913, "loggerLevel": "info", "logline": "\"fetching: \" + url"}
{"classname": "indexer.IndexingFiltersChecker", "TemplatePattern": "Fetch failed with protocol status: <P>", "TemplateID": 914, "loggerLevel": "none", "logline": "\"Fetch failed with protocol status: \"  + output.getStatus()"}
{"classname": "indexer.IndexingFiltersChecker", "TemplatePattern": "No content for <P>", "TemplateID": 915, "loggerLevel": "none", "logline": "\"No content for \" + url"}
{"classname": "indexer.IndexingFiltersChecker", "TemplatePattern": "Content is truncated, parse may fail!", "TemplateID": 916, "loggerLevel": "warn", "logline": "\"Content is truncated, parse may fail!\""}
{"classname": "indexer.IndexingFiltersChecker", "TemplatePattern": "parsing: <P>", "TemplateID": 917, "loggerLevel": "info", "logline": "\"parsing: \" + url"}
{"classname": "indexer.IndexingFiltersChecker", "TemplatePattern": "contentType: <P>", "TemplateID": 918, "loggerLevel": "info", "logline": "\"contentType: \" + contentType"}
{"classname": "indexer.IndexingFiltersChecker", "TemplatePattern": "Failed to get parse from parse result", "TemplateID": 919, "loggerLevel": "error", "logline": "\"Failed to get parse from parse result\""}
{"classname": "indexer.IndexingFiltersChecker", "TemplatePattern": "Available parses in parse result (by URL key):", "TemplateID": 920, "loggerLevel": "error", "logline": "\"Available parses in parse result (by URL key):\""}
{"classname": "indexer.IndexingFiltersChecker", "TemplatePattern": "  <P>", "TemplateID": 921, "loggerLevel": "error", "logline": "\"  \" + entry.getKey()"}
{"classname": "indexer.IndexingFiltersChecker", "TemplatePattern": "Parse result does not contain a parse for URL to be checked:", "TemplateID": 922, "loggerLevel": "error", "logline": "\"Parse result does not contain a parse for URL to be checked:\""}
{"classname": "indexer.IndexingFiltersChecker", "TemplatePattern": "  <P>", "TemplateID": 923, "loggerLevel": "error", "logline": "\"  \" + urlText"}
{"classname": "indexer.IndexingFiltersChecker", "TemplatePattern": "Document discarded by indexing filter", "TemplateID": 924, "loggerLevel": "none", "logline": "\"Document discarded by indexing filter\""}
{"classname": "indexer.IndexingFiltersChecker", "TemplatePattern": "<P>  :\\t<P>", "TemplateID": 925, "loggerLevel": "none", "logline": "fname + \" :\\t\" + str.substring(0, minText)"}
{"classname": "indexer.CleaningJob", "TemplatePattern": "CleaningJob: deleted a total of <P> documents", "TemplateID": 926, "loggerLevel": "info", "logline": "\"CleaningJob: deleted a total of \" + totalDeleted + \" documents\""}
{"classname": "indexer.CleaningJob", "TemplatePattern": "CleaningJob: starting at <P>", "TemplateID": 927, "loggerLevel": "info", "logline": "\"CleaningJob: starting at \" + sdf.format(start)"}
{"classname": "indexer.CleaningJob", "TemplatePattern": "CleaningJob: finished at <P>, elapsed: <P>", "TemplateID": 928, "loggerLevel": "info", "logline": "\"CleaningJob: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)"}
{"classname": "indexer.CleaningJob", "TemplatePattern": "Missing crawldb. <P>", "TemplateID": 929, "loggerLevel": "error", "logline": "\"Missing crawldb. \" + usage"}
{"classname": "indexer.CleaningJob", "TemplatePattern": "<P> ", "TemplateID": 930, "loggerLevel": "none", "logline": "usage"}
{"classname": "indexer.CleaningJob", "TemplatePattern": "<P> ", "TemplateID": 931, "loggerLevel": "none", "logline": "writers.describe()"}
{"classname": "indexer.CleaningJob", "TemplatePattern": "CleaningJob: <P>", "TemplateID": 932, "loggerLevel": "error", "logline": "\"CleaningJob: \" + StringUtils.stringifyException(e)"}
{"classname": "indexer.CleaningJob", "TemplatePattern": "ERROR CleaningJob: <P>", "TemplateID": 933, "loggerLevel": "none", "logline": "\"ERROR CleaningJob: \"  + StringUtils.stringifyException(e)"}
{"classname": "indexer.IndexWriters", "TemplatePattern": "Adding <P>", "TemplateID": 934, "loggerLevel": "info", "logline": "\"Adding \" + writer.getClass().getName()"}
{"classname": "indexer.IndexerMapReduce", "TemplatePattern": "Skipping <P>:<P>", "TemplateID": 935, "loggerLevel": "warn", "logline": "\"Skipping \" + url + \":\" + e"}
{"classname": "indexer.IndexerMapReduce", "TemplatePattern": "Unrecognized type: <P>", "TemplateID": 936, "loggerLevel": "warn", "logline": "\"Unrecognized type: \" + value.getClass()"}
{"classname": "indexer.IndexerMapReduce", "TemplatePattern": "Error indexing <P>: <P>", "TemplateID": 937, "loggerLevel": "warn", "logline": "\"Error indexing \" + key + \": \" + e"}
{"classname": "indexer.IndexerMapReduce", "TemplatePattern": "Error calculating score <P>: <P>", "TemplateID": 938, "loggerLevel": "warn", "logline": "\"Error calculating score \" + key + \": \" + e"}
{"classname": "indexer.IndexerMapReduce", "TemplatePattern": "IndexerMapReduce: crawldb: <P>", "TemplateID": 939, "loggerLevel": "info", "logline": "\"IndexerMapReduce: crawldb: \" + crawlDb"}
{"classname": "indexer.IndexerMapReduce", "TemplatePattern": "IndexerMapReduce: linkdb: <P>", "TemplateID": 940, "loggerLevel": "info", "logline": "\"IndexerMapReduce: linkdb: \" + linkDb"}
{"classname": "indexer.IndexerMapReduce", "TemplatePattern": "IndexerMapReduces: adding segment: <P>", "TemplateID": 941, "loggerLevel": "info", "logline": "\"IndexerMapReduces: adding segment: \" + segment"}
{"classname": "indexer.IndexingJob", "TemplatePattern": "Indexer: starting at <P>", "TemplateID": 942, "loggerLevel": "info", "logline": "\"Indexer: starting at \" + sdf.format(start)"}
{"classname": "indexer.IndexingJob", "TemplatePattern": "Indexer: deleting gone documents: <P>", "TemplateID": 943, "loggerLevel": "info", "logline": "\"Indexer: deleting gone documents: \" + deleteGone"}
{"classname": "indexer.IndexingJob", "TemplatePattern": "Indexer: URL filtering: <P>", "TemplateID": 944, "loggerLevel": "info", "logline": "\"Indexer: URL filtering: \" + filter"}
{"classname": "indexer.IndexingJob", "TemplatePattern": "Indexer: URL normalizing: <P>", "TemplateID": 945, "loggerLevel": "info", "logline": "\"Indexer: URL normalizing: \" + normalize"}
{"classname": "indexer.IndexingJob", "TemplatePattern": "<P> ", "TemplateID": 946, "loggerLevel": "info", "logline": "writers.describe()"}
{"classname": "indexer.IndexingJob", "TemplatePattern": "Indexer: number of documents indexed, deleted, or skipped:", "TemplateID": 947, "loggerLevel": "info", "logline": "\"Indexer: number of documents indexed, deleted, or skipped:\""}
{"classname": "indexer.IndexingJob", "TemplatePattern": "Indexer: {}  {}<P>%6d<P>", "TemplateID": 948, "loggerLevel": "info", "logline": "\"Indexer: {}  {}\",  /root/nutch-git-source/nutch/src/java/org/apache/nutch/indexer/IndexingJob.java-            String.format(Locale.ROOT, \"%6d\", counter.getValue()),  counter.getName()"}
{"classname": "indexer.IndexingJob", "TemplatePattern": "Indexer: finished at <P>, elapsed: <P>", "TemplateID": 949, "loggerLevel": "info", "logline": "\"Indexer: finished at \" + sdf.format(end) + \", elapsed: \"  + TimingUtil.elapsedTime(start, end)"}
{"classname": "indexer.IndexingJob", "TemplatePattern": "<P> ", "TemplateID": 950, "loggerLevel": "none", "logline": "writers.describe()"}
{"classname": "indexer.IndexingJob", "TemplatePattern": "Indexer: <P>", "TemplateID": 951, "loggerLevel": "error", "logline": "\"Indexer: \" + StringUtils.stringifyException(e)"}
{"classname": "segment.SegmentChecker", "TemplatePattern": "No segment path or filesystem set.", "TemplateID": 952, "loggerLevel": "info", "logline": "\"No segment path or filesystem set.\""}
{"classname": "segment.SegmentChecker", "TemplatePattern": "Segment dir is complete: <P>.", "TemplateID": 953, "loggerLevel": "info", "logline": "\"Segment dir is complete: \" + segmentPath.toString() + \".\""}
{"classname": "segment.SegmentChecker", "TemplatePattern": "Skipping segment: <P>. Missing sub directories: <P>", "TemplateID": 954, "loggerLevel": "warn", "logline": "\"Skipping segment: \" + segmentPath.toString()  /root/nutch-git-source/nutch/src/java/org/apache/nutch/segment/SegmentChecker.java-          + \". Missing sub directories: \"  + missingDirString.substring(0, missingDirString.length() - 2)"}
{"classname": "segment.SegmentMergeFilters", "TemplatePattern": "Key <P> dropped by <P>", "TemplateID": 955, "loggerLevel": "trace", "logline": "\"Key \" + key + \" dropped by \" + filter.getClass().getName()"}
{"classname": "segment.SegmentMergeFilters", "TemplatePattern": "Key <P> accepted for merge.", "TemplateID": 956, "loggerLevel": "trace", "logline": "\"Key \" + key + \" accepted for merge.\""}
{"classname": "segment.SegmentReader", "TemplatePattern": "IOException:<P>", "TemplateID": 957, "loggerLevel": "error", "logline": "\"IOException:\", e"}
{"classname": "segment.SegmentReader", "TemplatePattern": "IOException:<P>", "TemplateID": 958, "loggerLevel": "error", "logline": "\"IOException:\", e"}
{"classname": "segment.SegmentReader", "TemplatePattern": "Unrecognized type: <P>", "TemplateID": 959, "loggerLevel": "warn", "logline": "\"Unrecognized type: \" + value.getClass()"}
{"classname": "segment.SegmentReader", "TemplatePattern": "SegmentReader: dump segment: <P>", "TemplateID": 960, "loggerLevel": "info", "logline": "\"SegmentReader: dump segment: \" + segment"}
{"classname": "segment.SegmentReader", "TemplatePattern": "Couldn't copy the content of <P> into <P>", "TemplateID": 961, "loggerLevel": "warn", "logline": "\"Couldn't copy the content of \" + partFile.toString()  + \" into \" + dumpFile.toString()"}
{"classname": "segment.SegmentReader", "TemplatePattern": "<P> ", "TemplateID": 962, "loggerLevel": "warn", "logline": "exception.getMessage()"}
{"classname": "segment.SegmentReader", "TemplatePattern": "SegmentReader: done", "TemplateID": 963, "loggerLevel": "info", "logline": "\"SegmentReader: done\""}
{"classname": "segment.SegmentReader", "TemplatePattern": "SegmentReader: get '<P>'", "TemplateID": 964, "loggerLevel": "info", "logline": "\"SegmentReader: get '\" + key + \"'\""}
{"classname": "segment.SegmentReader", "TemplatePattern": "Exception:<P>", "TemplateID": 965, "loggerLevel": "error", "logline": "\"Exception:\", e"}
{"classname": "segment.SegmentReader", "TemplatePattern": "Exception:<P>", "TemplateID": 966, "loggerLevel": "error", "logline": "\"Exception:\", e"}
{"classname": "segment.SegmentReader", "TemplatePattern": "Exception:<P>", "TemplateID": 967, "loggerLevel": "error", "logline": "\"Exception:\", e"}
{"classname": "segment.SegmentReader", "TemplatePattern": "Exception:<P>", "TemplateID": 968, "loggerLevel": "error", "logline": "\"Exception:\", e"}
{"classname": "segment.SegmentReader", "TemplatePattern": "Exception:<P>", "TemplateID": 969, "loggerLevel": "error", "logline": "\"Exception:\", e"}
{"classname": "segment.SegmentReader", "TemplatePattern": "Exception:<P>", "TemplateID": 970, "loggerLevel": "error", "logline": "\"Exception:\", e"}
{"classname": "segment.SegmentReader", "TemplatePattern": "(<P> to retrieve)", "TemplateID": 971, "loggerLevel": "debug", "logline": "\"(\" + cnt + \" to retrieve)\""}
{"classname": "segment.SegmentReader", "TemplatePattern": "Missing required argument: <segment_dir>", "TemplateID": 972, "loggerLevel": "none", "logline": "\"Missing required argument: <segment_dir>\""}
{"classname": "segment.SegmentReader", "TemplatePattern": "Missing required argument: <output>", "TemplateID": 973, "loggerLevel": "none", "logline": "\"Missing required argument: <output>\""}
{"classname": "segment.SegmentReader", "TemplatePattern": "Missing required argument: <segment_dir>", "TemplateID": 974, "loggerLevel": "none", "logline": "\"Missing required argument: <segment_dir>\""}
{"classname": "segment.SegmentReader", "TemplatePattern": "Missing required argument: <keyValue>", "TemplateID": 975, "loggerLevel": "none", "logline": "\"Missing required argument: <keyValue>\""}
{"classname": "segment.SegmentReader", "TemplatePattern": "Invalid operation: <P>", "TemplateID": 976, "loggerLevel": "none", "logline": "\"Invalid operation: \" + args[0]"}
{"classname": "segment.SegmentReader", "TemplatePattern": "* General options:", "TemplateID": 977, "loggerLevel": "none", "logline": "\"* General options:\""}
{"classname": "segment.SegmentReader", "TemplatePattern": "\\t-nocontent\\tignore content directory", "TemplateID": 978, "loggerLevel": "none", "logline": "\"\\t-nocontent\\tignore content directory\""}
{"classname": "segment.SegmentReader", "TemplatePattern": "\\t-nofetch\\tignore crawl_fetch directory", "TemplateID": 979, "loggerLevel": "none", "logline": "\"\\t-nofetch\\tignore crawl_fetch directory\""}
{"classname": "segment.SegmentReader", "TemplatePattern": "\\t-nogenerate\\tignore crawl_generate directory", "TemplateID": 980, "loggerLevel": "none", "logline": "\"\\t-nogenerate\\tignore crawl_generate directory\""}
{"classname": "segment.SegmentReader", "TemplatePattern": "\\t-noparse\\tignore crawl_parse directory", "TemplateID": 981, "loggerLevel": "none", "logline": "\"\\t-noparse\\tignore crawl_parse directory\""}
{"classname": "segment.SegmentReader", "TemplatePattern": "\\t-noparsedata\\tignore parse_data directory", "TemplateID": 982, "loggerLevel": "none", "logline": "\"\\t-noparsedata\\tignore parse_data directory\""}
{"classname": "segment.SegmentReader", "TemplatePattern": "\\t-noparsetext\\tignore parse_text directory", "TemplateID": 983, "loggerLevel": "none", "logline": "\"\\t-noparsetext\\tignore parse_text directory\""}
{"classname": "segment.SegmentReader", "TemplatePattern": "<P>", "TemplateID": 984, "loggerLevel": "none", "logline": ""}
{"classname": "segment.SegmentReader", "TemplatePattern": "\\t<segment_dir>\\tname of the segment directory.", "TemplateID": 985, "loggerLevel": "none", "logline": "\"\\t<segment_dir>\\tname of the segment directory.\""}
{"classname": "segment.SegmentReader", "TemplatePattern": "<P>", "TemplateID": 986, "loggerLevel": "none", "logline": ""}
{"classname": "segment.SegmentReader", "TemplatePattern": "<P>", "TemplateID": 987, "loggerLevel": "none", "logline": ""}
{"classname": "segment.SegmentReader", "TemplatePattern": "\\t<segment_dir>\\tname of the segment directory.", "TemplateID": 988, "loggerLevel": "none", "logline": "\"\\t<segment_dir>\\tname of the segment directory.\""}
{"classname": "segment.SegmentReader", "TemplatePattern": "\\t<keyValue>\\tvalue of the key (url).", "TemplateID": 989, "loggerLevel": "none", "logline": "\"\\t<keyValue>\\tvalue of the key (url).\""}
{"classname": "segment.SegmentMerger", "TemplatePattern": "Running OIF.next()", "TemplateID": 990, "loggerLevel": "debug", "logline": "\"Running OIF.next()\""}
{"classname": "segment.SegmentMerger", "TemplatePattern": "Slice size: <P> URLs.", "TemplateID": 991, "loggerLevel": "info", "logline": "\"Slice size: \" + sliceSize + \" URLs.\""}
{"classname": "segment.SegmentMerger", "TemplatePattern": "Skipping <P>:<P>", "TemplateID": 992, "loggerLevel": "warn", "logline": "\"Skipping \" + url + \":\" + e.getMessage()"}
{"classname": "segment.SegmentMerger", "TemplatePattern": "Skipping key <P>: <P>", "TemplateID": 993, "loggerLevel": "warn", "logline": "\"Skipping key \" + url + \": \" + e.getMessage()"}
{"classname": "segment.SegmentMerger", "TemplatePattern": "Merging <P> segments to <P>/<P>", "TemplateID": 994, "loggerLevel": "info", "logline": "\"Merging \" + segs.length + \" segments to \" + out + \"/\"  + segmentName"}
{"classname": "segment.SegmentMerger", "TemplatePattern": "Input dir <P> doesn't exist, skipping.", "TemplateID": 995, "loggerLevel": "warn", "logline": "\"Input dir \" + segs[i] + \" doesn't exist, skipping.\""}
{"classname": "segment.SegmentMerger", "TemplatePattern": "SegmentMerger:   adding <P>", "TemplateID": 996, "loggerLevel": "info", "logline": "\"SegmentMerger:   adding \" + segs[i]"}
{"classname": "segment.SegmentMerger", "TemplatePattern": "SegmentMerger: using segment data from:<P>", "TemplateID": 997, "loggerLevel": "info", "logline": "\"SegmentMerger: using segment data from:\" + sb.toString()"}
{"classname": "segment.SegmentMerger", "TemplatePattern": "\\tseg1 seg2 ...\\tlist of segment dirs", "TemplateID": 998, "loggerLevel": "none", "logline": "\"\\tseg1 seg2 ...\\tlist of segment dirs\""}
{"classname": "segment.SegmentMerger", "TemplatePattern": "ERROR: No input segments.", "TemplateID": 999, "loggerLevel": "none", "logline": "\"ERROR: No input segments.\""}
{"classname": "impl.JobWorker", "TemplatePattern": "Cannot run job worker!<P>", "TemplateID": 1000, "loggerLevel": "error", "logline": "\"Cannot run job worker!\", e"}
{"classname": "service.NutchServer", "TemplatePattern": "Starting NutchServer on {}:{}  ...<P>", "TemplateID": 1001, "loggerLevel": "info", "logline": "\"Starting NutchServer on {}:{}  ...\", host, port"}
{"classname": "service.NutchServer", "TemplatePattern": "Started Nutch Server on {}:{} at {}<P>", "TemplateID": 1002, "loggerLevel": "info", "logline": "\"Started Nutch Server on {}:{} at {}\", host, port, started"}
{"classname": "service.NutchServer", "TemplatePattern": "Started Nutch Server on <P>:<P> at <P>", "TemplateID": 1003, "loggerLevel": "none", "logline": "\"Started Nutch Server on \" + host + \":\" + port + \" at \" + started"}
{"classname": "plugin.SimpleTestPlugin", "TemplatePattern": "start up Plugin: <P>", "TemplateID": 1004, "loggerLevel": "none", "logline": "\"start up Plugin: \" + getDescriptor().getPluginId()"}
{"classname": "plugin.SimpleTestPlugin", "TemplatePattern": "shutdown Plugin: <P>", "TemplateID": 1005, "loggerLevel": "none", "logline": "\"shutdown Plugin: \" + getDescriptor().getPluginId()"}
{"classname": "metadata.TestSpellCheckedMetadata", "TemplatePattern": "<P>  spellchecked metadata I/O time:<P>ms.", "TemplateID": 1006, "loggerLevel": "none", "logline": "NUM_ITERATIONS + \" spellchecked metadata I/O time:\"  + (System.currentTimeMillis() - start) + \"ms.\""}
{"classname": "proxy.LogDebugHandler", "TemplatePattern": "-- <P> <P>\\n<P>", "TemplateID": 1007, "loggerLevel": "debug", "logline": "\"-- \" + req.getMethod() + \" \" + req.getUri().toString() + \"\\n\"  + req.getConnection().getRequestFields()"}
{"classname": "proxy.ProxyTestbed", "TemplatePattern": "Unknown argument: <P>", "TemplateID": 1008, "loggerLevel": "error", "logline": "\"Unknown argument: \" + args[i]"}
{"classname": "proxy.ProxyTestbed", "TemplatePattern": "* Added debug handler.", "TemplateID": 1009, "loggerLevel": "info", "logline": "\"* Added debug handler.\""}
{"classname": "proxy.ProxyTestbed", "TemplatePattern": "* Added delay handler: <P> <P>random delay up to <P>", "TemplateID": 1010, "loggerLevel": "info", "logline": "\"* Added delay handler: \"  /root/nutch-git-source/nutch/src/test/org/apache/nutch/tools/proxy/ProxyTestbed.java-          + (delayVal < 0 ? \"random delay up to \" + (-delayVal)  : \"constant delay of \" + delayVal)"}
{"classname": "proxy.ProxyTestbed", "TemplatePattern": "* Added delay handler: <P> <P>constant delay of <P>", "TemplateID": 1011, "loggerLevel": "info", "logline": "\"* Added delay handler: \"  /root/nutch-git-source/nutch/src/test/org/apache/nutch/tools/proxy/ProxyTestbed.java-          + (delayVal < 0 ? \"random delay up to \" + (-delayVal)  : \"constant delay of \" + delayVal)"}
{"classname": "proxy.ProxyTestbed", "TemplatePattern": "* Added segment handler for: <P>", "TemplateID": 1012, "loggerLevel": "info", "logline": "\"* Added segment handler for: \" + p"}
{"classname": "proxy.ProxyTestbed", "TemplatePattern": "Skipping segment '<P>': <P>", "TemplateID": 1013, "loggerLevel": "warn", "logline": "\"Skipping segment '\" + p + \"': \"  + StringUtils.stringifyException(e)"}
{"classname": "proxy.ProxyTestbed", "TemplatePattern": "* Adding forwarding proxy for all unknown urls ...", "TemplateID": 1014, "loggerLevel": "info", "logline": "\"* Adding forwarding proxy for all unknown urls ...\""}
{"classname": "proxy.ProxyTestbed", "TemplatePattern": "* Added fake handler for remaining URLs.", "TemplateID": 1015, "loggerLevel": "info", "logline": "\"* Added fake handler for remaining URLs.\""}
{"classname": "proxy.SegmentHandler", "TemplatePattern": "URI: <P>", "TemplateID": 1016, "loggerLevel": "info", "logline": "\"URI: \" + uri"}
{"classname": "proxy.SegmentHandler", "TemplatePattern": "-got <P>", "TemplateID": 1017, "loggerLevel": "info", "logline": "\"-got \" + cd.toString()"}
{"classname": "proxy.SegmentHandler", "TemplatePattern": "-data len=<P>", "TemplateID": 1018, "loggerLevel": "debug", "logline": "\"-data len=\" + data.length"}
{"classname": "proxy.SegmentHandler", "TemplatePattern": "- <P> meta", "TemplateID": 1019, "loggerLevel": "debug", "logline": "\"- \" + names.length + \" meta\""}
{"classname": "proxy.SegmentHandler", "TemplatePattern": " -not found <P>", "TemplateID": 1020, "loggerLevel": "info", "logline": "\" -not found \" + url"}
{"classname": "proxy.SegmentHandler", "TemplatePattern": "<P> ", "TemplateID": 1021, "loggerLevel": "warn", "logline": "StringUtils.stringifyException(e)"}
{"classname": "util.TestGZIPUtils", "TemplatePattern": "original data has len <P>", "TemplateID": 1022, "loggerLevel": "none", "logline": "\"original data has len \" + origBytes.length"}
{"classname": "util.TestGZIPUtils", "TemplatePattern": "compressed data has len <P>", "TemplateID": 1023, "loggerLevel": "none", "logline": "\"compressed data has len \" + compressedBytes.length"}
{"classname": "util.TestGZIPUtils", "TemplatePattern": "truncated to len <P>, trunc is null", "TemplateID": 1024, "loggerLevel": "none", "logline": "\"truncated to len \" + i + \", trunc is null\""}
{"classname": "util.TestGZIPUtils", "TemplatePattern": "truncated to len <P>, trunc.length=  <P>", "TemplateID": 1025, "loggerLevel": "none", "logline": "\"truncated to len \" + i + \", trunc.length=  \"  + trunc.length"}
{"classname": "util.TestPrefixStringMatcher", "TemplatePattern": "got <P> matches out of <P> tests", "TemplateID": 1026, "loggerLevel": "none", "logline": "\"got \" + numMatches + \" matches out of \"  + numInputsTested + \" tests\""}
{"classname": "util.TestSuffixStringMatcher", "TemplatePattern": "got <P> matches out of <P> tests", "TemplateID": 1027, "loggerLevel": "none", "logline": "\"got \" + numMatches + \" matches out of \"  + numInputsTested + \" tests\""}
{"classname": "crawl.CrawlDBTestUtil", "TemplatePattern": "* creating crawldb: <P>", "TemplateID": 1028, "loggerLevel": "trace", "logline": "\"* creating crawldb: \" + crawldb"}
{"classname": "crawl.CrawlDBTestUtil", "TemplatePattern": "adding:<P>", "TemplateID": 1029, "loggerLevel": "info", "logline": "\"adding:\" + row.url.toString()"}
{"classname": "crawl.CrawlDbUpdateUtil", "TemplatePattern": "<P> ", "TemplateID": 1030, "loggerLevel": "error", "logline": "StringUtils.stringifyException(e)"}
{"classname": "crawl.TestInjector", "TemplatePattern": "reading:<P>", "TemplateID": 1031, "loggerLevel": "none", "logline": "\"reading:\" + dbfile"}
{"classname": "crawl.TestInjector", "TemplatePattern": "reading:<P>", "TemplateID": 1032, "loggerLevel": "none", "logline": "\"reading:\" + dbfile"}
{"classname": "crawl.ContinuousCrawlTestUtil", "TemplatePattern": "document content changed", "TemplateID": 1033, "loggerLevel": "info", "logline": "\"document content changed\""}
{"classname": "crawl.ContinuousCrawlTestUtil", "TemplatePattern": "Emulate a continuous crawl, launched every <P> day (<P> seconds)", "TemplateID": 1034, "loggerLevel": "info", "logline": "\"Emulate a continuous crawl, launched every \"  /root/nutch-git-source/nutch/src/test/org/apache/nutch/crawl/ContinuousCrawlTestUtil.java-        + (interval / (FetchSchedule.SECONDS_PER_DAY * 1000)) + \" day (\"  + (interval / 1000) + \" seconds)\""}
{"classname": "crawl.ContinuousCrawlTestUtil", "TemplatePattern": "check: <P>", "TemplateID": 1035, "loggerLevel": "info", "logline": "\"check: \" + new Date(nextTime)"}
{"classname": "crawl.ContinuousCrawlTestUtil", "TemplatePattern": "... fetching now (<P>)", "TemplateID": 1036, "loggerLevel": "info", "logline": "\"... fetching now (\" + new Date(nextTime) + \")\""}
{"classname": "crawl.ContinuousCrawlTestUtil", "TemplatePattern": "(last fetch: <P> = <P> ago)", "TemplateID": 1037, "loggerLevel": "info", "logline": "\"(last fetch: \" + new Date(lastFetchTime) + \" = \"  + TimingUtil.elapsedTime(lastFetchTime, nextTime) + \" ago)\""}
{"classname": "crawl.ContinuousCrawlTestUtil", "TemplatePattern": "previously in CrawlDb: <P>", "TemplateID": 1038, "loggerLevel": "info", "logline": "\"previously in CrawlDb: \" + copyDbDatum"}
{"classname": "crawl.ContinuousCrawlTestUtil", "TemplatePattern": "after shouldFetch(): <P>", "TemplateID": 1039, "loggerLevel": "info", "logline": "\"after shouldFetch(): \" + afterShouldFetch"}
{"classname": "crawl.ContinuousCrawlTestUtil", "TemplatePattern": "fetch: <P>", "TemplateID": 1040, "loggerLevel": "info", "logline": "\"fetch: \" + fetchDatum"}
{"classname": "crawl.ContinuousCrawlTestUtil", "TemplatePattern": "wrong result in CrawlDb: <P>", "TemplateID": 1041, "loggerLevel": "warn", "logline": "\"wrong result in CrawlDb: \" + res.get(0)"}
{"classname": "crawl.ContinuousCrawlTestUtil", "TemplatePattern": "Max. number of errors <P> reached. Stopping.", "TemplateID": 1042, "loggerLevel": "error", "logline": "\"Max. number of errors \" + maxErrors  + \" reached. Stopping.\""}
{"classname": "crawl.TestCrawlDbMerger", "TemplatePattern": "url=<P>", "TemplateID": 1043, "loggerLevel": "none", "logline": "\"url=\" + url"}
{"classname": "crawl.TestCrawlDbMerger", "TemplatePattern": " cd <P>", "TemplateID": 1044, "loggerLevel": "none", "logline": "\" cd \" + cd"}
{"classname": "crawl.TestCrawlDbMerger", "TemplatePattern": " res <P>", "TemplateID": 1045, "loggerLevel": "none", "logline": "\" res \" + res"}
{"classname": "crawl.TODOTestCrawlDbStates", "TemplatePattern": "NUTCH-578: test long running continuous crawl with fetch_retry", "TemplateID": 1046, "loggerLevel": "info", "logline": "\"NUTCH-578: test long running continuous crawl with fetch_retry\""}
{"classname": "crawl.TODOTestCrawlDbStates", "TemplatePattern": "Retry counter > db.fetch.retry.max: <P>", "TemplateID": 1047, "loggerLevel": "warn", "logline": "\"Retry counter > db.fetch.retry.max: \" + result"}
{"classname": "crawl.TODOTestCrawlDbStates", "TemplatePattern": "Retry counter max. value reached (overflow imminent): <P>", "TemplateID": 1048, "loggerLevel": "warn", "logline": "\"Retry counter max. value reached (overflow imminent): \"  + result"}
{"classname": "crawl.TODOTestCrawlDbStates", "TemplatePattern": "Retry counter overflow: <P>", "TemplateID": 1049, "loggerLevel": "error", "logline": "\"Retry counter overflow: \" + result"}
{"classname": "crawl.TODOTestCrawlDbStates", "TemplatePattern": "ok: <P>", "TemplateID": 1050, "loggerLevel": "info", "logline": "\"ok: \" + result"}
{"classname": "crawl.TODOTestCrawlDbStates", "TemplatePattern": "ok: <P>", "TemplateID": 1051, "loggerLevel": "info", "logline": "\"ok: \" + result"}
{"classname": "crawl.TODOTestCrawlDbStates", "TemplatePattern": "wrong: <P>", "TemplateID": 1052, "loggerLevel": "warn", "logline": "\"wrong: \" + result"}
{"classname": "crawl.TODOTestCrawlDbStates", "TemplatePattern": "NUTCH-1564 test SYNC_DELTA calculation of AdaptiveFetchSchedule", "TemplateID": 1053, "loggerLevel": "info", "logline": "\"NUTCH-1564 test SYNC_DELTA calculation of AdaptiveFetchSchedule\""}
{"classname": "crawl.TODOTestCrawlDbStates", "TemplatePattern": "Next fetch time is in the past: <P>", "TemplateID": 1054, "loggerLevel": "error", "logline": "\"Next fetch time is in the past: \" + result"}
{"classname": "crawl.TODOTestCrawlDbStates", "TemplatePattern": "Less then one minute until next fetch: <P>", "TemplateID": 1055, "loggerLevel": "error", "logline": "\"Less then one minute until next fetch: \" + result"}
{"classname": "crawl.TODOTestCrawlDbStates", "TemplatePattern": "Interval until next fetch time (<P>) is not within min. and max. interval: <P>", "TemplateID": 1056, "loggerLevel": "error", "logline": "\"Interval until next fetch time (\"  /root/nutch-git-source/nutch/src/test/org/apache/nutch/crawl/TODOTestCrawlDbStates.java-              + TimingUtil.elapsedTime(fetchTime, result.getFetchTime())  + \") is not within min. and max. interval: \" + result"}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "Test CrawlDatum state transitions", "TemplateID": 1057, "loggerLevel": "info", "logline": "\"Test CrawlDatum state transitions\""}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "Testing state transitions with <P>", "TemplateID": 1058, "loggerLevel": "info", "logline": "\"Testing state transitions with \" + sched"}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "<P>  + <P> => <P>", "TemplateID": 1059, "loggerLevel": "info", "logline": "fromDbStatusName + \" + \" + fetchStatusName + \" => \"  + getStatusName(toDbStatus)"}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "Test CrawlDatum states in Injector after inject", "TemplateID": 1060, "loggerLevel": "info", "logline": "\"Test CrawlDatum states in Injector after inject\""}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "Testing inject with <P>", "TemplateID": 1061, "loggerLevel": "info", "logline": "\"Testing inject with \" + sched"}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "inject <P> <P><not in CrawlDb><P>", "TemplateID": 1062, "loggerLevel": "info", "logline": "\"inject \"  /root/nutch-git-source/nutch/src/test/org/apache/nutch/crawl/TestCrawlDbStates.java-            + (fromDbStatus == -1 ? \"<not in CrawlDb>\" : CrawlDatum  /root/nutch-git-source/nutch/src/test/org/apache/nutch/crawl/TestCrawlDbStates.java-                .getStatusName(fromDbStatus)) + \" + \"  /root/nutch-git-source/nutch/src/test/org/apache/nutch/crawl/TestCrawlDbStates.java-            + getStatusName(STATUS_INJECTED) + \" => \"  + getStatusName(toDbStatus)"}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "inject <P> <P> + <P> => <P>", "TemplateID": 1063, "loggerLevel": "info", "logline": "\"inject \"  /root/nutch-git-source/nutch/src/test/org/apache/nutch/crawl/TestCrawlDbStates.java-            + (fromDbStatus == -1 ? \"<not in CrawlDb>\" : CrawlDatum  /root/nutch-git-source/nutch/src/test/org/apache/nutch/crawl/TestCrawlDbStates.java-                .getStatusName(fromDbStatus)) + \" + \"  /root/nutch-git-source/nutch/src/test/org/apache/nutch/crawl/TestCrawlDbStates.java-            + getStatusName(STATUS_INJECTED) + \" => \"  + getStatusName(toDbStatus)"}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "<P> ", "TemplateID": 1064, "loggerLevel": "error", "logline": "StringUtils.stringifyException(e)"}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "Test state notmodified", "TemplateID": 1065, "loggerLevel": "info", "logline": "\"Test state notmodified\""}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "<P> ", "TemplateID": 1066, "loggerLevel": "info", "logline": "desc"}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "<P> ", "TemplateID": 1067, "loggerLevel": "info", "logline": "desc"}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "last effective fetch (HTTP 200, not HTTP 304), at <P>, took place more than db.fetch.interval.max time, <P>segment containing fetched content may have been deleted", "TemplateID": 1068, "loggerLevel": "error", "logline": "\"last effective fetch (HTTP 200, not HTTP 304), at \"  /root/nutch-git-source/nutch/src/test/org/apache/nutch/crawl/TestCrawlDbStates.java-            + new Date(lastFetchTime)  /root/nutch-git-source/nutch/src/test/org/apache/nutch/crawl/TestCrawlDbStates.java-            + \", took place more than db.fetch.interval.max time, \"  + \"segment containing fetched content may have been deleted\""}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "document has changed (signature changed) but state is still <P>", "TemplateID": 1069, "loggerLevel": "error", "logline": "\"document has changed (signature changed) but state is still \"  + getStatusName(STATUS_DB_NOTMODIFIED)"}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "ok: <P>", "TemplateID": 1070, "loggerLevel": "info", "logline": "\"ok: \" + result"}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "notmodified without previous fetch", "TemplateID": 1071, "loggerLevel": "warn", "logline": "\"notmodified without previous fetch\""}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "ok (first fetch): <P>", "TemplateID": 1072, "loggerLevel": "info", "logline": "\"ok (first fetch): \" + result"}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "ok (content changed): <P>", "TemplateID": 1073, "loggerLevel": "info", "logline": "\"ok (content changed): \" + result"}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "document has not changed, db_notmodified expected", "TemplateID": 1074, "loggerLevel": "warn", "logline": "\"document has not changed, db_notmodified expected\""}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "state set to unfetched by AdaptiveFetchSchedule", "TemplateID": 1075, "loggerLevel": "info", "logline": "\"state set to unfetched by AdaptiveFetchSchedule\""}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "must reset signature: <P>", "TemplateID": 1076, "loggerLevel": "warn", "logline": "\"must reset signature: \" + result"}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "ok: <P>", "TemplateID": 1077, "loggerLevel": "info", "logline": "\"ok: \" + result"}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "wrong result: <P>", "TemplateID": 1078, "loggerLevel": "warn", "logline": "\"wrong result: \" + result"}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "modified time not set (TODO: not set by DefaultFetchSchedule)", "TemplateID": 1079, "loggerLevel": "error", "logline": "\"modified time not set (TODO: not set by DefaultFetchSchedule)\""}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "wrong modified time: <P> (expected <P>)", "TemplateID": 1080, "loggerLevel": "error", "logline": "\"wrong modified time: \" + new Date(result.getModifiedTime())  + \" (expected \" + new Date(modifiedTime) + \")\""}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "fetched with HTTP <P> => <P>", "TemplateID": 1081, "loggerLevel": "info", "logline": "\"fetched with HTTP \" + httpCode + \" => \"  + getStatusName(datum.getStatus())"}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "NUTCH-1245: test long running continuous crawl", "TemplateID": 1082, "loggerLevel": "info", "logline": "\"NUTCH-1245: test long running continuous crawl\""}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "NUTCH-1245 (misconfiguration): test with db.fetch.interval.default > (1.5 * db.fetch.interval.max)", "TemplateID": 1083, "loggerLevel": "info", "logline": "\"NUTCH-1245 (misconfiguration): test with db.fetch.interval.default > (1.5 * db.fetch.interval.max)\""}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "NUTCH-1422 must reset signature for redirects and similar states", "TemplateID": 1084, "loggerLevel": "info", "logline": "\"NUTCH-1422 must reset signature for redirects and similar states\""}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "Testing reset signature with <P>", "TemplateID": 1085, "loggerLevel": "info", "logline": "\"Testing reset signature with \" + sched"}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "Step <P>: fetched with <P>", "TemplateID": 1086, "loggerLevel": "info", "logline": "\"Step \" + counter + \": fetched with \"  + getStatusName(fetchState)"}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "Should never get into state <P> from <P>", "TemplateID": 1087, "loggerLevel": "error", "logline": "\"Should never get into state \"  /root/nutch-git-source/nutch/src/test/org/apache/nutch/crawl/TestCrawlDbStates.java-            + getStatusName(STATUS_DB_NOTMODIFIED) + \" from \"  + getStatusName(fetchState)"}
{"classname": "crawl.TestCrawlDbStates", "TemplatePattern": "Signature not reset in state <P>", "TemplateID": 1088, "loggerLevel": "error", "logline": "\"Signature not reset in state \"  + getStatusName(result.getStatus())"}
{"classname": "segment.TestSegmentMergerCrawlDatums", "TemplatePattern": "Reading status for: <P> > <P>", "TemplateID": 1089, "loggerLevel": "info", "logline": "\"Reading status for: \" + key.toString() + \" > \"  + CrawlDatum.getStatusName(value.getStatus())"}
{"classname": "segment.TestSegmentMergerCrawlDatums", "TemplatePattern": "\\nSegment: <P>", "TemplateID": 1090, "loggerLevel": "info", "logline": "\"\\nSegment: \" + segment.toString()"}
{"classname": "segment.TestSegmentMergerCrawlDatums", "TemplatePattern": "<P>  > <P>", "TemplateID": 1091, "loggerLevel": "info", "logline": "url + \" > \" + CrawlDatum.getStatusName(CrawlDatum.STATUS_LINKED)"}
{"classname": "segment.TestSegmentMergerCrawlDatums", "TemplatePattern": "<P>  > <P>", "TemplateID": 1092, "loggerLevel": "info", "logline": "url + \" > \" + CrawlDatum.getStatusName(status)"}
{"classname": "segment.TestSegmentMergerCrawlDatums", "TemplatePattern": "<P>  > <P>", "TemplateID": 1093, "loggerLevel": "info", "logline": "redirectUrl + \" > \"  + CrawlDatum.getStatusName(CrawlDatum.STATUS_FETCH_REDIR_TEMP)"}
{"classname": "segment.TestSegmentMerger", "TemplatePattern": "Creating large segment 1...", "TemplateID": 1094, "loggerLevel": "none", "logline": "\"Creating large segment 1...\""}
{"classname": "segment.TestSegmentMerger", "TemplatePattern": " - done: <P> records.", "TemplateID": 1095, "loggerLevel": "none", "logline": "\" - done: \" + countSeg1 + \" records.\""}
{"classname": "segment.TestSegmentMerger", "TemplatePattern": "Creating large segment 2...", "TemplateID": 1096, "loggerLevel": "none", "logline": "\"Creating large segment 2...\""}
{"classname": "segment.TestSegmentMerger", "TemplatePattern": " - done: <P> records.", "TemplateID": 1097, "loggerLevel": "none", "logline": "\" - done: \" + countSeg2 + \" records.\""}
